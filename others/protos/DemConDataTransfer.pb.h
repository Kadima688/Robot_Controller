// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DemConDataTransfer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DemConDataTransfer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DemConDataTransfer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DemConDataTransfer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DemConDataTransfer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DemConDataTransfer_2eproto;
namespace ExternalDataTransfer {
class Pt_AXISPOS_SCARA;
class Pt_AXISPOS_SCARADefaultTypeInternal;
extern Pt_AXISPOS_SCARADefaultTypeInternal _Pt_AXISPOS_SCARA_default_instance_;
class Pt_DataResult;
class Pt_DataResultDefaultTypeInternal;
extern Pt_DataResultDefaultTypeInternal _Pt_DataResult_default_instance_;
class Pt_DataVoid;
class Pt_DataVoidDefaultTypeInternal;
extern Pt_DataVoidDefaultTypeInternal _Pt_DataVoid_default_instance_;
class Pt_EnableState;
class Pt_EnableStateDefaultTypeInternal;
extern Pt_EnableStateDefaultTypeInternal _Pt_EnableState_default_instance_;
class Pt_StartServo;
class Pt_StartServoDefaultTypeInternal;
extern Pt_StartServoDefaultTypeInternal _Pt_StartServo_default_instance_;
class Pt_VISUAL_SERVO_ENDSERVO;
class Pt_VISUAL_SERVO_ENDSERVODefaultTypeInternal;
extern Pt_VISUAL_SERVO_ENDSERVODefaultTypeInternal _Pt_VISUAL_SERVO_ENDSERVO_default_instance_;
class Pt_VISUAL_SERVO_ERROR_ABC;
class Pt_VISUAL_SERVO_ERROR_ABCDefaultTypeInternal;
extern Pt_VISUAL_SERVO_ERROR_ABCDefaultTypeInternal _Pt_VISUAL_SERVO_ERROR_ABC_default_instance_;
class Pt_VISUAL_SERVO_ERROR_IMAGE;
class Pt_VISUAL_SERVO_ERROR_IMAGEDefaultTypeInternal;
extern Pt_VISUAL_SERVO_ERROR_IMAGEDefaultTypeInternal _Pt_VISUAL_SERVO_ERROR_IMAGE_default_instance_;
class Pt_VISUAL_SERVO_ERROR_XYZ;
class Pt_VISUAL_SERVO_ERROR_XYZDefaultTypeInternal;
extern Pt_VISUAL_SERVO_ERROR_XYZDefaultTypeInternal _Pt_VISUAL_SERVO_ERROR_XYZ_default_instance_;
class Pt_VISUAL_SERVO_SERVOTYPE;
class Pt_VISUAL_SERVO_SERVOTYPEDefaultTypeInternal;
extern Pt_VISUAL_SERVO_SERVOTYPEDefaultTypeInternal _Pt_VISUAL_SERVO_SERVOTYPE_default_instance_;
class Pt_VISUAL_SERVO_TARGETPOS_ABC;
class Pt_VISUAL_SERVO_TARGETPOS_ABCDefaultTypeInternal;
extern Pt_VISUAL_SERVO_TARGETPOS_ABCDefaultTypeInternal _Pt_VISUAL_SERVO_TARGETPOS_ABC_default_instance_;
class Pt_VISUAL_SERVO_TARGETPOS_XYZ;
class Pt_VISUAL_SERVO_TARGETPOS_XYZDefaultTypeInternal;
extern Pt_VISUAL_SERVO_TARGETPOS_XYZDefaultTypeInternal _Pt_VISUAL_SERVO_TARGETPOS_XYZ_default_instance_;
}  // namespace ExternalDataTransfer
PROTOBUF_NAMESPACE_OPEN
template<> ::ExternalDataTransfer::Pt_AXISPOS_SCARA* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_AXISPOS_SCARA>(Arena*);
template<> ::ExternalDataTransfer::Pt_DataResult* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_DataResult>(Arena*);
template<> ::ExternalDataTransfer::Pt_DataVoid* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_DataVoid>(Arena*);
template<> ::ExternalDataTransfer::Pt_EnableState* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_EnableState>(Arena*);
template<> ::ExternalDataTransfer::Pt_StartServo* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_StartServo>(Arena*);
template<> ::ExternalDataTransfer::Pt_VISUAL_SERVO_ENDSERVO* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_VISUAL_SERVO_ENDSERVO>(Arena*);
template<> ::ExternalDataTransfer::Pt_VISUAL_SERVO_ERROR_ABC* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_VISUAL_SERVO_ERROR_ABC>(Arena*);
template<> ::ExternalDataTransfer::Pt_VISUAL_SERVO_ERROR_IMAGE* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_VISUAL_SERVO_ERROR_IMAGE>(Arena*);
template<> ::ExternalDataTransfer::Pt_VISUAL_SERVO_ERROR_XYZ* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_VISUAL_SERVO_ERROR_XYZ>(Arena*);
template<> ::ExternalDataTransfer::Pt_VISUAL_SERVO_SERVOTYPE* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_VISUAL_SERVO_SERVOTYPE>(Arena*);
template<> ::ExternalDataTransfer::Pt_VISUAL_SERVO_TARGETPOS_ABC* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_VISUAL_SERVO_TARGETPOS_ABC>(Arena*);
template<> ::ExternalDataTransfer::Pt_VISUAL_SERVO_TARGETPOS_XYZ* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_VISUAL_SERVO_TARGETPOS_XYZ>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ExternalDataTransfer {

// ===================================================================

class Pt_DataVoid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_DataVoid) */ {
 public:
  inline Pt_DataVoid() : Pt_DataVoid(nullptr) {}
  virtual ~Pt_DataVoid();

  Pt_DataVoid(const Pt_DataVoid& from);
  Pt_DataVoid(Pt_DataVoid&& from) noexcept
    : Pt_DataVoid() {
    *this = ::std::move(from);
  }

  inline Pt_DataVoid& operator=(const Pt_DataVoid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_DataVoid& operator=(Pt_DataVoid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_DataVoid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_DataVoid* internal_default_instance() {
    return reinterpret_cast<const Pt_DataVoid*>(
               &_Pt_DataVoid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pt_DataVoid& a, Pt_DataVoid& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_DataVoid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_DataVoid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_DataVoid* New() const final {
    return CreateMaybeMessage<Pt_DataVoid>(nullptr);
  }

  Pt_DataVoid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_DataVoid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_DataVoid& from);
  void MergeFrom(const Pt_DataVoid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_DataVoid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_DataVoid";
  }
  protected:
  explicit Pt_DataVoid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullFieldNumber = 1,
  };
  // int32 null = 1;
  void clear_null();
  ::PROTOBUF_NAMESPACE_ID::int32 null() const;
  void set_null(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_null() const;
  void _internal_set_null(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_DataVoid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 null_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_DataResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_DataResult) */ {
 public:
  inline Pt_DataResult() : Pt_DataResult(nullptr) {}
  virtual ~Pt_DataResult();

  Pt_DataResult(const Pt_DataResult& from);
  Pt_DataResult(Pt_DataResult&& from) noexcept
    : Pt_DataResult() {
    *this = ::std::move(from);
  }

  inline Pt_DataResult& operator=(const Pt_DataResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_DataResult& operator=(Pt_DataResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_DataResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_DataResult* internal_default_instance() {
    return reinterpret_cast<const Pt_DataResult*>(
               &_Pt_DataResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pt_DataResult& a, Pt_DataResult& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_DataResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_DataResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_DataResult* New() const final {
    return CreateMaybeMessage<Pt_DataResult>(nullptr);
  }

  Pt_DataResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_DataResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_DataResult& from);
  void MergeFrom(const Pt_DataResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_DataResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_DataResult";
  }
  protected:
  explicit Pt_DataResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_DataResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_EnableState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_EnableState) */ {
 public:
  inline Pt_EnableState() : Pt_EnableState(nullptr) {}
  virtual ~Pt_EnableState();

  Pt_EnableState(const Pt_EnableState& from);
  Pt_EnableState(Pt_EnableState&& from) noexcept
    : Pt_EnableState() {
    *this = ::std::move(from);
  }

  inline Pt_EnableState& operator=(const Pt_EnableState& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_EnableState& operator=(Pt_EnableState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_EnableState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_EnableState* internal_default_instance() {
    return reinterpret_cast<const Pt_EnableState*>(
               &_Pt_EnableState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pt_EnableState& a, Pt_EnableState& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_EnableState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_EnableState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_EnableState* New() const final {
    return CreateMaybeMessage<Pt_EnableState>(nullptr);
  }

  Pt_EnableState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_EnableState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_EnableState& from);
  void MergeFrom(const Pt_EnableState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_EnableState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_EnableState";
  }
  protected:
  explicit Pt_EnableState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnablestateFieldNumber = 1,
  };
  // int32 enablestate = 1;
  void clear_enablestate();
  ::PROTOBUF_NAMESPACE_ID::int32 enablestate() const;
  void set_enablestate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enablestate() const;
  void _internal_set_enablestate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_EnableState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 enablestate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_StartServo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_StartServo) */ {
 public:
  inline Pt_StartServo() : Pt_StartServo(nullptr) {}
  virtual ~Pt_StartServo();

  Pt_StartServo(const Pt_StartServo& from);
  Pt_StartServo(Pt_StartServo&& from) noexcept
    : Pt_StartServo() {
    *this = ::std::move(from);
  }

  inline Pt_StartServo& operator=(const Pt_StartServo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_StartServo& operator=(Pt_StartServo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_StartServo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_StartServo* internal_default_instance() {
    return reinterpret_cast<const Pt_StartServo*>(
               &_Pt_StartServo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Pt_StartServo& a, Pt_StartServo& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_StartServo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_StartServo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_StartServo* New() const final {
    return CreateMaybeMessage<Pt_StartServo>(nullptr);
  }

  Pt_StartServo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_StartServo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_StartServo& from);
  void MergeFrom(const Pt_StartServo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_StartServo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_StartServo";
  }
  protected:
  explicit Pt_StartServo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartservoFieldNumber = 1,
  };
  // int32 startservo = 1;
  void clear_startservo();
  ::PROTOBUF_NAMESPACE_ID::int32 startservo() const;
  void set_startservo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_startservo() const;
  void _internal_set_startservo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_StartServo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 startservo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_VISUAL_SERVO_SERVOTYPE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_VISUAL_SERVO_SERVOTYPE) */ {
 public:
  inline Pt_VISUAL_SERVO_SERVOTYPE() : Pt_VISUAL_SERVO_SERVOTYPE(nullptr) {}
  virtual ~Pt_VISUAL_SERVO_SERVOTYPE();

  Pt_VISUAL_SERVO_SERVOTYPE(const Pt_VISUAL_SERVO_SERVOTYPE& from);
  Pt_VISUAL_SERVO_SERVOTYPE(Pt_VISUAL_SERVO_SERVOTYPE&& from) noexcept
    : Pt_VISUAL_SERVO_SERVOTYPE() {
    *this = ::std::move(from);
  }

  inline Pt_VISUAL_SERVO_SERVOTYPE& operator=(const Pt_VISUAL_SERVO_SERVOTYPE& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_VISUAL_SERVO_SERVOTYPE& operator=(Pt_VISUAL_SERVO_SERVOTYPE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_VISUAL_SERVO_SERVOTYPE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_VISUAL_SERVO_SERVOTYPE* internal_default_instance() {
    return reinterpret_cast<const Pt_VISUAL_SERVO_SERVOTYPE*>(
               &_Pt_VISUAL_SERVO_SERVOTYPE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Pt_VISUAL_SERVO_SERVOTYPE& a, Pt_VISUAL_SERVO_SERVOTYPE& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_VISUAL_SERVO_SERVOTYPE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_VISUAL_SERVO_SERVOTYPE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_VISUAL_SERVO_SERVOTYPE* New() const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_SERVOTYPE>(nullptr);
  }

  Pt_VISUAL_SERVO_SERVOTYPE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_SERVOTYPE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_VISUAL_SERVO_SERVOTYPE& from);
  void MergeFrom(const Pt_VISUAL_SERVO_SERVOTYPE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_VISUAL_SERVO_SERVOTYPE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_VISUAL_SERVO_SERVOTYPE";
  }
  protected:
  explicit Pt_VISUAL_SERVO_SERVOTYPE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServotypeFieldNumber = 1,
  };
  // int32 servotype = 1;
  void clear_servotype();
  ::PROTOBUF_NAMESPACE_ID::int32 servotype() const;
  void set_servotype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_servotype() const;
  void _internal_set_servotype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_VISUAL_SERVO_SERVOTYPE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 servotype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_VISUAL_SERVO_TARGETPOS_XYZ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_XYZ) */ {
 public:
  inline Pt_VISUAL_SERVO_TARGETPOS_XYZ() : Pt_VISUAL_SERVO_TARGETPOS_XYZ(nullptr) {}
  virtual ~Pt_VISUAL_SERVO_TARGETPOS_XYZ();

  Pt_VISUAL_SERVO_TARGETPOS_XYZ(const Pt_VISUAL_SERVO_TARGETPOS_XYZ& from);
  Pt_VISUAL_SERVO_TARGETPOS_XYZ(Pt_VISUAL_SERVO_TARGETPOS_XYZ&& from) noexcept
    : Pt_VISUAL_SERVO_TARGETPOS_XYZ() {
    *this = ::std::move(from);
  }

  inline Pt_VISUAL_SERVO_TARGETPOS_XYZ& operator=(const Pt_VISUAL_SERVO_TARGETPOS_XYZ& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_VISUAL_SERVO_TARGETPOS_XYZ& operator=(Pt_VISUAL_SERVO_TARGETPOS_XYZ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_VISUAL_SERVO_TARGETPOS_XYZ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_VISUAL_SERVO_TARGETPOS_XYZ* internal_default_instance() {
    return reinterpret_cast<const Pt_VISUAL_SERVO_TARGETPOS_XYZ*>(
               &_Pt_VISUAL_SERVO_TARGETPOS_XYZ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Pt_VISUAL_SERVO_TARGETPOS_XYZ& a, Pt_VISUAL_SERVO_TARGETPOS_XYZ& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_VISUAL_SERVO_TARGETPOS_XYZ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_VISUAL_SERVO_TARGETPOS_XYZ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_VISUAL_SERVO_TARGETPOS_XYZ* New() const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_TARGETPOS_XYZ>(nullptr);
  }

  Pt_VISUAL_SERVO_TARGETPOS_XYZ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_TARGETPOS_XYZ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_VISUAL_SERVO_TARGETPOS_XYZ& from);
  void MergeFrom(const Pt_VISUAL_SERVO_TARGETPOS_XYZ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_VISUAL_SERVO_TARGETPOS_XYZ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_XYZ";
  }
  protected:
  explicit Pt_VISUAL_SERVO_TARGETPOS_XYZ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetXFieldNumber = 1,
    kTargetYFieldNumber = 2,
    kTargetZFieldNumber = 3,
  };
  // double target_x = 1;
  void clear_target_x();
  double target_x() const;
  void set_target_x(double value);
  private:
  double _internal_target_x() const;
  void _internal_set_target_x(double value);
  public:

  // double target_y = 2;
  void clear_target_y();
  double target_y() const;
  void set_target_y(double value);
  private:
  double _internal_target_y() const;
  void _internal_set_target_y(double value);
  public:

  // double target_z = 3;
  void clear_target_z();
  double target_z() const;
  void set_target_z(double value);
  private:
  double _internal_target_z() const;
  void _internal_set_target_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_XYZ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double target_x_;
  double target_y_;
  double target_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_VISUAL_SERVO_TARGETPOS_ABC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_ABC) */ {
 public:
  inline Pt_VISUAL_SERVO_TARGETPOS_ABC() : Pt_VISUAL_SERVO_TARGETPOS_ABC(nullptr) {}
  virtual ~Pt_VISUAL_SERVO_TARGETPOS_ABC();

  Pt_VISUAL_SERVO_TARGETPOS_ABC(const Pt_VISUAL_SERVO_TARGETPOS_ABC& from);
  Pt_VISUAL_SERVO_TARGETPOS_ABC(Pt_VISUAL_SERVO_TARGETPOS_ABC&& from) noexcept
    : Pt_VISUAL_SERVO_TARGETPOS_ABC() {
    *this = ::std::move(from);
  }

  inline Pt_VISUAL_SERVO_TARGETPOS_ABC& operator=(const Pt_VISUAL_SERVO_TARGETPOS_ABC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_VISUAL_SERVO_TARGETPOS_ABC& operator=(Pt_VISUAL_SERVO_TARGETPOS_ABC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_VISUAL_SERVO_TARGETPOS_ABC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_VISUAL_SERVO_TARGETPOS_ABC* internal_default_instance() {
    return reinterpret_cast<const Pt_VISUAL_SERVO_TARGETPOS_ABC*>(
               &_Pt_VISUAL_SERVO_TARGETPOS_ABC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Pt_VISUAL_SERVO_TARGETPOS_ABC& a, Pt_VISUAL_SERVO_TARGETPOS_ABC& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_VISUAL_SERVO_TARGETPOS_ABC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_VISUAL_SERVO_TARGETPOS_ABC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_VISUAL_SERVO_TARGETPOS_ABC* New() const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_TARGETPOS_ABC>(nullptr);
  }

  Pt_VISUAL_SERVO_TARGETPOS_ABC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_TARGETPOS_ABC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_VISUAL_SERVO_TARGETPOS_ABC& from);
  void MergeFrom(const Pt_VISUAL_SERVO_TARGETPOS_ABC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_VISUAL_SERVO_TARGETPOS_ABC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_ABC";
  }
  protected:
  explicit Pt_VISUAL_SERVO_TARGETPOS_ABC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetAFieldNumber = 1,
    kTargetBFieldNumber = 2,
    kTargetCFieldNumber = 3,
  };
  // double target_a = 1;
  void clear_target_a();
  double target_a() const;
  void set_target_a(double value);
  private:
  double _internal_target_a() const;
  void _internal_set_target_a(double value);
  public:

  // double target_b = 2;
  void clear_target_b();
  double target_b() const;
  void set_target_b(double value);
  private:
  double _internal_target_b() const;
  void _internal_set_target_b(double value);
  public:

  // double target_c = 3;
  void clear_target_c();
  double target_c() const;
  void set_target_c(double value);
  private:
  double _internal_target_c() const;
  void _internal_set_target_c(double value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_ABC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double target_a_;
  double target_b_;
  double target_c_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_VISUAL_SERVO_ERROR_XYZ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_XYZ) */ {
 public:
  inline Pt_VISUAL_SERVO_ERROR_XYZ() : Pt_VISUAL_SERVO_ERROR_XYZ(nullptr) {}
  virtual ~Pt_VISUAL_SERVO_ERROR_XYZ();

  Pt_VISUAL_SERVO_ERROR_XYZ(const Pt_VISUAL_SERVO_ERROR_XYZ& from);
  Pt_VISUAL_SERVO_ERROR_XYZ(Pt_VISUAL_SERVO_ERROR_XYZ&& from) noexcept
    : Pt_VISUAL_SERVO_ERROR_XYZ() {
    *this = ::std::move(from);
  }

  inline Pt_VISUAL_SERVO_ERROR_XYZ& operator=(const Pt_VISUAL_SERVO_ERROR_XYZ& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_VISUAL_SERVO_ERROR_XYZ& operator=(Pt_VISUAL_SERVO_ERROR_XYZ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_VISUAL_SERVO_ERROR_XYZ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_VISUAL_SERVO_ERROR_XYZ* internal_default_instance() {
    return reinterpret_cast<const Pt_VISUAL_SERVO_ERROR_XYZ*>(
               &_Pt_VISUAL_SERVO_ERROR_XYZ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Pt_VISUAL_SERVO_ERROR_XYZ& a, Pt_VISUAL_SERVO_ERROR_XYZ& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_VISUAL_SERVO_ERROR_XYZ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_VISUAL_SERVO_ERROR_XYZ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_VISUAL_SERVO_ERROR_XYZ* New() const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_ERROR_XYZ>(nullptr);
  }

  Pt_VISUAL_SERVO_ERROR_XYZ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_ERROR_XYZ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_VISUAL_SERVO_ERROR_XYZ& from);
  void MergeFrom(const Pt_VISUAL_SERVO_ERROR_XYZ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_VISUAL_SERVO_ERROR_XYZ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_XYZ";
  }
  protected:
  explicit Pt_VISUAL_SERVO_ERROR_XYZ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorXyzFieldNumber = 1,
  };
  // double error_xyz = 1;
  void clear_error_xyz();
  double error_xyz() const;
  void set_error_xyz(double value);
  private:
  double _internal_error_xyz() const;
  void _internal_set_error_xyz(double value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_XYZ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double error_xyz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_VISUAL_SERVO_ERROR_ABC PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_ABC) */ {
 public:
  inline Pt_VISUAL_SERVO_ERROR_ABC() : Pt_VISUAL_SERVO_ERROR_ABC(nullptr) {}
  virtual ~Pt_VISUAL_SERVO_ERROR_ABC();

  Pt_VISUAL_SERVO_ERROR_ABC(const Pt_VISUAL_SERVO_ERROR_ABC& from);
  Pt_VISUAL_SERVO_ERROR_ABC(Pt_VISUAL_SERVO_ERROR_ABC&& from) noexcept
    : Pt_VISUAL_SERVO_ERROR_ABC() {
    *this = ::std::move(from);
  }

  inline Pt_VISUAL_SERVO_ERROR_ABC& operator=(const Pt_VISUAL_SERVO_ERROR_ABC& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_VISUAL_SERVO_ERROR_ABC& operator=(Pt_VISUAL_SERVO_ERROR_ABC&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_VISUAL_SERVO_ERROR_ABC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_VISUAL_SERVO_ERROR_ABC* internal_default_instance() {
    return reinterpret_cast<const Pt_VISUAL_SERVO_ERROR_ABC*>(
               &_Pt_VISUAL_SERVO_ERROR_ABC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Pt_VISUAL_SERVO_ERROR_ABC& a, Pt_VISUAL_SERVO_ERROR_ABC& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_VISUAL_SERVO_ERROR_ABC* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_VISUAL_SERVO_ERROR_ABC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_VISUAL_SERVO_ERROR_ABC* New() const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_ERROR_ABC>(nullptr);
  }

  Pt_VISUAL_SERVO_ERROR_ABC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_ERROR_ABC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_VISUAL_SERVO_ERROR_ABC& from);
  void MergeFrom(const Pt_VISUAL_SERVO_ERROR_ABC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_VISUAL_SERVO_ERROR_ABC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_ABC";
  }
  protected:
  explicit Pt_VISUAL_SERVO_ERROR_ABC(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorAbcFieldNumber = 1,
  };
  // double error_abc = 1;
  void clear_error_abc();
  double error_abc() const;
  void set_error_abc(double value);
  private:
  double _internal_error_abc() const;
  void _internal_set_error_abc(double value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_ABC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double error_abc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_VISUAL_SERVO_ERROR_IMAGE PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_IMAGE) */ {
 public:
  inline Pt_VISUAL_SERVO_ERROR_IMAGE() : Pt_VISUAL_SERVO_ERROR_IMAGE(nullptr) {}
  virtual ~Pt_VISUAL_SERVO_ERROR_IMAGE();

  Pt_VISUAL_SERVO_ERROR_IMAGE(const Pt_VISUAL_SERVO_ERROR_IMAGE& from);
  Pt_VISUAL_SERVO_ERROR_IMAGE(Pt_VISUAL_SERVO_ERROR_IMAGE&& from) noexcept
    : Pt_VISUAL_SERVO_ERROR_IMAGE() {
    *this = ::std::move(from);
  }

  inline Pt_VISUAL_SERVO_ERROR_IMAGE& operator=(const Pt_VISUAL_SERVO_ERROR_IMAGE& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_VISUAL_SERVO_ERROR_IMAGE& operator=(Pt_VISUAL_SERVO_ERROR_IMAGE&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_VISUAL_SERVO_ERROR_IMAGE& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_VISUAL_SERVO_ERROR_IMAGE* internal_default_instance() {
    return reinterpret_cast<const Pt_VISUAL_SERVO_ERROR_IMAGE*>(
               &_Pt_VISUAL_SERVO_ERROR_IMAGE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Pt_VISUAL_SERVO_ERROR_IMAGE& a, Pt_VISUAL_SERVO_ERROR_IMAGE& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_VISUAL_SERVO_ERROR_IMAGE* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_VISUAL_SERVO_ERROR_IMAGE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_VISUAL_SERVO_ERROR_IMAGE* New() const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_ERROR_IMAGE>(nullptr);
  }

  Pt_VISUAL_SERVO_ERROR_IMAGE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_ERROR_IMAGE>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_VISUAL_SERVO_ERROR_IMAGE& from);
  void MergeFrom(const Pt_VISUAL_SERVO_ERROR_IMAGE& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_VISUAL_SERVO_ERROR_IMAGE* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_IMAGE";
  }
  protected:
  explicit Pt_VISUAL_SERVO_ERROR_IMAGE(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorImageFieldNumber = 1,
  };
  // double error_image = 1;
  void clear_error_image();
  double error_image() const;
  void set_error_image(double value);
  private:
  double _internal_error_image() const;
  void _internal_set_error_image(double value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_IMAGE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double error_image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_VISUAL_SERVO_ENDSERVO PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_VISUAL_SERVO_ENDSERVO) */ {
 public:
  inline Pt_VISUAL_SERVO_ENDSERVO() : Pt_VISUAL_SERVO_ENDSERVO(nullptr) {}
  virtual ~Pt_VISUAL_SERVO_ENDSERVO();

  Pt_VISUAL_SERVO_ENDSERVO(const Pt_VISUAL_SERVO_ENDSERVO& from);
  Pt_VISUAL_SERVO_ENDSERVO(Pt_VISUAL_SERVO_ENDSERVO&& from) noexcept
    : Pt_VISUAL_SERVO_ENDSERVO() {
    *this = ::std::move(from);
  }

  inline Pt_VISUAL_SERVO_ENDSERVO& operator=(const Pt_VISUAL_SERVO_ENDSERVO& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_VISUAL_SERVO_ENDSERVO& operator=(Pt_VISUAL_SERVO_ENDSERVO&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_VISUAL_SERVO_ENDSERVO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_VISUAL_SERVO_ENDSERVO* internal_default_instance() {
    return reinterpret_cast<const Pt_VISUAL_SERVO_ENDSERVO*>(
               &_Pt_VISUAL_SERVO_ENDSERVO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Pt_VISUAL_SERVO_ENDSERVO& a, Pt_VISUAL_SERVO_ENDSERVO& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_VISUAL_SERVO_ENDSERVO* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_VISUAL_SERVO_ENDSERVO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_VISUAL_SERVO_ENDSERVO* New() const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_ENDSERVO>(nullptr);
  }

  Pt_VISUAL_SERVO_ENDSERVO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_VISUAL_SERVO_ENDSERVO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_VISUAL_SERVO_ENDSERVO& from);
  void MergeFrom(const Pt_VISUAL_SERVO_ENDSERVO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_VISUAL_SERVO_ENDSERVO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_VISUAL_SERVO_ENDSERVO";
  }
  protected:
  explicit Pt_VISUAL_SERVO_ENDSERVO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndservoFieldNumber = 1,
  };
  // int32 endservo = 1;
  void clear_endservo();
  ::PROTOBUF_NAMESPACE_ID::int32 endservo() const;
  void set_endservo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_endservo() const;
  void _internal_set_endservo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_VISUAL_SERVO_ENDSERVO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 endservo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_AXISPOS_SCARA PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_AXISPOS_SCARA) */ {
 public:
  inline Pt_AXISPOS_SCARA() : Pt_AXISPOS_SCARA(nullptr) {}
  virtual ~Pt_AXISPOS_SCARA();

  Pt_AXISPOS_SCARA(const Pt_AXISPOS_SCARA& from);
  Pt_AXISPOS_SCARA(Pt_AXISPOS_SCARA&& from) noexcept
    : Pt_AXISPOS_SCARA() {
    *this = ::std::move(from);
  }

  inline Pt_AXISPOS_SCARA& operator=(const Pt_AXISPOS_SCARA& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_AXISPOS_SCARA& operator=(Pt_AXISPOS_SCARA&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_AXISPOS_SCARA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_AXISPOS_SCARA* internal_default_instance() {
    return reinterpret_cast<const Pt_AXISPOS_SCARA*>(
               &_Pt_AXISPOS_SCARA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Pt_AXISPOS_SCARA& a, Pt_AXISPOS_SCARA& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_AXISPOS_SCARA* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_AXISPOS_SCARA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_AXISPOS_SCARA* New() const final {
    return CreateMaybeMessage<Pt_AXISPOS_SCARA>(nullptr);
  }

  Pt_AXISPOS_SCARA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_AXISPOS_SCARA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_AXISPOS_SCARA& from);
  void MergeFrom(const Pt_AXISPOS_SCARA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_AXISPOS_SCARA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_AXISPOS_SCARA";
  }
  protected:
  explicit Pt_AXISPOS_SCARA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kA1FieldNumber = 1,
    kA2FieldNumber = 2,
    kDFieldNumber = 3,
    kA4FieldNumber = 4,
  };
  // double a1 = 1;
  void clear_a1();
  double a1() const;
  void set_a1(double value);
  private:
  double _internal_a1() const;
  void _internal_set_a1(double value);
  public:

  // double a2 = 2;
  void clear_a2();
  double a2() const;
  void set_a2(double value);
  private:
  double _internal_a2() const;
  void _internal_set_a2(double value);
  public:

  // double d = 3;
  void clear_d();
  double d() const;
  void set_d(double value);
  private:
  double _internal_d() const;
  void _internal_set_d(double value);
  public:

  // double a4 = 4;
  void clear_a4();
  double a4() const;
  void set_a4(double value);
  private:
  double _internal_a4() const;
  void _internal_set_a4(double value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_AXISPOS_SCARA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double a1_;
  double a2_;
  double d_;
  double a4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pt_DataVoid

// int32 null = 1;
inline void Pt_DataVoid::clear_null() {
  null_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_DataVoid::_internal_null() const {
  return null_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_DataVoid::null() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_DataVoid.null)
  return _internal_null();
}
inline void Pt_DataVoid::_internal_set_null(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  null_ = value;
}
inline void Pt_DataVoid::set_null(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_null(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_DataVoid.null)
}

// -------------------------------------------------------------------

// Pt_DataResult

// int32 result = 1;
inline void Pt_DataResult::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_DataResult::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_DataResult::result() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_DataResult.result)
  return _internal_result();
}
inline void Pt_DataResult::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void Pt_DataResult::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_DataResult.result)
}

// -------------------------------------------------------------------

// Pt_EnableState

// int32 enablestate = 1;
inline void Pt_EnableState::clear_enablestate() {
  enablestate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_EnableState::_internal_enablestate() const {
  return enablestate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_EnableState::enablestate() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_EnableState.enablestate)
  return _internal_enablestate();
}
inline void Pt_EnableState::_internal_set_enablestate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enablestate_ = value;
}
inline void Pt_EnableState::set_enablestate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enablestate(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_EnableState.enablestate)
}

// -------------------------------------------------------------------

// Pt_StartServo

// int32 startservo = 1;
inline void Pt_StartServo::clear_startservo() {
  startservo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_StartServo::_internal_startservo() const {
  return startservo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_StartServo::startservo() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_StartServo.startservo)
  return _internal_startservo();
}
inline void Pt_StartServo::_internal_set_startservo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  startservo_ = value;
}
inline void Pt_StartServo::set_startservo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_startservo(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_StartServo.startservo)
}

// -------------------------------------------------------------------

// Pt_VISUAL_SERVO_SERVOTYPE

// int32 servotype = 1;
inline void Pt_VISUAL_SERVO_SERVOTYPE::clear_servotype() {
  servotype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_VISUAL_SERVO_SERVOTYPE::_internal_servotype() const {
  return servotype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_VISUAL_SERVO_SERVOTYPE::servotype() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_VISUAL_SERVO_SERVOTYPE.servotype)
  return _internal_servotype();
}
inline void Pt_VISUAL_SERVO_SERVOTYPE::_internal_set_servotype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  servotype_ = value;
}
inline void Pt_VISUAL_SERVO_SERVOTYPE::set_servotype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_servotype(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_VISUAL_SERVO_SERVOTYPE.servotype)
}

// -------------------------------------------------------------------

// Pt_VISUAL_SERVO_TARGETPOS_XYZ

// double target_x = 1;
inline void Pt_VISUAL_SERVO_TARGETPOS_XYZ::clear_target_x() {
  target_x_ = 0;
}
inline double Pt_VISUAL_SERVO_TARGETPOS_XYZ::_internal_target_x() const {
  return target_x_;
}
inline double Pt_VISUAL_SERVO_TARGETPOS_XYZ::target_x() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_XYZ.target_x)
  return _internal_target_x();
}
inline void Pt_VISUAL_SERVO_TARGETPOS_XYZ::_internal_set_target_x(double value) {
  
  target_x_ = value;
}
inline void Pt_VISUAL_SERVO_TARGETPOS_XYZ::set_target_x(double value) {
  _internal_set_target_x(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_XYZ.target_x)
}

// double target_y = 2;
inline void Pt_VISUAL_SERVO_TARGETPOS_XYZ::clear_target_y() {
  target_y_ = 0;
}
inline double Pt_VISUAL_SERVO_TARGETPOS_XYZ::_internal_target_y() const {
  return target_y_;
}
inline double Pt_VISUAL_SERVO_TARGETPOS_XYZ::target_y() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_XYZ.target_y)
  return _internal_target_y();
}
inline void Pt_VISUAL_SERVO_TARGETPOS_XYZ::_internal_set_target_y(double value) {
  
  target_y_ = value;
}
inline void Pt_VISUAL_SERVO_TARGETPOS_XYZ::set_target_y(double value) {
  _internal_set_target_y(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_XYZ.target_y)
}

// double target_z = 3;
inline void Pt_VISUAL_SERVO_TARGETPOS_XYZ::clear_target_z() {
  target_z_ = 0;
}
inline double Pt_VISUAL_SERVO_TARGETPOS_XYZ::_internal_target_z() const {
  return target_z_;
}
inline double Pt_VISUAL_SERVO_TARGETPOS_XYZ::target_z() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_XYZ.target_z)
  return _internal_target_z();
}
inline void Pt_VISUAL_SERVO_TARGETPOS_XYZ::_internal_set_target_z(double value) {
  
  target_z_ = value;
}
inline void Pt_VISUAL_SERVO_TARGETPOS_XYZ::set_target_z(double value) {
  _internal_set_target_z(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_XYZ.target_z)
}

// -------------------------------------------------------------------

// Pt_VISUAL_SERVO_TARGETPOS_ABC

// double target_a = 1;
inline void Pt_VISUAL_SERVO_TARGETPOS_ABC::clear_target_a() {
  target_a_ = 0;
}
inline double Pt_VISUAL_SERVO_TARGETPOS_ABC::_internal_target_a() const {
  return target_a_;
}
inline double Pt_VISUAL_SERVO_TARGETPOS_ABC::target_a() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_ABC.target_a)
  return _internal_target_a();
}
inline void Pt_VISUAL_SERVO_TARGETPOS_ABC::_internal_set_target_a(double value) {
  
  target_a_ = value;
}
inline void Pt_VISUAL_SERVO_TARGETPOS_ABC::set_target_a(double value) {
  _internal_set_target_a(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_ABC.target_a)
}

// double target_b = 2;
inline void Pt_VISUAL_SERVO_TARGETPOS_ABC::clear_target_b() {
  target_b_ = 0;
}
inline double Pt_VISUAL_SERVO_TARGETPOS_ABC::_internal_target_b() const {
  return target_b_;
}
inline double Pt_VISUAL_SERVO_TARGETPOS_ABC::target_b() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_ABC.target_b)
  return _internal_target_b();
}
inline void Pt_VISUAL_SERVO_TARGETPOS_ABC::_internal_set_target_b(double value) {
  
  target_b_ = value;
}
inline void Pt_VISUAL_SERVO_TARGETPOS_ABC::set_target_b(double value) {
  _internal_set_target_b(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_ABC.target_b)
}

// double target_c = 3;
inline void Pt_VISUAL_SERVO_TARGETPOS_ABC::clear_target_c() {
  target_c_ = 0;
}
inline double Pt_VISUAL_SERVO_TARGETPOS_ABC::_internal_target_c() const {
  return target_c_;
}
inline double Pt_VISUAL_SERVO_TARGETPOS_ABC::target_c() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_ABC.target_c)
  return _internal_target_c();
}
inline void Pt_VISUAL_SERVO_TARGETPOS_ABC::_internal_set_target_c(double value) {
  
  target_c_ = value;
}
inline void Pt_VISUAL_SERVO_TARGETPOS_ABC::set_target_c(double value) {
  _internal_set_target_c(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_VISUAL_SERVO_TARGETPOS_ABC.target_c)
}

// -------------------------------------------------------------------

// Pt_VISUAL_SERVO_ERROR_XYZ

// double error_xyz = 1;
inline void Pt_VISUAL_SERVO_ERROR_XYZ::clear_error_xyz() {
  error_xyz_ = 0;
}
inline double Pt_VISUAL_SERVO_ERROR_XYZ::_internal_error_xyz() const {
  return error_xyz_;
}
inline double Pt_VISUAL_SERVO_ERROR_XYZ::error_xyz() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_XYZ.error_xyz)
  return _internal_error_xyz();
}
inline void Pt_VISUAL_SERVO_ERROR_XYZ::_internal_set_error_xyz(double value) {
  
  error_xyz_ = value;
}
inline void Pt_VISUAL_SERVO_ERROR_XYZ::set_error_xyz(double value) {
  _internal_set_error_xyz(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_XYZ.error_xyz)
}

// -------------------------------------------------------------------

// Pt_VISUAL_SERVO_ERROR_ABC

// double error_abc = 1;
inline void Pt_VISUAL_SERVO_ERROR_ABC::clear_error_abc() {
  error_abc_ = 0;
}
inline double Pt_VISUAL_SERVO_ERROR_ABC::_internal_error_abc() const {
  return error_abc_;
}
inline double Pt_VISUAL_SERVO_ERROR_ABC::error_abc() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_ABC.error_abc)
  return _internal_error_abc();
}
inline void Pt_VISUAL_SERVO_ERROR_ABC::_internal_set_error_abc(double value) {
  
  error_abc_ = value;
}
inline void Pt_VISUAL_SERVO_ERROR_ABC::set_error_abc(double value) {
  _internal_set_error_abc(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_ABC.error_abc)
}

// -------------------------------------------------------------------

// Pt_VISUAL_SERVO_ERROR_IMAGE

// double error_image = 1;
inline void Pt_VISUAL_SERVO_ERROR_IMAGE::clear_error_image() {
  error_image_ = 0;
}
inline double Pt_VISUAL_SERVO_ERROR_IMAGE::_internal_error_image() const {
  return error_image_;
}
inline double Pt_VISUAL_SERVO_ERROR_IMAGE::error_image() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_IMAGE.error_image)
  return _internal_error_image();
}
inline void Pt_VISUAL_SERVO_ERROR_IMAGE::_internal_set_error_image(double value) {
  
  error_image_ = value;
}
inline void Pt_VISUAL_SERVO_ERROR_IMAGE::set_error_image(double value) {
  _internal_set_error_image(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_VISUAL_SERVO_ERROR_IMAGE.error_image)
}

// -------------------------------------------------------------------

// Pt_VISUAL_SERVO_ENDSERVO

// int32 endservo = 1;
inline void Pt_VISUAL_SERVO_ENDSERVO::clear_endservo() {
  endservo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_VISUAL_SERVO_ENDSERVO::_internal_endservo() const {
  return endservo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_VISUAL_SERVO_ENDSERVO::endservo() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_VISUAL_SERVO_ENDSERVO.endservo)
  return _internal_endservo();
}
inline void Pt_VISUAL_SERVO_ENDSERVO::_internal_set_endservo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  endservo_ = value;
}
inline void Pt_VISUAL_SERVO_ENDSERVO::set_endservo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_endservo(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_VISUAL_SERVO_ENDSERVO.endservo)
}

// -------------------------------------------------------------------

// Pt_AXISPOS_SCARA

// double a1 = 1;
inline void Pt_AXISPOS_SCARA::clear_a1() {
  a1_ = 0;
}
inline double Pt_AXISPOS_SCARA::_internal_a1() const {
  return a1_;
}
inline double Pt_AXISPOS_SCARA::a1() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_AXISPOS_SCARA.a1)
  return _internal_a1();
}
inline void Pt_AXISPOS_SCARA::_internal_set_a1(double value) {
  
  a1_ = value;
}
inline void Pt_AXISPOS_SCARA::set_a1(double value) {
  _internal_set_a1(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_AXISPOS_SCARA.a1)
}

// double a2 = 2;
inline void Pt_AXISPOS_SCARA::clear_a2() {
  a2_ = 0;
}
inline double Pt_AXISPOS_SCARA::_internal_a2() const {
  return a2_;
}
inline double Pt_AXISPOS_SCARA::a2() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_AXISPOS_SCARA.a2)
  return _internal_a2();
}
inline void Pt_AXISPOS_SCARA::_internal_set_a2(double value) {
  
  a2_ = value;
}
inline void Pt_AXISPOS_SCARA::set_a2(double value) {
  _internal_set_a2(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_AXISPOS_SCARA.a2)
}

// double d = 3;
inline void Pt_AXISPOS_SCARA::clear_d() {
  d_ = 0;
}
inline double Pt_AXISPOS_SCARA::_internal_d() const {
  return d_;
}
inline double Pt_AXISPOS_SCARA::d() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_AXISPOS_SCARA.d)
  return _internal_d();
}
inline void Pt_AXISPOS_SCARA::_internal_set_d(double value) {
  
  d_ = value;
}
inline void Pt_AXISPOS_SCARA::set_d(double value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_AXISPOS_SCARA.d)
}

// double a4 = 4;
inline void Pt_AXISPOS_SCARA::clear_a4() {
  a4_ = 0;
}
inline double Pt_AXISPOS_SCARA::_internal_a4() const {
  return a4_;
}
inline double Pt_AXISPOS_SCARA::a4() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_AXISPOS_SCARA.a4)
  return _internal_a4();
}
inline void Pt_AXISPOS_SCARA::_internal_set_a4(double value) {
  
  a4_ = value;
}
inline void Pt_AXISPOS_SCARA::set_a4(double value) {
  _internal_set_a4(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_AXISPOS_SCARA.a4)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ExternalDataTransfer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DemConDataTransfer_2eproto
