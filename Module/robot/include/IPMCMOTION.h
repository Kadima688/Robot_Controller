
#ifndef IPMCMotion_H
#define IPMCMotion_H

						//---------------------------------------------------------------------
						//
						//                          Card Operation  一般操作
						//
						//---------------------------------------------------------------------
extern "C" {  
/****************************************************************************
  功能：打开设备，在实现运功的控制器功能前为卡分配资源
  返回值： 0-执行函数成功 100-主站已经打开 10000-执行函数失败
****************************************************************************/
int  IPMCOpenDevice();

/****************************************************************************
功能：打开运动内核
返回值： 0-执行函数成功 101-内核已打开 10000-执行函数失败
****************************************************************************/
int  IPMCOpenMCKernel();

/****************************************************************************
功能：关闭设备，释放系统资源
返回值： 0-执行函数成功 10000-执行函数失败
*****************************************************************************/
int  IPMCCloseDevice(); 

/*****************************************************************************
功能：初始化设备，本初始化为运动控制器默认的初始化（打开设备后，请初始化设备）
参数：NULL
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
*****************************************************************************/
int  IPMCInitDevice();

/*****************************************************************************
功能：获取运动器的运动状态
参数：
	state 0：启动失败 1：启动中  2：正常启动 3：网卡初始化失败 4：进入OP超时 5：退出运动器,6：网卡发送超时 7:网卡接收超时 8:网卡连接断开 9：已连接，但未初始化
返回值：
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
*****************************************************************************/
int  IPMCGetDeviceRunState(unsigned int *state);

/******************************************************************************
功能：紧急停止所有轴,并把FIFO缓冲区的未执行的命令都同时清空
参数：
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
******************************************************************************/
int  IPMCEmergeStop();

/****************************************************************************
功能：停止所有轴
参数：mode  0-立即停止 1-减速停止 
      
返回值： 
	  0：函数执行成功
	  997：共享内存尚未创建
	  10000：函数执行失败
	  10003：指令缓冲区已满
	  32012：参数设置超出范围
*****************************************************************************/
int  IPMCStopAllAxis( unsigned int mode);

/*****************************************************************************
功能：单轴停止
参数：nAxis 要设置的轴号      
      mode    0立即停止 1-减速停止

返回值： 
	  0：函数执行成功
	  997：共享内存尚未创建
	  10000：函数执行失败
	  10003：指令缓冲区已满
	  32012：参数设置超出范围
******************************************************************************/
int  IPMCStopAxis( unsigned int nAxis, unsigned int mode);


				//---------------------------------------------------------------------------------------------
				//
				//                        运动全局参数设置
				//                          
				//----------------------------------------------------------------------------------------------*/
/***********************************************************************************************
功能：设定轴当前逻辑位置 可用于逻辑位置清零
参数：
      nAxis  设置的轴号
      Position   设置轴的位置值

返回值： 
	  0：函数执行成功
	  997：共享内存尚未创建
	  10000：函数执行失败
	  10003：指令缓冲区已满
	  32012：参数设置超出范围***********************************************************************************************/
int  IPMCSetAxisPosition( unsigned int nAxis, int Position);


/******************************************************************************
功能：设置轴的位移模式
参数：
      nAxis          设置的轴号
      PositionMode   0 : 相对位移定长运动 1 : 绝对位移定长运动

返回值： 
	  0：函数执行成功
	  997：共享内存尚未创建
	  10000：函数执行失败
	  10003：指令缓冲区已满
	  32012：参数设置超出范围
******************************************************************************/
int  IPMCSetAxisPositionMode( unsigned int nAxis, unsigned int PositionMode);


				//------------------------------------------------------------------------------
				//
				//软件限位相关参数设置
				//
				//------------------------------------------------------------------------------
/*****************************************************************************
功能：使能软件限位
参数：
      nAxis  设置的轴号
	  Enable 0-软件限位禁止 1-软件限位使能

返回值： 
	  0：函数执行成功
	  997：共享内存尚未创建
	  10000：函数执行失败
	  10003：指令缓冲区已满
	  32012：参数设置超出范围
*****************************************************************************/
int  IPMCEnableSoftlimit( unsigned int nAxis, unsigned int Enable);


/*****************************************************************************
功能：设置软件限位
参数：
      nAxis  设置的轴号
	  StopType 0-立即停止 1-减速停止（该参数暂时无用）
	  Limp   正软限位
	  Limn	 负软限位

返回值： 
	  0：函数执行成功
	  997：共享内存尚未创建
	  10000：函数执行失败
	  10003：指令缓冲区已满
	  32012：参数设置超出范围
*****************************************************************************/
int  IPMCSetAxisSoftLimit(unsigned int nAxis, unsigned int StopType, int Limp, int  Limn);


/*****************************************************************************
功能：读取指定CoE从站的软件限位状态
参数：CoE_Num：	 从站号		取值范围：[0,MAX_AXES)
		*state	 软限位状态，0：未处于限位；1：软件负限位；2：软件正限位
返回值： 
	  0：函数执行成功
	  997：共享内存尚未创建
	  10000：函数执行失败
	  10003：指令缓冲区已满
	  32012：参数设置超出范围
*****************************************************************************/
int  IPMCGetSoftLimitState(unsigned int CoE_Num, unsigned int *state);

				//------------------------------------------------------------------------------
				//
				//运动参数
				//
				//------------------------------------------------------------------------------
/*****************************************************************************
功能：轴脉冲方向的设置
参数：	nAxis 设定轴号	取值范围：[0, MAXAXES]
		dir   运动方向   1  为运动方向与指令方向相同（默认值）
		-1 为运动方向与指令方向相反
返回值：
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
*****************************************************************************/
int  IPMCSetAxisDirection(unsigned int nAxis, int dir);

/****************************************************************************
功能：设置单轴连续运动速度
参数：
		nAxis    设置的轴号
		TargetVel 目标速度
		LowVel    最低速度
		Acc       加速度
		Jerk     加加速度
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
*****************************************************************************/
int  IPMCSetAxisJogParam( unsigned int nAxis, double TargetVel, double LowVel, double Acc, double Jerk) ;

/****************************************************************************
功能：设置轴的默认速度
参数：
		nAxis    设置的轴号
		StartV   起始速度
		TargetV  目标速度
		EndV     结束速度

返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
******************************************************************************/
int  IPMCSetAxisVel( unsigned int nAxis, double StartV, double TargetV, double EndV);

/*****************************************************************************
功能：设置轴加减速度
参数：
		nAxis    设置的轴号
		Acc       加速度
		Dec       减速度

返回值：
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
*******************************************************************************/
int  IPMCSetAxisAcc(unsigned int nAxis, double Acc, double Dec);

/*****************************************************************************
功能：设置轴加加速度
参数：
		nAxis    设置的轴号
		AccJerk  加加速度设置
		DecJerk   减加速度

返回值：
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
*******************************************************************************/
int  IPMCSetAxisJerk(unsigned int nAxis, double AccJerk, double DecJerk);

/*********************************************************************************
功能：设置插补运动的速度
参数：  
		StartV    设置的起始速度
		TargetV   设置的目标速度
		EndV      设置的结束速度

返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
**********************************************************************************/
int  IPMCSetInterpolationVel( double StartV, double TargetV, double EndV);

/********************************************************************************
功能：设置插补速度曲线加速度
参数：  
        InterpAcc 插补加速度
		InterpDec 插补减速度

返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************/
int  IPMCSetInterpolationAcc(double InterpAcc, double InterpDec);

/*******************************************************************************
功能：设置插补速度曲线加加速度和减加速度
参数：  
		AccJerk   插补加加速度
		DecJerk  插补减加速度

返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************/
int  IPMCSetInterpolationJerk(  double AccJerk, double DecJerk );




				//------------------------------------------------------------------------------
				//
				//				跟随、轴组、手轮功能
				//
				//------------------------------------------------------------------------------
/******************************************************************************
功能：使能跟随运动
参数：
		nAxis1	  主动轴A		取值范围：[0, MAX_AXES]
		nAxis2	  从动轴B		取值范围：[0, MAX_AXES]
		Follow_Ratio 跟随倍率
返回值：	0-函数执行成功
		10000-动态链接库与驱动程序通信失败
		32000-设备未打开
		32012-给定参数超出范围
******************************************************************************/
int  IPMCEnableFollow(unsigned int nAxis1, unsigned int nAxis2, double Follow_Ratio);



/******************************************************************************
功能：关闭跟随运动
参数：
		nAxis1	  主动轴A		  取值范围：[0, MAX_AXES]
返回值：	0-函数执行成功
		10000-动态链接库与驱动程序通信失败
		32000-设备未打开
		32012-给定参数超出范围
******************************************************************************/
int  IPMCDisableFollow(unsigned int nAxis1);

/********************************************************************************************
功能：使能多轴同步功能
参数：GroupId		表示轴组ID号		取值范围：[0, MAX_SYNC_GROUP_NUM)	 
返回值： 0-函数执行成功
		10000-动态链接库与驱动程序通信失败
		32000-设备未打开
		32012-给定参数超出范围
********************************************************************************************/
int  IPMCEnableSyncGroup(unsigned int GroupId);

/********************************************************************************************
功能：多轴同步功能
参数：	GroupId		表示轴组ID号		取值范围：[0, MAX_SYNC_GROUP_NUM)
		MasterAxis	主轴号				取值范围：[0,MAX_AXES)
		SlaveAxisCount		同步的丛轴数目		取值范围：[1,MAX_SYNC_SLAVEAXIS_NUM]
		*SlaveAxisList		轴号列表			SlaveAxisList[0],SlaveAxisList[1]...SlaveAxisList[MAX_SYNC_SLAVEAXIS_NUM-1]
返回值： 0-函数执行成功
		10000-动态链接库与驱动程序通信失败
		32000-设备未打开
		32012-给定参数超出范围
********************************************************************************************/
int  IPMCSetSyncGroup(unsigned int GroupId, unsigned int MasterAxis, unsigned int SlaveAxisCount, unsigned int *SlaveAxisList);

/********************************************************************************************
功能：关闭多轴同步功能
参数：GroupId		表示轴组ID号		取值范围：[0, MAX_SYNC_GROUP_NUM)
返回值：   0-函数执行成功
	       10000-动态链接库与驱动程序通信失败
	       32000-设备未打开
	       32012-给定参数超出范围
********************************************************************************************/
int  IPMCDisableSyncGroup(unsigned int GroupId);


/********************************************************************************************
功能：启用手轮功能
参数：
		num			box号				取值范围：[0,3]
		SlaveAxisCount		表示跟随轴数量		取值范围：[1, MAX_HANDWHEEL_SLAVE_NUM]
		*SlaveAxisList		表示丛轴的轴号链表
		*RateList			表示各个丛轴的跟随倍率
返回值： 0-函数执行成功
		10000-动态链接库与驱动程序通信失败
		32000-设备未打开
		32012-给定参数超出范围
********************************************************************************************/
int  IPMCEnableHandWheel(unsigned int num,unsigned int SlaveAxisCount,unsigned int *SlaveAxisList,double *RateList);


/********************************************************************************************
功能：启用手轮功能
参数：	num			box号				取值范围：[0,3]
		Rate			表示手轮倍率档位
返回值： 0-函数执行成功
		10000-动态链接库与驱动程序通信失败
		32000-设备未打开
		32012-给定参数超出范围
********************************************************************************************/
int  IPMCSetHandWheelRate(unsigned int num, int Rate);


/********************************************************************************************
功能：禁用手轮功能
返回值：    0-函数执行成功
	       10000-动态链接库与驱动程序通信失败
	       32000-设备未打开
	       32012-给定参数超出范围
********************************************************************************************/
int  IPMCDisableHandWheel();

/********************************************************************************************
功能：设置滤波器参数
参数：
		num         轴滤波器编号         取值范围：[0,31]
		enable		是否使能滤波         取值范围：[0,1]
		time		滤波时间，单位为ms   取值范围：[1, 100000]
返回值：	0-函数执行成功
		10000-动态链接库与驱动程序通信失败
		32000-设备未打开
		32012-给定参数超出范围
********************************************************************************************/
int  IPMCSetAxisFilter(unsigned int num, unsigned int enable, unsigned int time);


				//------------------------------------------------------------------------------
				//
				//				运动功能
				//
				//------------------------------------------------------------------------------


/*****************************************************************************
功能：单轴按照IPMCSetAxisJogParam设置速度连续运动
参数：
		nAxis    设置的轴号
		Dir      运动方向 1:正 -1:负

返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
*****************************************************************************/
int  IPMCJog( unsigned int nAxis, int Dir);

/******************************************************************************
功能：单轴定长运动
参数：
		nAxis    设置的轴号
		Position 所要运动距离值为脉冲数，正负号表示运动的方向

返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
******************************************************************************/
int  IPMCPositionDrive( unsigned int nAxis, double Position );

/******************************************************************************
功能：在线改变目标位置
参数：	nAxis		要设置的轴号		取值范围：[0, MAX_AXES]
		Position	所要运动距离值为脉冲数，正负号表示运动的方向
返回值：	0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
******************************************************************************/
int  IPMCChangeTargetPosition(unsigned int nAxis, double Position);


//*****************************************************************************
//功能：在线改变目标速度(此函数为非模态性质，即只能改变一次的速度，不会影响后续段的速度)
//参数：
//		nAxis			要设置的轴号	取值范围：[0,31]
//		Vel				设置的速度
//		isPosTriggerEn	0  ：当前没走完的长度，其速度马上会改变为设定的速度，预设位置触发的方式无效
//						!0 : 预设位置触发的方式有效，当走到触发位置时，其速度马上会改变为设定的速度
//		TriggerPos		当isPosTiggerEn != 0时，此数值为改变目标速度的触发位置(绝对位置)	取值范围：[-MIN_POS, MAX_POS]pulse
//		if(currentPos < TriggerPos)，则向正方向运动时触发；
//		if(currentPos >= TriggerPos)，则向负方向运动时触发；
//返回值：	0：函数执行成功
//		997：共享内存尚未创建
//		10000：函数执行失败
//		10003：指令缓冲区已满
//		32012：参数设置超出范围
//*****************************************************************************
int  IPMCChangeTargetVel(unsigned int nAxis, double Vel, unsigned int isPosTriggerEn, double TriggerPos);




				//------------------------------------------------------------------------------
				//
				//				CoE Slave
				//
				//------------------------------------------------------------------------------
/********************************************************************************************
功能：驱动器使能
参数：
		number 对应驱动器编号，从0开始。 取值范围[0,MAX_AXES)
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************************/
int  IPMCSetAxisOn( unsigned int number);

/********************************************************************************************
功能：驱动器关闭使能
参数：
		number 对应驱动器编号，从0开始。 取值范围[0,MAX_AXES)
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************************/
int  IPMCSetAxisOff( unsigned int number);

/********************************************************************************************
功能：驱动器清除报警
参数：
		number 对应驱动器编号，从0开始。 取值范围[0,MAX_AXES)
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************************/
int  IPMCClearAlarm( unsigned int number);

/********************************************************************************************
功能：获取驱动器从站的数量
参数：
		value  实际驱动器从站的数量
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************************/
int  IPMCGetDriverSlaveNum(unsigned int *value);

/**********************************************************************************************
功能：读取轴的逻辑位置（计算）
参数：
		nAxis  设置的轴号
		*Position  所要获取轴的位置值

返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
***********************************************************************************************/
int  IPMCGetAxisPosition( unsigned int nAxis, int *Position);

/**********************************************************************************************
功能：读取轴的逻辑速度（计算）
参数：
		nAxis  设置的轴号
		*Vel   所要获取轴的位置值

返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
***********************************************************************************************/
int  IPMCGetAxisVel( unsigned int nAxis, int *Vel);

/**********************************************************************************************
功能：读取轴的运动完成情况（计算）
参数：
		nAxis    设置的轴号
		*State   所要获取轴的运动完成情况

返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
***********************************************************************************************/
int  IPMCGetAxisMoveState( unsigned int nAxis, unsigned int *State);


/**********************************************************************************************
功能：读取指定CoE从站(实际)位置
参数：
		CoE_Num  读取的CoE从站号
		*Position  所要获取该从站的位置值
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
***********************************************************************************************/
int  IPMCGetDriverPos(unsigned int CoE_Num, int *Position);

/**********************************************************************************************
功能：读取指定CoE从站(实际)速度
参数：
		CoE_Num  读取的CoE从站号
		*Vel  所要获取该从站的速度值
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
***********************************************************************************************/
int  IPMCGetDriverVel(unsigned int CoE_Num, int *Vel);

/********************************************************************************************
功能：获取指定CoE从站的信息
参数：
	 num   设置的CoE从站号，取值范围[0,MAX_AXES)
     *value为获取的值 0~31位的二进制位数的大小
	 低6位有效，分别代表
		5位  运动完成信号	该位为0代表处于运动中，该位为1代表处于停止状态（运动完成）；
		4位  驱动器报警		该位为0代表未处于报警，该位为1代表处于报警状态；	
		3位  驱动器使能		该位为0代表未处于使能，该位为1代表处于使能状态；
		2位  原点			该位为0代表未处于原点，该位为1代表处于原点状态；	
		1位  硬件正限位		该位为0代表未处于硬件正限位，该位为1代表处于硬件正限位；	
		0位  硬件负限位		该位为0代表未处于硬件负限位，该位为1代表处于硬件负限位；
										
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************************/
int  IPMCGetDriverState(unsigned int CoE_Num, unsigned int *Value);


/********************************************************************************************
功能：设置探针功能参数
参数：	axis			表示轴号		取值范围：[0, MAX_AXES]
		latchen			锁存使能：		0—禁止锁存 1—使能锁存
		mode		    触发模式：		0—单次触发 1—多次触发
		triggersource		触发方式：		0—外部信号触发 1—Z信号触发
返回值：	0-函数执行成功
		10000-动态链接库与驱动程序通信失败
		32000-设备未打开
		32012-给定参数超出范围
********************************************************************************************/
int  IPMCSetDriverTouchProbeMode(unsigned int axis, unsigned int latchen, unsigned int mode, unsigned int triggersource);

/********************************************************************************************
功能：读取探针锁存状态
参数：	axis      表示轴号			取值范围：[0, MAX_AXES]
		*state      锁存状态：			0—未发生锁存 1—已发生锁存
返回值：	0-函数执行成功
		10000-动态链接库与驱动程序通信失败
		32000-设备未打开
		32012-给定参数超出范围
********************************************************************************************/
int  IPMCGetDriverTouchProbeState(unsigned int axis, unsigned int *state);

/********************************************************************************************
功能：读取探针锁存值
参数：	axis		表示轴号				取值范围：[0, MAX_AXES]
		*value		以指针方式读取锁存器值
返回值：	0-函数执行成功
		10000-动态链接库与驱动程序通信失败
		32000-设备未打开
		32012-给定参数超出范围
********************************************************************************************/
int  IPMCGetDriverTouchProbeValue(unsigned int axis, int *value);

/********************************************************************************************
功能：单独使能探针功能
参数：	axis	 表示轴号		取值范围：[0, MAX_AXES]
		latchen	 锁存使能：		0—禁止使能 1—使能锁存
返回值：	0-函数执行成功
		10000-动态链接库与驱动程序通信失败
		32000-设备未打开
		32012-给定参数超出范围
********************************************************************************************/
int  IPMCEnableDriverTouchProbe(unsigned int axis,unsigned int latchen);

/********************************************************************************************
功能：复位探针锁存状态
参数：	axis	 表示轴号		取值范围：[0, MAX_AXES]
返回值：	0-函数执行成功
		10000-动态链接库与驱动程序通信失败
		32000-设备未打开
		32012-给定参数超出范围
********************************************************************************************/
int  IPMCResetDriverTouchProbeState(unsigned int axis);


/***************************************************************/
/*功能：运动内核向主站发送SDO数据
/*参数：
/*      DriverNum			驱动器从站号
/*      CoEIndex			索引值
/*      CoESubIndex			子索引
/*      Data				目标数据
/*返回值：无
/***************************************************************/
int  IPMCSendWriteSdoReq(unsigned int DriverNum, unsigned int CoEIndex, unsigned char CoESubIndex, unsigned int length, int Data);

/***************************************************************/
/*功能：指定轴回零
/*参数：
/*      DriverNum			驱动器从站号
/*		Mode				回零模式：
/*								1:负限位兼做回零开关，寻找Z脉冲信号；
/*返回值：
/*		0：函数执行成功
/*		997：共享内存尚未创建
/*		10000：函数执行失败
/*		10003：指令缓冲区已满
/*		32012：参数设置超出范围
/***************************************************************/
int  IPMCHome(unsigned int DriverNum, char Mode);

/********************************************************************************
功能：设置回零的速度值
参数：	DriverNum   驱动器从站号				取值范围：[0, MAXAXES]
		HighVel		回零高速设置			取值范围：[0, 4294967295]
		LowVel		回零低速设置			取值范围：[0, 4294967295]
		Acc			回零加速度设置
		Offset		回零到原点后继续运动的距离(Offset 相对距离 ，正负均可)
返回值：	0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
*********************************************************************************/
int  IPMCSetHomeParam(unsigned int DriverNum, unsigned int HighVel, unsigned int LowVel, unsigned int Acc, int Offset);

/***************************************************************/
/*功能：清除指定驱动器从站的位置信息
/*参数：
/*      DriverNum			驱动器从站号
/*返回值：无
/***************************************************************/
int  IPMCClearDriverPos(unsigned int DriverNum);

/***************************************************************/
/*功能：表示清除驱动器位置状态。
/*参数：
/*      DriverNum			驱动器从站号
/*      *state     0表示空闲；1表示正在清除；2表示回零失败
/*返回值：无
/***************************************************************/
int  IPMCGetClearPosState(unsigned int DriverNum, unsigned int *state);


					//----------------------------------------------------------------------------
					//
					//  EVB Box Slave
					//
					//----------------------------------------------------------------------------

///******************************************************************************
//   功能：读取EVB_BOX的IO输入状态
//   参数：num          box号      取值范围：[0,3]
//         value 输出的值，对应32位数，0-无效，1-有效。
// 返回值： 0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//******************************************************************************/
int  IPMCGetEvbBoxIOInput(unsigned int num,unsigned int *value);

///******************************************************************************
//   功能：读取EVB_BOX的信息
//   参数：num      box号      取值范围：[0,3]
//         Info		手轮信息，低16位表示手轮编码器位置
//					16~21位对应Box手轮引脚号：16-14号，17-7号，18-15号，19-8号，20-13号，21-12号
// 返回值： 0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//******************************************************************************/
int  IPMCGetEvbBoxHandWheelInfo(unsigned int num,unsigned int *Info);

///******************************************************************************
//   功能：读取EVB_BOX的模拟量输出
//   参数：num          box号      取值范围：[0,3]
//         voltage		模拟量电压，范围0~10V
// 返回值： 0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//******************************************************************************/
int  IPMCGetEvbBoxVoltage(unsigned int num,double *voltage);

///******************************************************************************
//   功能：读取EVB_BOX的IO输出状态
//   参数：num          box号      取值范围：[0,3]
//         value 输出的值，对应32位数，0-无效，1-有效。
// 返回值： 0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//******************************************************************************/
int  IPMCGetEvbBoxIOOutput(unsigned int num,unsigned int *value);

///******************************************************************************
//   功能：读取EVB_BOX的实际数量
//   参数：num    EVB_BOX从站的实际数量
// 返回值： 0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//******************************************************************************/
int  IPMCGetEvbBoxNum(unsigned int *num);

///******************************************************************************
//   功能：设置EVB_BOX的模拟量
//   参数：num          box号      取值范围：[0,3]
//         value 模拟量电压 取值范围：[0,10]V
// 返回值： 0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//******************************************************************************/
int  IPMCSetEvbBoxVoltage(unsigned int num,double value);

///******************************************************************************
//   功能：设置EVB_BOX的IO输出状态
//   参数：num          box号      取值范围：[0,3]
//         value 输出的值，对应32位数，0-无效，1-有效。
// 返回值： 0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//******************************************************************************/
int  IPMCSetEvbBoxIOOutput(unsigned int num,unsigned int value);

///******************************************************************************
//   功能：按位设置EVB_BOX的IO输出状态
//   参数：num          box号      取值范围：[0,3]
//		   index    位索引(即需要设定第几位)
//		   val		 用户设置值，0-无效，1-有效
// 返回值： 0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//******************************************************************************/
int  IPMCSetEvbBoxBitIOOutput(unsigned int num,unsigned int index,unsigned char val);



			//------------------------------------------------------------------------------
			//
			//             
			//             通用I/O函数
			//
			//-----------------------------------------------------------------------------*/
/********************************************************************************************
功能：设置指定IO从站输出的状态
参数：
		num   设置的IO从站号，取值范围[0,MAX_IO_SLAVE_NUMBER)
		value 输出的值，对应32位数，0-无效，1-有效。
返回值：
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************************/
int  IPMCSetGPDO(unsigned int num, unsigned int value);

/********************************************************************************************
功能：设置指定IO从站指定位输出的状态
参数：
		num      设置的IO从站号，取值范围[0,MAX_IO_SLAVE_NUM)
		index    位索引(即需要设定第几位)
		val		 用户设置值，0-无效，1-有效
返回值：
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************************/
int  IPMCSetBitGPDO(unsigned int num, unsigned int index, unsigned char val);

/********************************************************************************************
功能：设置指定IO从站输出的状态
参数：
		num   设置的IO从站号，取值范围[0,MAX_IO_SLAVE_NUM)
		mask 操作位设置，bit0~bit31表示输出位是否操作，0-该位输出无操作，1-该位输出有操作。
		value 输出的值，对应32位数,代表32个通用输出口，0-无效，1-有效。
返回值：	0-函数执行成功  10000-函数执行失败
********************************************************************************************/
int  IPMCSetGPDOMask(unsigned int num, unsigned int mask, unsigned int value);

/********************************************************************************************
功能：获取指定IO从站输出的状态
参数：
		num   设置的IO从站号，取值范围[0,MAX_IO_SLAVE_NUM)
		value 输出的值，对应32位数，32个输出口，0-无效，1-有效。
返回值：
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************************/
int  IPMCGetGPDO(unsigned int num, unsigned int *value);

/********************************************************************************************
功能：获取指定IO从站输入的状态
参数：
		num   IO从站编号   取值范围[0，MAX_IO_SLAVE_NUM)
		*value为获取的值 0~31位的二进制位数的大小
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************************/
int  IPMCGetGPDI( unsigned int num, unsigned int *value);


/********************************************************************************************
功能：获取IO从站的数量
参数：
		value  实际IO从站的数量
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************************/
int  IPMCGetIOSlaveNum(unsigned int *value);

			//------------------------------------------------------------------------------
			//
			//             读取版本信息及卡的ID
			//             
			//
			//-----------------------------------------------------------------------------*/


//-----------获取card版本信息
/********************************************************************************************
功能：获取card中MCKernel版本信息
参数：
		*MCKernelVersion   返回运动内核版本字符串(调用此函数时，至少给此字符串定义32字节的存储空间)
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************************/
int  IPMCGetMCKernelVersion(char *sMCKernelVer);

/********************************************************************************************
功能：获取card中MasterKernel版本信息
参数：
		*MasterKernelVersion   返回主站版本字符串(调用此函数时，至少给此字符串定义32字节的存储空间)
返回值： 
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
********************************************************************************************/
int  IPMCGetMasterKernelVersion( char *sMasterKernelVer);

/********************************************************************************************
功能：把软件、硬件、驱动的版本号转换成字符串
参数：
      *sMCKernelVer  返回运动内核版本字符串(调用此函数时，至少给此字符串定义32字节的存储空间)
      *sMasterKernelVer  返回主站版本字符串(调用此函数时，至少给此字符串定义32字节的存储空间)
返回值： 
	  0：函数执行成功
	  997：共享内存尚未创建
	  10000：函数执行失败
	  10003：指令缓冲区已满
	  32012：参数设置超出范围
********************************************************************************************/
int  IPMCGetAllVersion( char *sMCKernelVer, char *sMasterKernelVer);




/**********************************************************************************************
********    连续轨迹模块移植移植
********	时间2017年8月12日
***********************************************************************************************/

///********************************************************************************************
//函数介绍：打开连续插补缓冲区
//    参数：Crd             坐标系号                取值范围：[0, 1]
//          AxisNum		    插补轴数                取值范围：[2, 6]
//          *AxisList		轴号列表：
//                                 AxisList[0]：X 轴
//                                 AxisList[1]：Y 轴
//                                 AxisList[2]：Z 轴
//                                 AxisList[3]：U 轴
//                                 AxisList[4]：V 轴
//                                 AxisList[5]：W 轴
//          *MaxAcc		    单轴能承受的最大加速度  取值范围：非负数，单位：脉冲/s~2
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//说明：
//1）连续缓冲区最多可缓存5000条指令
//2）当打开连续插补缓冲区后，则进入连续插补模式；此时，除非当执行完缓冲区中的指令或是调用停止连续插补指令
//   IPMCContiStopList后，参与连续插补的运动轴才能退出连续插补模式。
//********************************************************************************************/
int  IPMCContiOpenList(unsigned int Crd, unsigned int AxisNum, unsigned int * AxisList, unsigned int * MaxAcc);


///********************************************************************************************
//函数介绍：打开连续插补缓冲区
//    参数：Crd             坐标系号                取值范围：[0, 1]
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//说明：
//1）连续缓冲区最多可缓存5000条指令
//2）当打开连续插补缓冲区后，则进入连续插补模式；此时，除非当执行完缓冲区中的指令或是调用停止连续插补指令
//   IPMCContiStopList后，参与连续插补的运动轴才能退出连续插补模式。
//********************************************************************************************/
int  IPMCContiCloseList(unsigned int Crd);

///******************************************************************************
//   功能：开始连续插补
//   参数：  Crd          坐标系号        取值范围：[0,1]
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/
int  IPMCContiStartList(unsigned int Crd);



///******************************************************************************
//   功能：暂停连续插补
//   参数： Crd          坐标系号        取值范围：[0,1]
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//说明：当暂停连续插补后，连续插补运动将减速停止，当再次调用IPMCContiStartList 
//      指令时,运动控制卡将继续运行之前未完成的连续插补轨迹
//******************************************************************************/
int  IPMCContiPauseList(unsigned int Crd);

///******************************************************************************
//   功能：停止连续插补运动
//   参数：Crd          坐标系号        取值范围：[0,1]
//         stop_mode    停止模式，      0：减速停止，1：立即停止
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//说明：1）该函数适用于所有插补运动
//      2）当正在执行插补运动时，通过此指令可以中止插补运动，并使参与插补的运动轴退出插补模式
//******************************************************************************/
int  IPMCContiStopList(unsigned int Crd, unsigned int stop_mode);


///******************************************************************************
//   功能：设置连续插补前瞻参数
//   参数：
//         Crd          坐标系号        取值范围：[0,1]
//         enable       前瞻使能状态    0：禁用，1：使能
//  LookaheadSegments   前瞻段数，      取值范围：非负数
//         PathError    允许误差范围，  取值范围：非负数,单位：脉冲
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//注意：小线段前瞻支持圆弧过渡和非圆弧过渡两种方式，设置轨迹误差范围为零时没有圆弧过渡，
//      不为零时默认有圆弧过渡，且普通连续插补没有圆弧过渡功能
//******************************************************************************/
int  IPMCContiSetLookaheadMode(unsigned int Crd, unsigned int enable,
	unsigned int LookaheadSegments, double PathError);



///******************************************************************************
//   功能：设置连续轨迹轮廓误差
//   参数：Crd          坐标系号        取值范围：[0,1]
//         PathErr      误差			取值范围：大于等于0
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/
int  IPMCContiSetRunErr(unsigned int Crd, unsigned int PathErr);





///******************************************************************************
//   功能：连续插补中暂停延时指令
//   参数：Crd          坐标系号        取值范围：[0,1]
//         delay_time   延时时间        单位：毫秒
//         mark         标号            任意指定，0 表示自动编号
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//注意：1）延时时间为运动停止时的等待时间
//      2）当延时时间设置为0 时，延时时间将无限长
//******************************************************************************/
int  IPMCContiDelay(unsigned int Crd, unsigned int delay_time, int mark);

///******************************************************************************
//   功能：连续插补中插入暂停点
//   参数：Crd          坐标系号        取值范围：[0,1]
//         mark         标号            任意指定，0 表示自动编号
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围、
//******************************************************************************/
int  IPMCContiPausePoint(unsigned int Crd, int mark);

///******************************************************************************
//   功能：连续插补暂停点是否启用
//   参数：Crd          坐标系号                   取值范围：[0,1]
//        enable       暂停点使能，0-禁用，1-启用   取值范围：[0,1]
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围、
//******************************************************************************/
int  IPMCEnablePausePoint(unsigned int Crd, unsigned int enable);

///******************************************************************************
//   功能：连续插补中直线插补指令
//   参数：Crd          坐标系号        取值范围：[0,1]
//         AxisNum      轴数            取值范围：[2,6]
//         AxisList     轴号列表
//         Target_Pos   目标位置数组    单位：脉冲
//         posi_mode    运动模式        0：相对坐标模式，1：绝对坐标模式
//         mark         标号            任意指定，0 表示自动编号

//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/
int  IPMCContiLineUnit(unsigned int Crd, unsigned int AxisNum, unsigned int * AxisList, 
							  int*Target_Pos, unsigned int posi_mode, int mark);

///******************************************************************************
//   功能：连续插补中基于圆心圆弧扩展的螺旋线插补指令（可作两轴圆弧插补）
//   参数：Crd          坐标系号        取值范围：[0,1]
//         AxisNum      轴数            取值范围：[2,6]
//         AxisList     轴号列表
//         Target_Pos   目标位置数组    单位：脉冲
//         Cen_Pos      圆心位置数组，  单位：脉冲
//         Arc_Dir      圆弧方向，      -1：顺时针，1：逆时针
//         Circle       圈数：          负数：表示此时执行的为同心圆插补
//                                            该值的绝对值加1 表示同心圆的圈数。如，-1 即表示2 圈同
//                                            心圆插补，-2 即表示3 圈同心圆插补…
//                                      非负数：表示此时执行的为螺旋线插补
//                                              该值表示螺旋线的圈数。如，0 即表示0 圈螺旋线插补,
//                                              1即表示1 圈螺旋线插补…
//         posi_mode    运动模式        0：相对坐标模式，1：绝对坐标模式
//         mark         标号            任意指定，0 表示自动编号

//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/

//注意：
//1）轴列表的前三轴必须为XYZ 轴的组合； 关于XYZUVW 轴对应定义详见函数IPMCContiOpenList的说明
//2）当轴数为2 时，轴列表前两轴进行平面螺旋或同心圆插补
//3）当轴数为3、运动轨迹为螺旋插补时，轴列表前两轴平面为基面，进行平面螺旋插补；同时，
//   轴列表第三轴运动指定高度，该轴终点位置与该轴起点位置的差值为螺旋线段相对于基面的高度
//4）当轴数大于3、运动轨迹为螺旋插补时，主动轴进行螺旋插补的同时，辅助轴跟随主动轴做线性运动，
//   运动时间与主动轴的总运动时间相等；关于主动轴及辅助轴对应定义详见函数 IPMCContiOpenList的说明
//5）当运动轨迹为螺旋插补时：轴列表前两轴组成的基面上，当起始点到圆心的距离小于终点到圆心的距离，
//   为绽放螺旋线轴列表前两轴组成的基面上，当起始点到圆心的距离大于终点到圆心的距离，为收敛螺旋线轴列表
//   前两轴组成的基面上，当起始点到圆心的距离等于终点到圆心的距离，为圆弧插补（插补轴数为3 时则为圆柱螺旋线）

int  IPMCContiArcMoveCenterUnit(unsigned int Crd, unsigned int AxisNum, 
									   unsigned int * AxisList,int *Target_Pos, int *Cen_Pos, 
									   int Arc_Dir, int Circle, unsigned int posi_mode, int mark);

///******************************************************************************
//   功能：连续插补中基于半径圆弧扩展的圆柱螺旋线插补指令（可作两轴圆弧插补）
//   参数：Crd          坐标系号        取值范围：[0,1]
//         AxisNum      轴数            取值范围：[2,6]
//         AxisList     轴号列表
//         Target_Pos   目标位置数组    单位：脉冲
//         Arc_Radius   圆弧半径值，    单位：脉冲
//         Arc_Dir      圆弧方向，      -1：顺时针，1：逆时针
//         Circle       圈数：          取值范围：大于等于0。该值表示螺旋线的圈数。
//                                      如，0 即表示0 圈螺旋线插补，1 即表示1圈螺旋线插补…
//         posi_mode    运动模式        0：相对坐标模式，1：绝对坐标模式
//         mark         标号            任意指定，0 表示自动编号
//
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//注意：
//1）轴列表的前三轴必须为XYZ 轴的组合； 关于XYZUVW 轴对应定义详见函数IPMCContiOpenList 的说明
//2）当轴数为2 时，轴列表前两轴进行平面圆弧插补
//3）当轴数为3 时，轴列表前两轴平面为基面，进行平面圆弧插补；同时，轴列表第三轴
//   运动指定高度；该轴终点位置与该轴起点位置的差值为圆柱螺旋线段相对于基面的高度
//4）当轴数大于3 时，主动轴进行圆柱螺旋插补的同时，辅助轴跟随主动轴做线性运动，运动时间与主动轴的
//   总运动时间相等；关于主动轴及辅助轴对应定义详见函数IPMCContiOpenList 的说明
//******************************************************************************/
int  IPMCContiArcMoveRadiusUnit(unsigned int Crd, unsigned int AxisNum, unsigned int* AxisList,
									   int *Target_Pos,unsigned int Arc_Radius, unsigned int Arc_Dir,
									   int Circle, unsigned int  posi_mode, int mark);


///******************************************************************************
//   功能：连续插补中基于三点圆弧扩展的圆柱螺旋线插补指令（可作两轴及三轴圆弧插补）
//   参数：Crd          坐标系号        取值范围：[0,1]
//         AxisNum      轴数            取值范围：[2,6]
//         AxisList     轴号列表
//         Target_Pos   目标位置数组    单位：脉冲
//         Mid_Pos      中间位置数组    单位：脉冲
//         Circle       圈数：          负数：表示此时执行的为空间圆弧插补,该值的绝对值减1,
//                                            表示空间圆弧的圈数。如，-1 即表示0 圈空间圆弧，
//                                            -2 即表示1 圈空间圆弧…
//                                      自然数：表示此时执行的为圆柱螺旋线插补
//                                              该值表示螺旋线的圈数。如，0 即表示0 圈螺旋线插补，1
//                                              即表示1 圈螺旋线插补…
//         posi_mode    运动模式        0：相对坐标模式，1：绝对坐标模式
//         mark         标号            任意指定，0 表示自动编号
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//注意：
//1）轴列表的前三轴必须为XYZ 轴的组合； 关于XYZUVW 轴对应定义详见函数IPMCContiOpenList 的说明
//2）当轴数为2 时，轴列表前两轴进行平面圆弧插补
//3）当轴数为3、运动轨迹为圆柱螺旋插补时，轴列表前两轴平面为基面，进行平面圆弧插补；同时，
//   轴列表第三轴运动指定高度；该轴终点位置与该轴起点位置的差值为圆柱螺旋线段相对于基面的高度
//4）当轴数大于3 时，主动轴进行圆柱螺旋插补或空间圆弧插补的同时，辅助轴跟随主动轴做线性运动，
//   运动时间与主动轴的总运动时间相等；关于主动轴及辅助轴对应定义详见函数IPMCContiOpenList 的说明
//******************************************************************************/
int  IPMCContiArcMove3PointsUnit(unsigned int Crd, unsigned int AxisNum,
										unsigned int*AxisList, int *Target_Pos, int *Mid_Pos, 
										int Circle, unsigned int posi_mode, int mark);


///******************************************************************************
//   功能：连续插补中基于三点圆弧扩展的圆柱螺旋线插补指令（可作两轴及三轴圆弧插补）
//   参数：Crd          坐标系号        取值范围：[0,1]
//         AxisNum      轴数            取值范围：[2,6]
//         AxisList     轴号列表
//         Target_Pos   目标位置数组    单位：脉冲
//         Mid_Pos      中间位置数组    单位：脉冲
//         Circle       圈数：          负数：表示此时执行的为空间圆弧插补,该值的绝对值减1,
//                                            表示空间圆弧的圈数。如，-1 即表示0 圈空间圆弧，
//                                            -2 即表示1 圈空间圆弧…
//                                      自然数：表示此时执行的为圆柱螺旋线插补
//                                              该值表示螺旋线的圈数。如，0 即表示0 圈螺旋线插补，1
//                                              即表示1 圈螺旋线插补…
//		   IsFull       是否是整圆标记  0 - 不是     1 - 是      2 - 角度圆（螺旋 无整圆功能）
//         Angle        圆心角          当IsFull=2 时，起效
//         posi_mode    运动模式        0：相对坐标模式，1：绝对坐标模式
//         mark         标号            任意指定，0 表示自动编号
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//注意：
//1）轴列表的前三轴必须为XYZ 轴的组合； 关于XYZUVW 轴对应定义详见函数IPMCContiOpenList 的说明
//2）当轴数为2 时，轴列表前两轴进行平面圆弧插补
//3）当轴数为3、运动轨迹为圆柱螺旋插补时，轴列表前两轴平面为基面，进行平面圆弧插补；同时，
//   轴列表第三轴运动指定高度；该轴终点位置与该轴起点位置的差值为圆柱螺旋线段相对于基面的高度
//4）当轴数大于3 时，主动轴进行圆柱螺旋插补或空间圆弧插补的同时，辅助轴跟随主动轴做线性运动，
//   运动时间与主动轴的总运动时间相等；关于主动轴及辅助轴对应定义详见函数IPMCContiOpenList 的说明
//******************************************************************************
int  IPMCContiArcMove3PointsUnitEx(unsigned int Crd, unsigned int AxisNum,
	const unsigned int*AxisList,const int *Target_Pos,const int *Mid_Pos,
	int Circle, unsigned int IsFull, double Angle,
	unsigned int posi_mode, int mark);

///******************************************************************************
//   功能：连续插补中矩形插补指令
//   参数：Crd          坐标系号        取值范围：[0,1]
//         AxisNum      轴数            保留参数，固定值为2
//         AxisList     轴号列表
//         Target_Pos   对角位置数组，  单位：脉冲
//         Mark_Pos     矩形方向标记位置数组，单位：脉冲
//         Count        行数/圈数         
//         rect_mode    矩形插补模式，  0：逐行，1：渐开线
//         posi_mode    运动模式，      0：相对坐标模式，1：绝对坐标模式
//         mark         标号，          任意指定，0 表示自动编号                             
//
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/
int  IPMCContiRectangleMoveUnit(unsigned int Crd, unsigned int AxisNum, 
									   unsigned int *AxisList,int *Target_Pos, int *Mark_Pos, 
									   int Count, unsigned int rect_mode, unsigned int posi_mode, int mark);

///******************************************************************************
//   功能：连续插补中控制指定轴运动
//   参数：Crd          坐标系号        取值范围：[0,1]
//         axis         指定轴号        取值范围：[0,11]
//         dist         目标位置，      单位：脉冲
//         posi_mode    运动模式，      0：相对坐标模式，1：绝对坐标模式
//         mode         模式：          0：暂停启动（当缓冲区中的上一段插补运动结束后，执行此段定长运
//                                          动；当本段定长运动结束后，再执行下一段插补运动）
//                                      1：直接启动（当缓冲区中的上一段插补运动结束后，执行此段定长运
//                                         动，并且同时执行下一段插补运动）
//         mark         标号，          任意指定，0 表示自动编号                             
//
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//注意：1）该指令可以实现在连续插补运动中，控制指定轴做定长运动
//      2）该轴不能为参与连续插补的运动轴
//      3）在使用该指令控制轴运动前，必须先使用函数设置该轴的运行速度

//******************************************************************************/
int  IPMCContipMoveUnit(unsigned int Crd, unsigned int axis, int dist, 
							   unsigned int posi_mode, unsigned int mode, int mark);

///******************************************************************************
//   功能：查询连续插补缓冲区剩余插补空间
//   参数：   Crd          坐标系号        取值范围：[0,1]
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/
int  IPMCContiRemainSpace(unsigned int Crd,unsigned int *RemainSpace);

///******************************************************************************
//   功能：读取连续插补缓冲区当前插补段号
//   参数：Crd          坐标系号        取值范围：[0,1]
//          RemainSpace得到的值
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/
int  IPMCContiReadCurrentMark (unsigned int Crd,unsigned int *CurrentMark);



///******************************************************************************
//   功能：读取连续插补前瞻参数
//   参数：Crd          坐标系号        取值范围：[0,1]
//         enable       前瞻使能状态    0：禁用，1：使能
//  LookaheadSegments   前瞻段数，      取值范围：非负数
//         PathError    允许误差范围，  取值范围：非负数,单位：脉冲
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/
int  IPMCContiGetLookaheadMode(unsigned int Crd, unsigned int * enable,int*LookaheadSegments,
									  double* PathError);

///******************************************************************************
//   功能：设置连续插补暂停及异常停止时IO输出状态
//   参数：Crd          坐标系号        取值范围：[0,1]    
//         action       激活模式：      0：保持原状
//                                      1：暂停连续插补时输出设定的IO状态，恢复运行时不恢复暂停前的IO 状态
//                                      2：暂停连续插补时输出设定的IO 状态，继续运行时恢复暂停前的IO状态
//                                      3：当暂停、停止连续插补，或遇到其他异常停止（如碰到EMG 信号）时，输出设定的IO 状态
//         mask         选择输出端口标志：bit0~bit31 代表Out0~Out31，位值为1时输出，位值为0时不输出
//         state        输出电平状态：  bit0~bit31 代表Out0~Out31，位值为1时输出高电平，位值为0时输出低电平
//
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//激活模式3 的说明：1）暂停连续插补时，运动控制卡输出设定的IO 状态，继续运行时恢复暂停前的IO状态
//                  2）停止连续插补、或遇到其他异常停止时，运动控制卡输出设定的IO状态，
//                     但是再次启动连续插补时不会恢复之前的IO状态
//******************************************************************************/
int  IPMCContiSetPauseOutput(unsigned int Crd, unsigned int action, int mask, int state);


///******************************************************************************
//   功能：读取连续插补暂停及异常停止时IO输出状态设置
//   参数：Crd          坐标系号        取值范围：[0,1]
//         action       激活模式：      0：保持原状
//                                      1：暂停连续插补时输出设定的IO状态，恢复运行时不恢复暂停前的IO 状态
//                                      2：暂停连续插补时输出设定的IO 状态，继续运行时恢复暂停前的IO状态
//                                      3：当暂停、停止连续插补，或遇到其他异常停止（如碰到EMG 信号）时，输出设定的IO 状态
//         mask         选择输出端口标志：bit0~bit31 代表Out0~Out31，位值为1时输出，位值为0时不输出
//         state        输出电平状态：  bit0~bit31 代表Out0~Out31，位值为1时输出高电平，位值为0时输出低电平
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/
int  IPMCContiGetPauseOutput(unsigned int Crd, unsigned int *action, int *mask, int *state);

///******************************************************************************
//   功能：连续插补等待IO 输入.当运动控制卡执行到此指令时，只有在接受到输入IO 
//         信号或超出超时时间后，才会执行后续运动
//   参数：Crd          坐标系号        取值范围：[0,1]
//		   IONum		IO从站号，		取值范围：[0,MAX_IO_SLAVE_NUM）
//         bitno        输出口号，      取值范围：0~31
//         on_off       电平状态，      0：低电平，1：高电平
//         TimeOut      超时时间，      单位：ms
//         mark         标号，          任意指定，0 表示自动编号
//   
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/
//注意：1）当超时时间设为0 时，运动控制卡将一直等待IO 输入信号，超时时间为无限长
int  IPMCContiWaitInput(unsigned int Crd, unsigned int IONum,  unsigned int bitno, 
							   unsigned int on_off,unsigned int TimeOut,unsigned int mark);

///******************************************************************************
//   功能：连续插补中相对于轨迹段起点IO 滞后输出（段内执行）
//   参数：Crd          坐标系号        取值范围：[0,1]
//		   IONum		IO从站号，		取值范围：[0,MAX_IO_SLAVE_NUM）
//         bitno        输出口号，      取值范围：0~31
//         on_off       电平状态，      0：低电平，1：高电平
//         delay_value  滞后值，        单位：ms（滞后时间模式）或脉冲（滞后距离模式）
//         delay_mode   滞后模式，      0：滞后时间，1：滞后距离
//         ReverseTime  电平输出后的延时翻转时间，单位：ms
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//注意：
//1）设置的IO操作，将在该指令的下一条轨迹中起作用
//2）当ReverseTime参数设置为0时，相应IO端口电平将不会翻转，保持设置值不变
//3）当滞后模式选择为滞后距离时，位置源为指令位置计数器
//******************************************************************************/
int  IPMCContiDelayOutbitToStart(unsigned int Crd,  unsigned int IONum,unsigned int bitno,
										unsigned int on_off,unsigned int delay_value, unsigned int delay_mode, 
										unsigned int ReverseTime);

///******************************************************************************
//   功能：连续插补中相对于轨迹段终点IO 滞后输出
//   参数：Crd          坐标系号        取值范围：[0,1]
//		   IONum		IO从站号，		取值范围：[0,MAX_IO_SLAVE_NUM）
//         bitno        输出口号，      取值范围：0~31
//         on_off       电平状态，      0：低电平，1：高电平
//         delay_time   滞后时间，      单位：ms
//         ReverseTime  保留参数，      固定值为0
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/
int  IPMCContiDelayOutbitToStop( unsigned int Crd, unsigned int IONum, unsigned int bitno, 
									   unsigned int on_off,unsigned int delay_time, unsigned int ReverseTime);

///******************************************************************************
//   功能：连续插补中相对于轨迹段终点IO 提前输出（段内执行）
//   参数：Crd          坐标系号        取值范围：[0,1]
//		   IONum		IO从站号，		取值范围：[0,MAX_IO_SLAVE_NUM）
//         bitno        输出口号，      取值范围：0~31
//         on_off       电平状态，      0：低电平，1：高电平
//         ahead_value  提前值，        单位：ms（提前时间模式）或脉冲（提前距离模式）
//         ahead_mode   提前模式，      0：提前时间，1：提前距离
//         ReverseTime  电平输出后的延时翻转时间，单位：ms
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/
int  IPMCContiAheadOutbitToStop(unsigned int Crd, unsigned int IONum, unsigned int bitno,
									   unsigned int on_off, unsigned int ahead_value, unsigned int ahead_mode, 
									   unsigned int ReverseTime);


///******************************************************************************
//   功能：连续插补中精确位置CMP 输出控制
//   参数：Crd          坐标系号        取值范围：[0,1]
//         cmp_no       CMP 输出端口号，取值范围：0~3
//         on_off       电平状态，      0：低电平，1：高电平
//         map_axis     坐标系内关联轴号：0：X轴 1：Y轴 2：Z轴 3：U轴 4：V轴 5：W轴
//         rel_dist     相对于轨迹段起点的距离在关联轴上的分量距离
//         pos_source   位置源，        0：指令位置计数器，1：编码器计数器
//         ReverseTime  电平输出后的延时翻转时间，单位：us，范围：1us~20000000us
//
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//注意：
//1）设置的IO操作，将在该指令的下一条轨迹中起作用
//2）当ReverseTime参数不能设置为0，当参数设置为0时，相应CMP口将不会被操作
//3）如果ReverseTime参数设置过大，那么当该段轨迹执行完毕时，CMP端口电平仍会自动翻转，即使
//此时未达到设置的电平延时翻转时间
//4）此功能为一维高速位置比较（队列模式）的扩展功能。当启用精确位置CMP输出控制
//时，会占用高速比较器资源，所以一维高速位置比较功能与精确位置CMP输出控制功
//能不能在同一时间内使用，否则可能会出现错误动作。
//5）执行精确位置 CMP 输出时，每个位置点的触发是按照添加的比较点顺序执行的，即如
//果有一个比较点没有被触发比较动作，那么后面的比较点是不会被触发的。如果期望
//在连续插补中使用该功能，可以在打开连续插补缓冲区时就调用函数清除相应比较器的比较点
//******************************************************************************/
int  IPMCContiAccurateOutbitUnit(unsigned int Crd, unsigned int cmp_no, 
										unsigned int on_off, unsigned int map_axis, unsigned int rel_dist, 
										unsigned int pos_source, unsigned int ReverseTime);

///******************************************************************************
//   功能：连续插补中缓冲区立即IO 输出
//   参数：
//		Crd          坐标系号        取值范围：[0,1]
//		IONum		IO从站号，		取值范围：[0,MAX_IO_SLAVE_NUM）
// 		bitno        输出口号，      取值范围：0~31
//		on_off       电平状态，      0：低电平，1：高电平
// 		ReverseTime  电平输出后的延时翻转时间，单位：ms
//
//返回值：
//		0：函数执行成功
//		997：共享内存尚未创建
//		10000：函数执行失败
//		10003：指令缓冲区已满
//		32012：参数设置超出范围
//******************************************************************************/
//说明：
//1）当计算机执行到此指令时，将该指令存入缓冲区，当缓冲区中的上一段运动指令执行完毕时，该指令将执行
//2）该指令调用之后，前一段轨迹与下一段轨迹的速度曲线将不连续，即Blend 平滑模式在这两段轨迹之间不起作用
//3）当ReverseTime 参数设置为0 时，相应IO 端口电平将不会翻转，保持设置值不变

int  IPMCContiWriteOutbit(unsigned int Crd, unsigned int IONum, unsigned int bitno,
								 unsigned int on_off, unsigned int ReverseTime);

///******************************************************************************
//   功能：连续插补中缓冲区模拟量DA立即输出
//   参数：Crd          坐标系号        取值范围：[0,1]
//        boxnum		box从站号	[0,MAX_BOX_EVB_NUM]
//        channel		模拟量通道号(0 ~7)
//        offsetval	    设定通道的零偏值(当val输出0V时，实际输出的电压值)
//        val			16位电压值补码输出(即输出范围是[0, 10])
//		  mark
//
//返回值：
//		0：函数执行成功
//		997：共享内存尚未创建
//		10000：函数执行失败
//		10003：指令缓冲区已满
//		32012：参数设置超出范围
//******************************************************************************/
//说明：
//1）当计算机执行到此指令时，将该指令存入缓冲区，当缓冲区中的上一段运动指令执行完毕时，该指令将执行
//2）该指令调用之后，前一段轨迹与下一段轨迹的速度曲线将不连续，即Blend 平滑模式在这两段轨迹之间不起作用
int  IPMCContiWriteDA(unsigned int Crd, unsigned int boxnum, unsigned int channel, double offsetval, double val);

///******************************************************************************
//   功能：清除段内未执行完的IO动作
//   参数：Crd          坐标系号        取值范围：[0,1]
//        IoMask        清除标志：      bit0~bit31 分别表示Out0~Out31 输出口；位值：1：清除对应输出口段内
//                                      未执行完的动作，比如翻转时间到达后IO翻转动作；0：不操作
//
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//******************************************************************************/
int  IPMCContiClearIoAction(unsigned int Crd, unsigned int IoMask);

//******************************************************************************
//   功能：计算三点圆弧的弧长
//   参数：start_pos    起始位置数组，此数组为三维数组    单位：脉冲
//         mid_pos		经过点位置数组，此数组为三维数组  单位：脉冲
//         target_pos	目标位置数组，此数组为三维数组    单位：脉冲
//         circle		圈数
//		   ArcLength	返回弧长值
//
//返回值：
//			0：函数执行成功
//			997：共享内存尚未创建
//			10000：函数执行失败
//			10003：指令缓冲区已满
//			32012：参数设置超出范围
//说明： 该指令只能计算圆弧的弧长，不能计算渐近渐开线的弧长
//******************************************************************************/
int  IPMCContiArclength3Point(double *start_pos, double *mid_pos, double *target_pos, 
									 double circle, double *Arclength);

/******************************************************************************
   功能：读取连续插补运动状态
参数：	
		Crd          坐标系号        取值范围：[0,1]
        RunState     运动状态    0：正在运动，1：暂停中 2：停止状态3：未启动4：空闲
//返回值：
//		0：函数执行成功
//		997：共享内存尚未创建
//		10000：函数执行失败
//		10003：指令缓冲区已满
//		32012：参数设置超出范围
//******************************************************************************/
int  IPMCContiGetContiRunState(unsigned int Crd, unsigned int *RunState);

/******************************************************************************
功能：设置连续插补段速度
参数： 
		Crd          坐标系号      取值范围：[0,1]
		StartV      起始速度		    取值范围：无限制
		TargetV     目标速度		    取值范围：无限制
		EndV        结束速度		    取值范围：无限制
返回值：
		0：函数执行成功
		997：共享内存尚未创建
		10000：函数执行失败
		10003：指令缓冲区已满
		32012：参数设置超出范围
******************************************************************************/
int  IPMCContiSetTargetVel(unsigned int Crd, double StartV, double TargetV, double EndV);

/****************************************************************************/
//添加螺距误差补偿songlee2018/11/12
/****************************************************************************/

/******************************************************************************
功能：使能轴螺距补偿
参数：
		nAxis			所请求的轴号	取值范围：[0, MAXAXES]
		enable;		使能
		type            //类型 0-相对 1-绝对
返回值： 0		执行IOCNTL函数成功
		IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
		IPMC_ERR_INVALID_DEV	设备未打开
******************************************************************************/
// int  IPMCEnableSPC(unsigned int nAxis, int enable, int type);

/********************************************************************************
功能：主机设定轴螺距补偿参数
参数：
		nAxis			所请求的轴号	取值范围：[0, MAXAXES]
		refPoint;		基准点			取值范围：[0, 255]
		usedPoints;   使用的点数	used points <= SPC_TAB_LEN		取值范围：[0, 255]		[0, MAX_POS]pulse
		interval;			// interval between two points	所设定的SPC参数
返回值： 0		执行IOCNTL函数成功
		IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
		IPMC_ERR_INVALID_DEV	设备未打开
*********************************************************************************/
// int  IPMCSetSPCParam(unsigned int nAxis, unsigned int refPoint, unsigned int usedPoints, unsigned int interval);

/********************************************************************************
功能：轴螺距补偿表
参数：
		nAxis		所请求的轴号	    取值范围：[0, MAXAXES]
		datacount	补偿表个数	        取值范围：[0, 255]
		spcdata		补偿表指针

返回值：      	
//		0		执行IOCNTL函数成功
		IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
		IPMC_ERR_INVALID_DEV	设备未打开
*********************************************************************************/
// int  IPMCSetSPCData(unsigned int nAxis, unsigned int dir, unsigned int datacount, int *spcdata);

/********************************************************************************************
功能：配置锁存信息
参数：
		axis	表示轴号				取值范围：0-31位，哪一位为1选哪个轴，只能选一位。0代表不选
		Inbit	锁存位
		up_down 上升沿下降沿  0是上升沿，1下降沿
		lockSource    输出坐标，1编码器反馈
//返回值：      	
//		0		执行IOCNTL函数成功
//		IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
//		IPMC_ERR_INVALID_DEV	设备未打开
********************************************************************************************/
int  IPMCSetSoftLatchEn(unsigned int axis, unsigned int Inbit, unsigned int up_down, unsigned int LatchCource);

///********************************************************************************************
//功能：设置指定编码器锁存值
//参数：
//		naxis		表示轴号				取值范围：[0, 31]
//		latchvalue	设置锁存器初始值
//返回值：      	
//		0		执行IOCNTL函数成功
//		IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
//		IPMC_ERR_INVALID_DEV	设备未打开
//********************************************************************************************/
int  IPMCSetSoftLatchValue(int naxis, int latchvalue);

///********************************************************************************************
//功能：设置指定编码器锁存标记
//参数：
//		naxis		表示轴号				取值范围：[0, 31]
//		latchflag	设置锁存标记
//返回值：      	
//		0		执行IOCNTL函数成功
//		IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
//		IPMC_ERR_INVALID_DEV	设备未打开
//********************************************************************************************/
int  IPMCSetSoftLatchFlag(int naxis, int latchflag);

///********************************************************************************************
//功能：得到指定编码器锁存值
//参数：DeviceID		选择卡号				取值范围：[0, MAX_DEVICEID]
//		naxis		表示轴号				取值范围：[0, 31]
//		latchvalue	设置锁存器初始值
//返回值：  
//		0		执行IOCNTL函数成功
//		IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
//		IPMC_ERR_INVALID_DEV	设备未打开
//********************************************************************************************/
int  IPMCGetSoftLatchValue(int naxis, int *latchvalue);

///********************************************************************************************
//功能：得到指定编码器锁存标记值
//参数：
//		nEncoder		表示轴号				取值范围：[0, 31]
//		latchflag	获取到的锁存标记值
//返回值：      	
//		0		执行IOCNTL函数成功
//		IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
//		IPMC_ERR_INVALID_DEV	设备未打开
//********************************************************************************************/
int  IPMCGetSoftLatchFlag(int naxis, int *latchflag);

///******************************************************************************
//   功能：启动并初始化PWM_IO功能 ， PWM_IO功能可以使得IO口产生持续的输出信号
//   参数：
//         PwmNo        PWM编号     取值范围：[0,7]
//         enable       0-不使能    1-使能PWM模式
//         Slave        从站编号    取值范围：[0,31]
//		   index        IO点编号    
//		   Duty         占空比      取值范围：0-1
//		   Frequency    频率        取值范围：0-1kHz，单位为Hz
// 返回值：   0-函数执行成功
//        10000-动态链接库与驱动程序通信失败
//        32000-设备未打开
//        32012-给定参数超出范围
//******************************************************************************/
int  IPMCPWMIOSetParam(unsigned int PwmNo, unsigned int enable, unsigned int slave, unsigned int index,
	double Duty, double Frequency);


//*****************************************************************************
//   功能：设置小线段拟合的误差
//   参数：
//         Crd        坐标系号     取值范围：[0,3]
//         torlence   小线段拟合容许的误差，非负数。0表示不拟合。
// 返回值：   0-函数执行成功
//        10000-动态链接库与驱动程序通信失败
//        32000-设备未打开
//        32012-给定参数超出范围
//*****************************************************************************
int  IPMCSetMocroLineFitParam(unsigned int Crd, double torlence);

//*****************************************************************************
//   功能：连续插补中等待指定轴到达某一位置后继续后续动作
//   参数：
//         Crd          坐标系号        取值范围：[0,3]
//         axis         指定轴号        取值范围：[0,MAX_AXES)
//         source       位置比较数据源    0表示指令位置，1表示外部编码器位置   取值范围：[0, 1]
//         pos          位置
//         mode         模式：          0：大于等于 1：小于等于                          
//         mark         标号，          任意指定，0 表示自动编号                             
//
// 返回值：   0-函数执行成功
//        10000-动态链接库与驱动程序通信失败
//        32000-设备未打开
//        32012-给定参数超出范围
//*****************************************************************************
int  IPMCContiCompareAxisPos(unsigned int Crd, unsigned int axis, unsigned int source,
	int pos, unsigned int mode, int mark);

//*****************************************************************************
//   功能：连续插补中启动、停止运动叠加
//   参数：
//         Crd          坐标系号        取值范围：[0,3]
//         SlaveAxis    从动轴号        取值范围：[0,MAX_AXES)
//         enable       使能运动叠加    0表示不使能，1表示使能   取值范围：[0, 1]
//         MasterAxis0  主动轴号0        取值范围：[0,MAX_AXES)
//         MasterAxis1  主动轴号1        取值范围：[0,MAX_AXES)
//         Type0        主动轴0类型 0表示脉冲轴，1表示编码器轴   取值范围：[0, 1]
//         Type1        主动轴1类型 0表示脉冲轴，1表示编码器轴   取值范围：[0, 1]
//         Ratio0       主动轴0叠加比例                         
//         Ratio1       主动轴1叠加比例                                
//
// 返回值：   0-函数执行成功
//        10000-动态链接库与驱动程序通信失败
//        32000-设备未打开
//        32012-给定参数超出范围
//*****************************************************************************
int  IPMCContiSuperImpose(unsigned int Crd, unsigned int SlaveAxis, unsigned int enable,
	unsigned int MasterAxis0, unsigned int MasterAxis1, unsigned int Type0, unsigned int Type1, double Ratio0, double Ratio1);

//*****************************************************************************
//   功能：连续插补等待电机运动到位.当运动控制卡执行到此指令时，只有在接收到电机运动到位 
//         信号或超出超时时间后，才会执行后续运动
//   参数：
//         Crd          坐标系号        取值范围：[0,3]
//         Mask        需要等待到位的轴掩码（按位对应轴号,不能超出控制器的最大轴数）
//         TimeOut      超时时间，      单位：ms
//         mark         标号，          任意指定，0 表示自动编号
//   
// 返回值：   0-函数执行成功
//        10000-动态链接库与驱动程序通信失败
//        32000-设备未打开
//        32012-给定参数超出范围
//*****************************************************************************
//注意：1）当超时时间设为0 时，运动控制卡将一直等待IO 输入信号，超时时间为无限长
int  IPMCContiWaitEncInPosition(unsigned int Crd, unsigned int Mask, unsigned int TimeOut, unsigned int mark);

//*******************************************************************************
//功能：设定轴反向补偿参数
//参数：
//		nAxis			所请求的轴号			取值范围：[0,31]
//		enable			使能
//		CompValue		补偿值 (unit : pulse)
//		CompDelta		周期补偿量 (unit : pulse)
//		CompDir         补偿方向 0：正向补偿  1：负向补偿
//返回值： 0		执行IOCNTL函数成功
//		IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
//		IPMC_ERR_INVALID_DEV	设备未打开
//********************************************************************************
int  IPMCSetBacklash(unsigned int nAxis, int enable, unsigned int CompValue, unsigned int CompDelta, unsigned int CompDir);

//*******************************************************************************
//功能：设定螺距误差补偿参数
//参数：
//		nAxis		所请求的轴号			取值范围：[0,31]
//		num			补偿点个数，取值范围：[2, 128]
//		StartPos	补偿起始位置
//		CompLen		补偿区间总长度
//		pCompPos    正向补偿值数组
//		pCompNeg    反向补偿值数组
//返回值： 0		执行IOCNTL函数成功
//		IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
//		IPMC_ERR_INVALID_DEV	设备未打开
//********************************************************************************
int  IPMCSetLeadScrewComp(unsigned int nAxis, unsigned int num, int StartPos, unsigned int CompLen,const int *pCompPos,const int *pCompNeg);

//********************************************************************************
//功能：使能螺距误差补偿功能
//参数：
//		nAxis		所请求的轴号			取值范围：[0,31]
//		enable		是否使能螺距误差补偿功能 0-不使能 1-使能
//返回值： 0		执行IOCNTL函数成功
//		IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
//		IPMC_ERR_INVALID_DEV	设备未打开
//*********************************************************************************
int  IPMCEnableLeadScrewComp(unsigned int nAxis, int enable);

//-----------------------------------------------------速度模式和扭矩模式------------------------------------------------
//*******************************************************************************
//功能：设置轴的控制模式
//参数：
//			nAxis		所请求的轴号	    取值范围：[0, MAXAXES]
//			mode	    轴指令模式	    0-CSP  1-CSV 2-CST 取值范围：[0, 2]
//
//返回值：   0		执行IOCNTL函数成功
//			IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
//			IPMC_ERR_INVALID_DEV	设备未打开
//********************************************************************************
int  IPMCSetAxisCommandMode(unsigned int nAxis, unsigned int mode);

//*******************************************************************************
//功能：设置轴的CSV模式下的速度
//参数：
//			nAxis		所请求的轴号	    取值范围：[0, MAXAXES]
//			val	        指定速度
//
//返回值		0		执行IOCNTL函数成功
//			IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
//			IPMC_ERR_INVALID_DEV	设备未打开
//********************************************************************************
int  IPMCSetVelCommand(unsigned int nAxis, int val);

//*******************************************************************************
//功能：设置轴的CST模式下的扭矩
//参数：
//			nAxis		所请求的轴号	    取值范围：[0, MAXAXES]
//			val	        指定扭矩            取值范围：[-32768, 32767]
//
//返回值：	0		执行IOCNTL函数成功
//			IPMC_ERR_FCN_CALL_FAIL	执行IOCNTL函数失败
//			IPMC_ERR_INVALID_DEV	设备未打开
//********************************************************************************
int  IPMCSetTrqCommand(unsigned int nAxis, short val);

//*******************************************************************************
//功能：设置插补理论位置与EtherCAT反馈位置允许的误差范围，即两者之间偏差在该范围内时即可认为已到达目标位置
//参数：
//		precision  设置允许误差范围
//
//返回值：
//		0：函数执行成功
//		997：共享内存尚未创建
//		10000：函数执行失败
//		10003：指令缓冲区已满
//		32012：参数设置超出范围***********************************************************
int  IPMCSetPosPrecisionValue(unsigned int precision);




///******************************************************************************
//   function:Open and start Raspberry gpio hardwave pwm.
//   @param：
//         PwmNo             		 			range：[0,1]
//		   PwmFreq         pwm frequency     	range:0(off)or 1-187.5M ,Frequencies above 30MHz are unlikely to work.
//		   PwmDuty    	   pwm dutycycle        range：0(off)-1000000(1M fully on)，单位为Hz
// 返回值：   0-all is ok
//			32012 - out of range
//		   -97 - PI_BAD_HPWM_DUTY   hardware PWM dutycycle not 0-1M
//		   -1  - PI_INIT_FAILED     gpioInitialise failed
//		   -96 - PI_BAD_HPWM_FREQ   invalid hardware PWM frequency
//		   -100 - PI_HPWM_ILLEGAL   illegal, PWM in use for main clock
//******************************************************************************/
int IPMCRaspSetPWM(unsigned int PwmNo,unsigned int PwmFreq,unsigned int PwmDuty);


int IPMCGetFeedBackPtr(unsigned char * &TargetAdd,int &len);


}
#endif