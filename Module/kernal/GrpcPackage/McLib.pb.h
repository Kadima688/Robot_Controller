// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: McLib.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_McLib_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_McLib_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_McLib_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_McLib_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_McLib_2eproto;
namespace SoftKernelHmiTest {
class AddAxisToGroup;
class AddAxisToGroupDefaultTypeInternal;
extern AddAxisToGroupDefaultTypeInternal _AddAxisToGroup_default_instance_;
class AxesPosition;
class AxesPositionDefaultTypeInternal;
extern AxesPositionDefaultTypeInternal _AxesPosition_default_instance_;
class GroupContinue;
class GroupContinueDefaultTypeInternal;
extern GroupContinueDefaultTypeInternal _GroupContinue_default_instance_;
class GroupDisable;
class GroupDisableDefaultTypeInternal;
extern GroupDisableDefaultTypeInternal _GroupDisable_default_instance_;
class GroupEnable;
class GroupEnableDefaultTypeInternal;
extern GroupEnableDefaultTypeInternal _GroupEnable_default_instance_;
class GroupInterrupt;
class GroupInterruptDefaultTypeInternal;
extern GroupInterruptDefaultTypeInternal _GroupInterrupt_default_instance_;
class GroupSetPosition;
class GroupSetPositionDefaultTypeInternal;
extern GroupSetPositionDefaultTypeInternal _GroupSetPosition_default_instance_;
class GroupStop;
class GroupStopDefaultTypeInternal;
extern GroupStopDefaultTypeInternal _GroupStop_default_instance_;
class McResult;
class McResultDefaultTypeInternal;
extern McResultDefaultTypeInternal _McResult_default_instance_;
class MoveAbsolute;
class MoveAbsoluteDefaultTypeInternal;
extern MoveAbsoluteDefaultTypeInternal _MoveAbsolute_default_instance_;
class MoveContinuousAbsolute;
class MoveContinuousAbsoluteDefaultTypeInternal;
extern MoveContinuousAbsoluteDefaultTypeInternal _MoveContinuousAbsolute_default_instance_;
class MoveLinearRelative;
class MoveLinearRelativeDefaultTypeInternal;
extern MoveLinearRelativeDefaultTypeInternal _MoveLinearRelative_default_instance_;
class Power;
class PowerDefaultTypeInternal;
extern PowerDefaultTypeInternal _Power_default_instance_;
class ReadActualPosition;
class ReadActualPositionDefaultTypeInternal;
extern ReadActualPositionDefaultTypeInternal _ReadActualPosition_default_instance_;
class RemoveAxisFromGroup;
class RemoveAxisFromGroupDefaultTypeInternal;
extern RemoveAxisFromGroupDefaultTypeInternal _RemoveAxisFromGroup_default_instance_;
class SetCartesianTransform;
class SetCartesianTransformDefaultTypeInternal;
extern SetCartesianTransformDefaultTypeInternal _SetCartesianTransform_default_instance_;
class SetCoordinateTransform;
class SetCoordinateTransformDefaultTypeInternal;
extern SetCoordinateTransformDefaultTypeInternal _SetCoordinateTransform_default_instance_;
class SetKinTransform;
class SetKinTransformDefaultTypeInternal;
extern SetKinTransformDefaultTypeInternal _SetKinTransform_default_instance_;
class SetPostion;
class SetPostionDefaultTypeInternal;
extern SetPostionDefaultTypeInternal _SetPostion_default_instance_;
class Stop;
class StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class UngroupAllAxes;
class UngroupAllAxesDefaultTypeInternal;
extern UngroupAllAxesDefaultTypeInternal _UngroupAllAxes_default_instance_;
}  // namespace SoftKernelHmiTest
PROTOBUF_NAMESPACE_OPEN
template<> ::SoftKernelHmiTest::AddAxisToGroup* Arena::CreateMaybeMessage<::SoftKernelHmiTest::AddAxisToGroup>(Arena*);
template<> ::SoftKernelHmiTest::AxesPosition* Arena::CreateMaybeMessage<::SoftKernelHmiTest::AxesPosition>(Arena*);
template<> ::SoftKernelHmiTest::GroupContinue* Arena::CreateMaybeMessage<::SoftKernelHmiTest::GroupContinue>(Arena*);
template<> ::SoftKernelHmiTest::GroupDisable* Arena::CreateMaybeMessage<::SoftKernelHmiTest::GroupDisable>(Arena*);
template<> ::SoftKernelHmiTest::GroupEnable* Arena::CreateMaybeMessage<::SoftKernelHmiTest::GroupEnable>(Arena*);
template<> ::SoftKernelHmiTest::GroupInterrupt* Arena::CreateMaybeMessage<::SoftKernelHmiTest::GroupInterrupt>(Arena*);
template<> ::SoftKernelHmiTest::GroupSetPosition* Arena::CreateMaybeMessage<::SoftKernelHmiTest::GroupSetPosition>(Arena*);
template<> ::SoftKernelHmiTest::GroupStop* Arena::CreateMaybeMessage<::SoftKernelHmiTest::GroupStop>(Arena*);
template<> ::SoftKernelHmiTest::McResult* Arena::CreateMaybeMessage<::SoftKernelHmiTest::McResult>(Arena*);
template<> ::SoftKernelHmiTest::MoveAbsolute* Arena::CreateMaybeMessage<::SoftKernelHmiTest::MoveAbsolute>(Arena*);
template<> ::SoftKernelHmiTest::MoveContinuousAbsolute* Arena::CreateMaybeMessage<::SoftKernelHmiTest::MoveContinuousAbsolute>(Arena*);
template<> ::SoftKernelHmiTest::MoveLinearRelative* Arena::CreateMaybeMessage<::SoftKernelHmiTest::MoveLinearRelative>(Arena*);
template<> ::SoftKernelHmiTest::Power* Arena::CreateMaybeMessage<::SoftKernelHmiTest::Power>(Arena*);
template<> ::SoftKernelHmiTest::ReadActualPosition* Arena::CreateMaybeMessage<::SoftKernelHmiTest::ReadActualPosition>(Arena*);
template<> ::SoftKernelHmiTest::RemoveAxisFromGroup* Arena::CreateMaybeMessage<::SoftKernelHmiTest::RemoveAxisFromGroup>(Arena*);
template<> ::SoftKernelHmiTest::SetCartesianTransform* Arena::CreateMaybeMessage<::SoftKernelHmiTest::SetCartesianTransform>(Arena*);
template<> ::SoftKernelHmiTest::SetCoordinateTransform* Arena::CreateMaybeMessage<::SoftKernelHmiTest::SetCoordinateTransform>(Arena*);
template<> ::SoftKernelHmiTest::SetKinTransform* Arena::CreateMaybeMessage<::SoftKernelHmiTest::SetKinTransform>(Arena*);
template<> ::SoftKernelHmiTest::SetPostion* Arena::CreateMaybeMessage<::SoftKernelHmiTest::SetPostion>(Arena*);
template<> ::SoftKernelHmiTest::Stop* Arena::CreateMaybeMessage<::SoftKernelHmiTest::Stop>(Arena*);
template<> ::SoftKernelHmiTest::UngroupAllAxes* Arena::CreateMaybeMessage<::SoftKernelHmiTest::UngroupAllAxes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SoftKernelHmiTest {

// ===================================================================

class McResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.McResult) */ {
 public:
  inline McResult() : McResult(nullptr) {}
  virtual ~McResult();

  McResult(const McResult& from);
  McResult(McResult&& from) noexcept
    : McResult() {
    *this = ::std::move(from);
  }

  inline McResult& operator=(const McResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline McResult& operator=(McResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const McResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const McResult* internal_default_instance() {
    return reinterpret_cast<const McResult*>(
               &_McResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(McResult& a, McResult& b) {
    a.Swap(&b);
  }
  inline void Swap(McResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(McResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline McResult* New() const final {
    return CreateMaybeMessage<McResult>(nullptr);
  }

  McResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<McResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const McResult& from);
  void MergeFrom(const McResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(McResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.McResult";
  }
  protected:
  explicit McResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.McResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class Power PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.Power) */ {
 public:
  inline Power() : Power(nullptr) {}
  virtual ~Power();

  Power(const Power& from);
  Power(Power&& from) noexcept
    : Power() {
    *this = ::std::move(from);
  }

  inline Power& operator=(const Power& from) {
    CopyFrom(from);
    return *this;
  }
  inline Power& operator=(Power&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Power& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Power* internal_default_instance() {
    return reinterpret_cast<const Power*>(
               &_Power_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Power& a, Power& b) {
    a.Swap(&b);
  }
  inline void Swap(Power* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Power* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Power* New() const final {
    return CreateMaybeMessage<Power>(nullptr);
  }

  Power* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Power>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Power& from);
  void MergeFrom(const Power& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Power* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.Power";
  }
  protected:
  explicit Power(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 1,
    kEnableFieldNumber = 2,
    kEnablePositiveFieldNumber = 3,
    kEnableNegativeFieldNumber = 4,
  };
  // int32 Axis = 1;
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // bool EnablePositive = 3;
  void clear_enablepositive();
  bool enablepositive() const;
  void set_enablepositive(bool value);
  private:
  bool _internal_enablepositive() const;
  void _internal_set_enablepositive(bool value);
  public:

  // bool EnableNegative = 4;
  void clear_enablenegative();
  bool enablenegative() const;
  void set_enablenegative(bool value);
  private:
  bool _internal_enablenegative() const;
  void _internal_set_enablenegative(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.Power)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  bool enable_;
  bool enablepositive_;
  bool enablenegative_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class Stop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  virtual ~Stop();

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stop* New() const final {
    return CreateMaybeMessage<Stop>(nullptr);
  }

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stop& from);
  void MergeFrom(const Stop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 1,
    kEnableFieldNumber = 2,
    kDecelerationFieldNumber = 3,
    kJerkFieldNumber = 4,
  };
  // int32 Axis = 1;
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // double Deceleration = 3;
  void clear_deceleration();
  double deceleration() const;
  void set_deceleration(double value);
  private:
  double _internal_deceleration() const;
  void _internal_set_deceleration(double value);
  public:

  // double Jerk = 4;
  void clear_jerk();
  double jerk() const;
  void set_jerk(double value);
  private:
  double _internal_jerk() const;
  void _internal_set_jerk(double value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  bool enable_;
  double deceleration_;
  double jerk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class MoveAbsolute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.MoveAbsolute) */ {
 public:
  inline MoveAbsolute() : MoveAbsolute(nullptr) {}
  virtual ~MoveAbsolute();

  MoveAbsolute(const MoveAbsolute& from);
  MoveAbsolute(MoveAbsolute&& from) noexcept
    : MoveAbsolute() {
    *this = ::std::move(from);
  }

  inline MoveAbsolute& operator=(const MoveAbsolute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveAbsolute& operator=(MoveAbsolute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveAbsolute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveAbsolute* internal_default_instance() {
    return reinterpret_cast<const MoveAbsolute*>(
               &_MoveAbsolute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MoveAbsolute& a, MoveAbsolute& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveAbsolute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveAbsolute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveAbsolute* New() const final {
    return CreateMaybeMessage<MoveAbsolute>(nullptr);
  }

  MoveAbsolute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveAbsolute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveAbsolute& from);
  void MergeFrom(const MoveAbsolute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveAbsolute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.MoveAbsolute";
  }
  protected:
  explicit MoveAbsolute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kAxisFieldNumber = 1,
    kEnableFieldNumber = 2,
    kContinuousUpdateFieldNumber = 8,
    kVelocityFieldNumber = 4,
    kAccelerationFieldNumber = 5,
    kDecerelationFieldNumber = 6,
    kJerkFieldNumber = 7,
  };
  // double Position = 3;
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // int32 Axis = 1;
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // bool ContinuousUpdate = 8;
  void clear_continuousupdate();
  bool continuousupdate() const;
  void set_continuousupdate(bool value);
  private:
  bool _internal_continuousupdate() const;
  void _internal_set_continuousupdate(bool value);
  public:

  // double Velocity = 4;
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);
  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);
  public:

  // double Acceleration = 5;
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);
  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);
  public:

  // double Decerelation = 6;
  void clear_decerelation();
  double decerelation() const;
  void set_decerelation(double value);
  private:
  double _internal_decerelation() const;
  void _internal_set_decerelation(double value);
  public:

  // double Jerk = 7;
  void clear_jerk();
  double jerk() const;
  void set_jerk(double value);
  private:
  double _internal_jerk() const;
  void _internal_set_jerk(double value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.MoveAbsolute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double position_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  bool enable_;
  bool continuousupdate_;
  double velocity_;
  double acceleration_;
  double decerelation_;
  double jerk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class SetPostion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.SetPostion) */ {
 public:
  inline SetPostion() : SetPostion(nullptr) {}
  virtual ~SetPostion();

  SetPostion(const SetPostion& from);
  SetPostion(SetPostion&& from) noexcept
    : SetPostion() {
    *this = ::std::move(from);
  }

  inline SetPostion& operator=(const SetPostion& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPostion& operator=(SetPostion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPostion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPostion* internal_default_instance() {
    return reinterpret_cast<const SetPostion*>(
               &_SetPostion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetPostion& a, SetPostion& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPostion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPostion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPostion* New() const final {
    return CreateMaybeMessage<SetPostion>(nullptr);
  }

  SetPostion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPostion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPostion& from);
  void MergeFrom(const SetPostion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPostion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.SetPostion";
  }
  protected:
  explicit SetPostion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisFieldNumber = 1,
    kExecuteFieldNumber = 2,
    kPositionFieldNumber = 3,
    kRelativeFieldNumber = 4,
  };
  // int32 Axis = 1;
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Execute = 2;
  void clear_execute();
  bool execute() const;
  void set_execute(bool value);
  private:
  bool _internal_execute() const;
  void _internal_set_execute(bool value);
  public:

  // double Position = 3;
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // double Relative = 4;
  void clear_relative();
  double relative() const;
  void set_relative(double value);
  private:
  double _internal_relative() const;
  void _internal_set_relative(double value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.SetPostion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  bool execute_;
  double position_;
  double relative_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class MoveContinuousAbsolute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.MoveContinuousAbsolute) */ {
 public:
  inline MoveContinuousAbsolute() : MoveContinuousAbsolute(nullptr) {}
  virtual ~MoveContinuousAbsolute();

  MoveContinuousAbsolute(const MoveContinuousAbsolute& from);
  MoveContinuousAbsolute(MoveContinuousAbsolute&& from) noexcept
    : MoveContinuousAbsolute() {
    *this = ::std::move(from);
  }

  inline MoveContinuousAbsolute& operator=(const MoveContinuousAbsolute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveContinuousAbsolute& operator=(MoveContinuousAbsolute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveContinuousAbsolute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveContinuousAbsolute* internal_default_instance() {
    return reinterpret_cast<const MoveContinuousAbsolute*>(
               &_MoveContinuousAbsolute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MoveContinuousAbsolute& a, MoveContinuousAbsolute& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveContinuousAbsolute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveContinuousAbsolute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveContinuousAbsolute* New() const final {
    return CreateMaybeMessage<MoveContinuousAbsolute>(nullptr);
  }

  MoveContinuousAbsolute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveContinuousAbsolute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveContinuousAbsolute& from);
  void MergeFrom(const MoveContinuousAbsolute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveContinuousAbsolute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.MoveContinuousAbsolute";
  }
  protected:
  explicit MoveContinuousAbsolute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kAxisFieldNumber = 1,
    kEnableFieldNumber = 2,
    kContinuousUpdateFieldNumber = 8,
    kVelocityFieldNumber = 4,
    kAccelerationFieldNumber = 5,
    kDecerelationFieldNumber = 6,
    kJerkFieldNumber = 7,
    kEndVelocityFieldNumber = 9,
  };
  // double Position = 3;
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // int32 Axis = 1;
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Enable = 2;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // bool ContinuousUpdate = 8;
  void clear_continuousupdate();
  bool continuousupdate() const;
  void set_continuousupdate(bool value);
  private:
  bool _internal_continuousupdate() const;
  void _internal_set_continuousupdate(bool value);
  public:

  // double Velocity = 4;
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);
  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);
  public:

  // double Acceleration = 5;
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);
  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);
  public:

  // double Decerelation = 6;
  void clear_decerelation();
  double decerelation() const;
  void set_decerelation(double value);
  private:
  double _internal_decerelation() const;
  void _internal_set_decerelation(double value);
  public:

  // double Jerk = 7;
  void clear_jerk();
  double jerk() const;
  void set_jerk(double value);
  private:
  double _internal_jerk() const;
  void _internal_set_jerk(double value);
  public:

  // double EndVelocity = 9;
  void clear_endvelocity();
  double endvelocity() const;
  void set_endvelocity(double value);
  private:
  double _internal_endvelocity() const;
  void _internal_set_endvelocity(double value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.MoveContinuousAbsolute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double position_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  bool enable_;
  bool continuousupdate_;
  double velocity_;
  double acceleration_;
  double decerelation_;
  double jerk_;
  double endvelocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class ReadActualPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.ReadActualPosition) */ {
 public:
  inline ReadActualPosition() : ReadActualPosition(nullptr) {}
  virtual ~ReadActualPosition();

  ReadActualPosition(const ReadActualPosition& from);
  ReadActualPosition(ReadActualPosition&& from) noexcept
    : ReadActualPosition() {
    *this = ::std::move(from);
  }

  inline ReadActualPosition& operator=(const ReadActualPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadActualPosition& operator=(ReadActualPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadActualPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadActualPosition* internal_default_instance() {
    return reinterpret_cast<const ReadActualPosition*>(
               &_ReadActualPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadActualPosition& a, ReadActualPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadActualPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadActualPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadActualPosition* New() const final {
    return CreateMaybeMessage<ReadActualPosition>(nullptr);
  }

  ReadActualPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadActualPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadActualPosition& from);
  void MergeFrom(const ReadActualPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadActualPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.ReadActualPosition";
  }
  protected:
  explicit ReadActualPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesFieldNumber = 1,
  };
  // repeated int32 Axes = 1 [packed = true];
  int axes_size() const;
  private:
  int _internal_axes_size() const;
  public:
  void clear_axes();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_axes() const;
  void _internal_add_axes(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_axes();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 axes(int index) const;
  void set_axes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_axes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      axes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_axes();

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.ReadActualPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > axes_;
  mutable std::atomic<int> _axes_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class AxesPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.AxesPosition) */ {
 public:
  inline AxesPosition() : AxesPosition(nullptr) {}
  virtual ~AxesPosition();

  AxesPosition(const AxesPosition& from);
  AxesPosition(AxesPosition&& from) noexcept
    : AxesPosition() {
    *this = ::std::move(from);
  }

  inline AxesPosition& operator=(const AxesPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AxesPosition& operator=(AxesPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AxesPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AxesPosition* internal_default_instance() {
    return reinterpret_cast<const AxesPosition*>(
               &_AxesPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AxesPosition& a, AxesPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(AxesPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AxesPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AxesPosition* New() const final {
    return CreateMaybeMessage<AxesPosition>(nullptr);
  }

  AxesPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AxesPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AxesPosition& from);
  void MergeFrom(const AxesPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxesPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.AxesPosition";
  }
  protected:
  explicit AxesPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 1,
  };
  // repeated int32 Positions = 1 [packed = true];
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_positions() const;
  void _internal_add_positions(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_positions();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 positions(int index) const;
  void set_positions(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_positions(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      positions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_positions();

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.AxesPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > positions_;
  mutable std::atomic<int> _positions_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class MoveLinearRelative PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.MoveLinearRelative) */ {
 public:
  inline MoveLinearRelative() : MoveLinearRelative(nullptr) {}
  virtual ~MoveLinearRelative();

  MoveLinearRelative(const MoveLinearRelative& from);
  MoveLinearRelative(MoveLinearRelative&& from) noexcept
    : MoveLinearRelative() {
    *this = ::std::move(from);
  }

  inline MoveLinearRelative& operator=(const MoveLinearRelative& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveLinearRelative& operator=(MoveLinearRelative&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MoveLinearRelative& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveLinearRelative* internal_default_instance() {
    return reinterpret_cast<const MoveLinearRelative*>(
               &_MoveLinearRelative_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MoveLinearRelative& a, MoveLinearRelative& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveLinearRelative* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveLinearRelative* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MoveLinearRelative* New() const final {
    return CreateMaybeMessage<MoveLinearRelative>(nullptr);
  }

  MoveLinearRelative* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MoveLinearRelative>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MoveLinearRelative& from);
  void MergeFrom(const MoveLinearRelative& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveLinearRelative* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.MoveLinearRelative";
  }
  protected:
  explicit MoveLinearRelative(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 3,
    kAxesGroupFieldNumber = 1,
    kExecuteFieldNumber = 2,
    kVelocityFieldNumber = 4,
    kAccelerationFieldNumber = 5,
    kDecelerationFieldNumber = 6,
    kJerkFieldNumber = 7,
  };
  // repeated double Distance = 3 [packed = true];
  int distance_size() const;
  private:
  int _internal_distance_size() const;
  public:
  void clear_distance();
  private:
  double _internal_distance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_distance() const;
  void _internal_add_distance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_distance();
  public:
  double distance(int index) const;
  void set_distance(int index, double value);
  void add_distance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      distance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_distance();

  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Execute = 2;
  void clear_execute();
  bool execute() const;
  void set_execute(bool value);
  private:
  bool _internal_execute() const;
  void _internal_set_execute(bool value);
  public:

  // double Velocity = 4;
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);
  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);
  public:

  // double Acceleration = 5;
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);
  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);
  public:

  // double Deceleration = 6;
  void clear_deceleration();
  double deceleration() const;
  void set_deceleration(double value);
  private:
  double _internal_deceleration() const;
  void _internal_set_deceleration(double value);
  public:

  // double Jerk = 7;
  void clear_jerk();
  double jerk() const;
  void set_jerk(double value);
  private:
  double _internal_jerk() const;
  void _internal_set_jerk(double value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.MoveLinearRelative)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > distance_;
  mutable std::atomic<int> _distance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  bool execute_;
  double velocity_;
  double acceleration_;
  double deceleration_;
  double jerk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class AddAxisToGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.AddAxisToGroup) */ {
 public:
  inline AddAxisToGroup() : AddAxisToGroup(nullptr) {}
  virtual ~AddAxisToGroup();

  AddAxisToGroup(const AddAxisToGroup& from);
  AddAxisToGroup(AddAxisToGroup&& from) noexcept
    : AddAxisToGroup() {
    *this = ::std::move(from);
  }

  inline AddAxisToGroup& operator=(const AddAxisToGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAxisToGroup& operator=(AddAxisToGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddAxisToGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddAxisToGroup* internal_default_instance() {
    return reinterpret_cast<const AddAxisToGroup*>(
               &_AddAxisToGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AddAxisToGroup& a, AddAxisToGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAxisToGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAxisToGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddAxisToGroup* New() const final {
    return CreateMaybeMessage<AddAxisToGroup>(nullptr);
  }

  AddAxisToGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddAxisToGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddAxisToGroup& from);
  void MergeFrom(const AddAxisToGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddAxisToGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.AddAxisToGroup";
  }
  protected:
  explicit AddAxisToGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesGroupFieldNumber = 1,
    kAxisFieldNumber = 2,
    kExecuteFieldNumber = 3,
    kIdentInGroupFieldNumber = 4,
  };
  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Axis = 2;
  void clear_axis();
  ::PROTOBUF_NAMESPACE_ID::int32 axis() const;
  void set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axis() const;
  void _internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Execute = 3;
  void clear_execute();
  bool execute() const;
  void set_execute(bool value);
  private:
  bool _internal_execute() const;
  void _internal_set_execute(bool value);
  public:

  // int32 IdentInGroup = 4;
  void clear_identingroup();
  ::PROTOBUF_NAMESPACE_ID::int32 identingroup() const;
  void set_identingroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_identingroup() const;
  void _internal_set_identingroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.AddAxisToGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  ::PROTOBUF_NAMESPACE_ID::int32 axis_;
  bool execute_;
  ::PROTOBUF_NAMESPACE_ID::int32 identingroup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class RemoveAxisFromGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.RemoveAxisFromGroup) */ {
 public:
  inline RemoveAxisFromGroup() : RemoveAxisFromGroup(nullptr) {}
  virtual ~RemoveAxisFromGroup();

  RemoveAxisFromGroup(const RemoveAxisFromGroup& from);
  RemoveAxisFromGroup(RemoveAxisFromGroup&& from) noexcept
    : RemoveAxisFromGroup() {
    *this = ::std::move(from);
  }

  inline RemoveAxisFromGroup& operator=(const RemoveAxisFromGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAxisFromGroup& operator=(RemoveAxisFromGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveAxisFromGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveAxisFromGroup* internal_default_instance() {
    return reinterpret_cast<const RemoveAxisFromGroup*>(
               &_RemoveAxisFromGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RemoveAxisFromGroup& a, RemoveAxisFromGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAxisFromGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveAxisFromGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveAxisFromGroup* New() const final {
    return CreateMaybeMessage<RemoveAxisFromGroup>(nullptr);
  }

  RemoveAxisFromGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveAxisFromGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveAxisFromGroup& from);
  void MergeFrom(const RemoveAxisFromGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAxisFromGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.RemoveAxisFromGroup";
  }
  protected:
  explicit RemoveAxisFromGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesGroupFieldNumber = 1,
    kExecuteFieldNumber = 2,
    kIdentInGroupFieldNumber = 3,
  };
  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Execute = 2;
  void clear_execute();
  bool execute() const;
  void set_execute(bool value);
  private:
  bool _internal_execute() const;
  void _internal_set_execute(bool value);
  public:

  // int32 IdentInGroup = 3;
  void clear_identingroup();
  ::PROTOBUF_NAMESPACE_ID::int32 identingroup() const;
  void set_identingroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_identingroup() const;
  void _internal_set_identingroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.RemoveAxisFromGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  bool execute_;
  ::PROTOBUF_NAMESPACE_ID::int32 identingroup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class GroupEnable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.GroupEnable) */ {
 public:
  inline GroupEnable() : GroupEnable(nullptr) {}
  virtual ~GroupEnable();

  GroupEnable(const GroupEnable& from);
  GroupEnable(GroupEnable&& from) noexcept
    : GroupEnable() {
    *this = ::std::move(from);
  }

  inline GroupEnable& operator=(const GroupEnable& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupEnable& operator=(GroupEnable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupEnable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupEnable* internal_default_instance() {
    return reinterpret_cast<const GroupEnable*>(
               &_GroupEnable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GroupEnable& a, GroupEnable& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupEnable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupEnable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupEnable* New() const final {
    return CreateMaybeMessage<GroupEnable>(nullptr);
  }

  GroupEnable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupEnable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupEnable& from);
  void MergeFrom(const GroupEnable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupEnable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.GroupEnable";
  }
  protected:
  explicit GroupEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesGroupFieldNumber = 1,
    kExecuteFieldNumber = 2,
    kDeviceNumFieldNumber = 3,
  };
  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Execute = 2;
  void clear_execute();
  bool execute() const;
  void set_execute(bool value);
  private:
  bool _internal_execute() const;
  void _internal_set_execute(bool value);
  public:

  // int32 DeviceNum = 3;
  void clear_devicenum();
  ::PROTOBUF_NAMESPACE_ID::int32 devicenum() const;
  void set_devicenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_devicenum() const;
  void _internal_set_devicenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.GroupEnable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  bool execute_;
  ::PROTOBUF_NAMESPACE_ID::int32 devicenum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class GroupDisable PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.GroupDisable) */ {
 public:
  inline GroupDisable() : GroupDisable(nullptr) {}
  virtual ~GroupDisable();

  GroupDisable(const GroupDisable& from);
  GroupDisable(GroupDisable&& from) noexcept
    : GroupDisable() {
    *this = ::std::move(from);
  }

  inline GroupDisable& operator=(const GroupDisable& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupDisable& operator=(GroupDisable&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupDisable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupDisable* internal_default_instance() {
    return reinterpret_cast<const GroupDisable*>(
               &_GroupDisable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GroupDisable& a, GroupDisable& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupDisable* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupDisable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupDisable* New() const final {
    return CreateMaybeMessage<GroupDisable>(nullptr);
  }

  GroupDisable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupDisable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupDisable& from);
  void MergeFrom(const GroupDisable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupDisable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.GroupDisable";
  }
  protected:
  explicit GroupDisable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesGroupFieldNumber = 1,
    kExecuteFieldNumber = 2,
  };
  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Execute = 2;
  void clear_execute();
  bool execute() const;
  void set_execute(bool value);
  private:
  bool _internal_execute() const;
  void _internal_set_execute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.GroupDisable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  bool execute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class UngroupAllAxes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.UngroupAllAxes) */ {
 public:
  inline UngroupAllAxes() : UngroupAllAxes(nullptr) {}
  virtual ~UngroupAllAxes();

  UngroupAllAxes(const UngroupAllAxes& from);
  UngroupAllAxes(UngroupAllAxes&& from) noexcept
    : UngroupAllAxes() {
    *this = ::std::move(from);
  }

  inline UngroupAllAxes& operator=(const UngroupAllAxes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UngroupAllAxes& operator=(UngroupAllAxes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UngroupAllAxes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UngroupAllAxes* internal_default_instance() {
    return reinterpret_cast<const UngroupAllAxes*>(
               &_UngroupAllAxes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UngroupAllAxes& a, UngroupAllAxes& b) {
    a.Swap(&b);
  }
  inline void Swap(UngroupAllAxes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UngroupAllAxes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UngroupAllAxes* New() const final {
    return CreateMaybeMessage<UngroupAllAxes>(nullptr);
  }

  UngroupAllAxes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UngroupAllAxes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UngroupAllAxes& from);
  void MergeFrom(const UngroupAllAxes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UngroupAllAxes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.UngroupAllAxes";
  }
  protected:
  explicit UngroupAllAxes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesGroupFieldNumber = 1,
    kExecuteFieldNumber = 2,
  };
  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Execute = 2;
  void clear_execute();
  bool execute() const;
  void set_execute(bool value);
  private:
  bool _internal_execute() const;
  void _internal_set_execute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.UngroupAllAxes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  bool execute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class SetKinTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.SetKinTransform) */ {
 public:
  inline SetKinTransform() : SetKinTransform(nullptr) {}
  virtual ~SetKinTransform();

  SetKinTransform(const SetKinTransform& from);
  SetKinTransform(SetKinTransform&& from) noexcept
    : SetKinTransform() {
    *this = ::std::move(from);
  }

  inline SetKinTransform& operator=(const SetKinTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetKinTransform& operator=(SetKinTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetKinTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetKinTransform* internal_default_instance() {
    return reinterpret_cast<const SetKinTransform*>(
               &_SetKinTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetKinTransform& a, SetKinTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(SetKinTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetKinTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetKinTransform* New() const final {
    return CreateMaybeMessage<SetKinTransform>(nullptr);
  }

  SetKinTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetKinTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetKinTransform& from);
  void MergeFrom(const SetKinTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetKinTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.SetKinTransform";
  }
  protected:
  explicit SetKinTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesGroupFieldNumber = 1,
  };
  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.SetKinTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class SetCoordinateTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.SetCoordinateTransform) */ {
 public:
  inline SetCoordinateTransform() : SetCoordinateTransform(nullptr) {}
  virtual ~SetCoordinateTransform();

  SetCoordinateTransform(const SetCoordinateTransform& from);
  SetCoordinateTransform(SetCoordinateTransform&& from) noexcept
    : SetCoordinateTransform() {
    *this = ::std::move(from);
  }

  inline SetCoordinateTransform& operator=(const SetCoordinateTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCoordinateTransform& operator=(SetCoordinateTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCoordinateTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCoordinateTransform* internal_default_instance() {
    return reinterpret_cast<const SetCoordinateTransform*>(
               &_SetCoordinateTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetCoordinateTransform& a, SetCoordinateTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCoordinateTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCoordinateTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCoordinateTransform* New() const final {
    return CreateMaybeMessage<SetCoordinateTransform>(nullptr);
  }

  SetCoordinateTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCoordinateTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCoordinateTransform& from);
  void MergeFrom(const SetCoordinateTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCoordinateTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.SetCoordinateTransform";
  }
  protected:
  explicit SetCoordinateTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesGroupFieldNumber = 1,
  };
  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.SetCoordinateTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class SetCartesianTransform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.SetCartesianTransform) */ {
 public:
  inline SetCartesianTransform() : SetCartesianTransform(nullptr) {}
  virtual ~SetCartesianTransform();

  SetCartesianTransform(const SetCartesianTransform& from);
  SetCartesianTransform(SetCartesianTransform&& from) noexcept
    : SetCartesianTransform() {
    *this = ::std::move(from);
  }

  inline SetCartesianTransform& operator=(const SetCartesianTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCartesianTransform& operator=(SetCartesianTransform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCartesianTransform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCartesianTransform* internal_default_instance() {
    return reinterpret_cast<const SetCartesianTransform*>(
               &_SetCartesianTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetCartesianTransform& a, SetCartesianTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCartesianTransform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCartesianTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCartesianTransform* New() const final {
    return CreateMaybeMessage<SetCartesianTransform>(nullptr);
  }

  SetCartesianTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCartesianTransform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCartesianTransform& from);
  void MergeFrom(const SetCartesianTransform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCartesianTransform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.SetCartesianTransform";
  }
  protected:
  explicit SetCartesianTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesGroupFieldNumber = 1,
  };
  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.SetCartesianTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class GroupInterrupt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.GroupInterrupt) */ {
 public:
  inline GroupInterrupt() : GroupInterrupt(nullptr) {}
  virtual ~GroupInterrupt();

  GroupInterrupt(const GroupInterrupt& from);
  GroupInterrupt(GroupInterrupt&& from) noexcept
    : GroupInterrupt() {
    *this = ::std::move(from);
  }

  inline GroupInterrupt& operator=(const GroupInterrupt& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupInterrupt& operator=(GroupInterrupt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupInterrupt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupInterrupt* internal_default_instance() {
    return reinterpret_cast<const GroupInterrupt*>(
               &_GroupInterrupt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GroupInterrupt& a, GroupInterrupt& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupInterrupt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupInterrupt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupInterrupt* New() const final {
    return CreateMaybeMessage<GroupInterrupt>(nullptr);
  }

  GroupInterrupt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupInterrupt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupInterrupt& from);
  void MergeFrom(const GroupInterrupt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupInterrupt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.GroupInterrupt";
  }
  protected:
  explicit GroupInterrupt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesGroupFieldNumber = 1,
    kExecuteFieldNumber = 2,
    kDecelerationFieldNumber = 3,
    kJerkFieldNumber = 4,
  };
  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Execute = 2;
  void clear_execute();
  bool execute() const;
  void set_execute(bool value);
  private:
  bool _internal_execute() const;
  void _internal_set_execute(bool value);
  public:

  // double Deceleration = 3;
  void clear_deceleration();
  double deceleration() const;
  void set_deceleration(double value);
  private:
  double _internal_deceleration() const;
  void _internal_set_deceleration(double value);
  public:

  // double jerk = 4;
  void clear_jerk();
  double jerk() const;
  void set_jerk(double value);
  private:
  double _internal_jerk() const;
  void _internal_set_jerk(double value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.GroupInterrupt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  bool execute_;
  double deceleration_;
  double jerk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class GroupContinue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.GroupContinue) */ {
 public:
  inline GroupContinue() : GroupContinue(nullptr) {}
  virtual ~GroupContinue();

  GroupContinue(const GroupContinue& from);
  GroupContinue(GroupContinue&& from) noexcept
    : GroupContinue() {
    *this = ::std::move(from);
  }

  inline GroupContinue& operator=(const GroupContinue& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupContinue& operator=(GroupContinue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupContinue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupContinue* internal_default_instance() {
    return reinterpret_cast<const GroupContinue*>(
               &_GroupContinue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GroupContinue& a, GroupContinue& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupContinue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupContinue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupContinue* New() const final {
    return CreateMaybeMessage<GroupContinue>(nullptr);
  }

  GroupContinue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupContinue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupContinue& from);
  void MergeFrom(const GroupContinue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupContinue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.GroupContinue";
  }
  protected:
  explicit GroupContinue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesGroupFieldNumber = 1,
    kExecuteFieldNumber = 2,
  };
  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Execute = 2;
  void clear_execute();
  bool execute() const;
  void set_execute(bool value);
  private:
  bool _internal_execute() const;
  void _internal_set_execute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.GroupContinue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  bool execute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class GroupStop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.GroupStop) */ {
 public:
  inline GroupStop() : GroupStop(nullptr) {}
  virtual ~GroupStop();

  GroupStop(const GroupStop& from);
  GroupStop(GroupStop&& from) noexcept
    : GroupStop() {
    *this = ::std::move(from);
  }

  inline GroupStop& operator=(const GroupStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupStop& operator=(GroupStop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupStop* internal_default_instance() {
    return reinterpret_cast<const GroupStop*>(
               &_GroupStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GroupStop& a, GroupStop& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupStop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupStop* New() const final {
    return CreateMaybeMessage<GroupStop>(nullptr);
  }

  GroupStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupStop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupStop& from);
  void MergeFrom(const GroupStop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupStop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.GroupStop";
  }
  protected:
  explicit GroupStop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesGroupFieldNumber = 1,
    kExecuteFieldNumber = 2,
    kDecelerationFieldNumber = 3,
    kJerkFieldNumber = 4,
  };
  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Execute = 2;
  void clear_execute();
  bool execute() const;
  void set_execute(bool value);
  private:
  bool _internal_execute() const;
  void _internal_set_execute(bool value);
  public:

  // double Deceleration = 3;
  void clear_deceleration();
  double deceleration() const;
  void set_deceleration(double value);
  private:
  double _internal_deceleration() const;
  void _internal_set_deceleration(double value);
  public:

  // double jerk = 4;
  void clear_jerk();
  double jerk() const;
  void set_jerk(double value);
  private:
  double _internal_jerk() const;
  void _internal_set_jerk(double value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.GroupStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  bool execute_;
  double deceleration_;
  double jerk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// -------------------------------------------------------------------

class GroupSetPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SoftKernelHmiTest.GroupSetPosition) */ {
 public:
  inline GroupSetPosition() : GroupSetPosition(nullptr) {}
  virtual ~GroupSetPosition();

  GroupSetPosition(const GroupSetPosition& from);
  GroupSetPosition(GroupSetPosition&& from) noexcept
    : GroupSetPosition() {
    *this = ::std::move(from);
  }

  inline GroupSetPosition& operator=(const GroupSetPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupSetPosition& operator=(GroupSetPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupSetPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupSetPosition* internal_default_instance() {
    return reinterpret_cast<const GroupSetPosition*>(
               &_GroupSetPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GroupSetPosition& a, GroupSetPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupSetPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupSetPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupSetPosition* New() const final {
    return CreateMaybeMessage<GroupSetPosition>(nullptr);
  }

  GroupSetPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupSetPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupSetPosition& from);
  void MergeFrom(const GroupSetPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupSetPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SoftKernelHmiTest.GroupSetPosition";
  }
  protected:
  explicit GroupSetPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_McLib_2eproto);
    return ::descriptor_table_McLib_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 2,
    kAxesGroupFieldNumber = 1,
    kRelativeFieldNumber = 3,
  };
  // repeated double Distance = 2 [packed = true];
  int distance_size() const;
  private:
  int _internal_distance_size() const;
  public:
  void clear_distance();
  private:
  double _internal_distance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_distance() const;
  void _internal_add_distance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_distance();
  public:
  double distance(int index) const;
  void set_distance(int index, double value);
  void add_distance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      distance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_distance();

  // int32 AxesGroup = 1;
  void clear_axesgroup();
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup() const;
  void set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_axesgroup() const;
  void _internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Relative = 3;
  void clear_relative();
  bool relative() const;
  void set_relative(bool value);
  private:
  bool _internal_relative() const;
  void _internal_set_relative(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SoftKernelHmiTest.GroupSetPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > distance_;
  mutable std::atomic<int> _distance_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 axesgroup_;
  bool relative_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_McLib_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// McResult

// int32 result = 1;
inline void McResult::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 McResult::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 McResult::result() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.McResult.result)
  return _internal_result();
}
inline void McResult::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void McResult::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.McResult.result)
}

// -------------------------------------------------------------------

// Power

// int32 Axis = 1;
inline void Power::clear_axis() {
  axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Power::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Power::axis() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.Power.Axis)
  return _internal_axis();
}
inline void Power::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_ = value;
}
inline void Power::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.Power.Axis)
}

// bool Enable = 2;
inline void Power::clear_enable() {
  enable_ = false;
}
inline bool Power::_internal_enable() const {
  return enable_;
}
inline bool Power::enable() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.Power.Enable)
  return _internal_enable();
}
inline void Power::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void Power::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.Power.Enable)
}

// bool EnablePositive = 3;
inline void Power::clear_enablepositive() {
  enablepositive_ = false;
}
inline bool Power::_internal_enablepositive() const {
  return enablepositive_;
}
inline bool Power::enablepositive() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.Power.EnablePositive)
  return _internal_enablepositive();
}
inline void Power::_internal_set_enablepositive(bool value) {
  
  enablepositive_ = value;
}
inline void Power::set_enablepositive(bool value) {
  _internal_set_enablepositive(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.Power.EnablePositive)
}

// bool EnableNegative = 4;
inline void Power::clear_enablenegative() {
  enablenegative_ = false;
}
inline bool Power::_internal_enablenegative() const {
  return enablenegative_;
}
inline bool Power::enablenegative() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.Power.EnableNegative)
  return _internal_enablenegative();
}
inline void Power::_internal_set_enablenegative(bool value) {
  
  enablenegative_ = value;
}
inline void Power::set_enablenegative(bool value) {
  _internal_set_enablenegative(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.Power.EnableNegative)
}

// -------------------------------------------------------------------

// Stop

// int32 Axis = 1;
inline void Stop::clear_axis() {
  axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stop::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stop::axis() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.Stop.Axis)
  return _internal_axis();
}
inline void Stop::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_ = value;
}
inline void Stop::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.Stop.Axis)
}

// bool Enable = 2;
inline void Stop::clear_enable() {
  enable_ = false;
}
inline bool Stop::_internal_enable() const {
  return enable_;
}
inline bool Stop::enable() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.Stop.Enable)
  return _internal_enable();
}
inline void Stop::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void Stop::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.Stop.Enable)
}

// double Deceleration = 3;
inline void Stop::clear_deceleration() {
  deceleration_ = 0;
}
inline double Stop::_internal_deceleration() const {
  return deceleration_;
}
inline double Stop::deceleration() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.Stop.Deceleration)
  return _internal_deceleration();
}
inline void Stop::_internal_set_deceleration(double value) {
  
  deceleration_ = value;
}
inline void Stop::set_deceleration(double value) {
  _internal_set_deceleration(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.Stop.Deceleration)
}

// double Jerk = 4;
inline void Stop::clear_jerk() {
  jerk_ = 0;
}
inline double Stop::_internal_jerk() const {
  return jerk_;
}
inline double Stop::jerk() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.Stop.Jerk)
  return _internal_jerk();
}
inline void Stop::_internal_set_jerk(double value) {
  
  jerk_ = value;
}
inline void Stop::set_jerk(double value) {
  _internal_set_jerk(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.Stop.Jerk)
}

// -------------------------------------------------------------------

// MoveAbsolute

// int32 Axis = 1;
inline void MoveAbsolute::clear_axis() {
  axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveAbsolute::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveAbsolute::axis() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveAbsolute.Axis)
  return _internal_axis();
}
inline void MoveAbsolute::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_ = value;
}
inline void MoveAbsolute::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveAbsolute.Axis)
}

// bool Enable = 2;
inline void MoveAbsolute::clear_enable() {
  enable_ = false;
}
inline bool MoveAbsolute::_internal_enable() const {
  return enable_;
}
inline bool MoveAbsolute::enable() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveAbsolute.Enable)
  return _internal_enable();
}
inline void MoveAbsolute::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void MoveAbsolute::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveAbsolute.Enable)
}

// bool ContinuousUpdate = 8;
inline void MoveAbsolute::clear_continuousupdate() {
  continuousupdate_ = false;
}
inline bool MoveAbsolute::_internal_continuousupdate() const {
  return continuousupdate_;
}
inline bool MoveAbsolute::continuousupdate() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveAbsolute.ContinuousUpdate)
  return _internal_continuousupdate();
}
inline void MoveAbsolute::_internal_set_continuousupdate(bool value) {
  
  continuousupdate_ = value;
}
inline void MoveAbsolute::set_continuousupdate(bool value) {
  _internal_set_continuousupdate(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveAbsolute.ContinuousUpdate)
}

// double Position = 3;
inline void MoveAbsolute::clear_position() {
  position_ = 0;
}
inline double MoveAbsolute::_internal_position() const {
  return position_;
}
inline double MoveAbsolute::position() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveAbsolute.Position)
  return _internal_position();
}
inline void MoveAbsolute::_internal_set_position(double value) {
  
  position_ = value;
}
inline void MoveAbsolute::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveAbsolute.Position)
}

// double Velocity = 4;
inline void MoveAbsolute::clear_velocity() {
  velocity_ = 0;
}
inline double MoveAbsolute::_internal_velocity() const {
  return velocity_;
}
inline double MoveAbsolute::velocity() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveAbsolute.Velocity)
  return _internal_velocity();
}
inline void MoveAbsolute::_internal_set_velocity(double value) {
  
  velocity_ = value;
}
inline void MoveAbsolute::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveAbsolute.Velocity)
}

// double Acceleration = 5;
inline void MoveAbsolute::clear_acceleration() {
  acceleration_ = 0;
}
inline double MoveAbsolute::_internal_acceleration() const {
  return acceleration_;
}
inline double MoveAbsolute::acceleration() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveAbsolute.Acceleration)
  return _internal_acceleration();
}
inline void MoveAbsolute::_internal_set_acceleration(double value) {
  
  acceleration_ = value;
}
inline void MoveAbsolute::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveAbsolute.Acceleration)
}

// double Decerelation = 6;
inline void MoveAbsolute::clear_decerelation() {
  decerelation_ = 0;
}
inline double MoveAbsolute::_internal_decerelation() const {
  return decerelation_;
}
inline double MoveAbsolute::decerelation() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveAbsolute.Decerelation)
  return _internal_decerelation();
}
inline void MoveAbsolute::_internal_set_decerelation(double value) {
  
  decerelation_ = value;
}
inline void MoveAbsolute::set_decerelation(double value) {
  _internal_set_decerelation(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveAbsolute.Decerelation)
}

// double Jerk = 7;
inline void MoveAbsolute::clear_jerk() {
  jerk_ = 0;
}
inline double MoveAbsolute::_internal_jerk() const {
  return jerk_;
}
inline double MoveAbsolute::jerk() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveAbsolute.Jerk)
  return _internal_jerk();
}
inline void MoveAbsolute::_internal_set_jerk(double value) {
  
  jerk_ = value;
}
inline void MoveAbsolute::set_jerk(double value) {
  _internal_set_jerk(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveAbsolute.Jerk)
}

// -------------------------------------------------------------------

// SetPostion

// int32 Axis = 1;
inline void SetPostion::clear_axis() {
  axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPostion::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetPostion::axis() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.SetPostion.Axis)
  return _internal_axis();
}
inline void SetPostion::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_ = value;
}
inline void SetPostion::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.SetPostion.Axis)
}

// bool Execute = 2;
inline void SetPostion::clear_execute() {
  execute_ = false;
}
inline bool SetPostion::_internal_execute() const {
  return execute_;
}
inline bool SetPostion::execute() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.SetPostion.Execute)
  return _internal_execute();
}
inline void SetPostion::_internal_set_execute(bool value) {
  
  execute_ = value;
}
inline void SetPostion::set_execute(bool value) {
  _internal_set_execute(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.SetPostion.Execute)
}

// double Position = 3;
inline void SetPostion::clear_position() {
  position_ = 0;
}
inline double SetPostion::_internal_position() const {
  return position_;
}
inline double SetPostion::position() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.SetPostion.Position)
  return _internal_position();
}
inline void SetPostion::_internal_set_position(double value) {
  
  position_ = value;
}
inline void SetPostion::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.SetPostion.Position)
}

// double Relative = 4;
inline void SetPostion::clear_relative() {
  relative_ = 0;
}
inline double SetPostion::_internal_relative() const {
  return relative_;
}
inline double SetPostion::relative() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.SetPostion.Relative)
  return _internal_relative();
}
inline void SetPostion::_internal_set_relative(double value) {
  
  relative_ = value;
}
inline void SetPostion::set_relative(double value) {
  _internal_set_relative(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.SetPostion.Relative)
}

// -------------------------------------------------------------------

// MoveContinuousAbsolute

// int32 Axis = 1;
inline void MoveContinuousAbsolute::clear_axis() {
  axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveContinuousAbsolute::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveContinuousAbsolute::axis() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveContinuousAbsolute.Axis)
  return _internal_axis();
}
inline void MoveContinuousAbsolute::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_ = value;
}
inline void MoveContinuousAbsolute::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveContinuousAbsolute.Axis)
}

// bool Enable = 2;
inline void MoveContinuousAbsolute::clear_enable() {
  enable_ = false;
}
inline bool MoveContinuousAbsolute::_internal_enable() const {
  return enable_;
}
inline bool MoveContinuousAbsolute::enable() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveContinuousAbsolute.Enable)
  return _internal_enable();
}
inline void MoveContinuousAbsolute::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void MoveContinuousAbsolute::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveContinuousAbsolute.Enable)
}

// bool ContinuousUpdate = 8;
inline void MoveContinuousAbsolute::clear_continuousupdate() {
  continuousupdate_ = false;
}
inline bool MoveContinuousAbsolute::_internal_continuousupdate() const {
  return continuousupdate_;
}
inline bool MoveContinuousAbsolute::continuousupdate() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveContinuousAbsolute.ContinuousUpdate)
  return _internal_continuousupdate();
}
inline void MoveContinuousAbsolute::_internal_set_continuousupdate(bool value) {
  
  continuousupdate_ = value;
}
inline void MoveContinuousAbsolute::set_continuousupdate(bool value) {
  _internal_set_continuousupdate(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveContinuousAbsolute.ContinuousUpdate)
}

// double Position = 3;
inline void MoveContinuousAbsolute::clear_position() {
  position_ = 0;
}
inline double MoveContinuousAbsolute::_internal_position() const {
  return position_;
}
inline double MoveContinuousAbsolute::position() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveContinuousAbsolute.Position)
  return _internal_position();
}
inline void MoveContinuousAbsolute::_internal_set_position(double value) {
  
  position_ = value;
}
inline void MoveContinuousAbsolute::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveContinuousAbsolute.Position)
}

// double Velocity = 4;
inline void MoveContinuousAbsolute::clear_velocity() {
  velocity_ = 0;
}
inline double MoveContinuousAbsolute::_internal_velocity() const {
  return velocity_;
}
inline double MoveContinuousAbsolute::velocity() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveContinuousAbsolute.Velocity)
  return _internal_velocity();
}
inline void MoveContinuousAbsolute::_internal_set_velocity(double value) {
  
  velocity_ = value;
}
inline void MoveContinuousAbsolute::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveContinuousAbsolute.Velocity)
}

// double EndVelocity = 9;
inline void MoveContinuousAbsolute::clear_endvelocity() {
  endvelocity_ = 0;
}
inline double MoveContinuousAbsolute::_internal_endvelocity() const {
  return endvelocity_;
}
inline double MoveContinuousAbsolute::endvelocity() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveContinuousAbsolute.EndVelocity)
  return _internal_endvelocity();
}
inline void MoveContinuousAbsolute::_internal_set_endvelocity(double value) {
  
  endvelocity_ = value;
}
inline void MoveContinuousAbsolute::set_endvelocity(double value) {
  _internal_set_endvelocity(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveContinuousAbsolute.EndVelocity)
}

// double Acceleration = 5;
inline void MoveContinuousAbsolute::clear_acceleration() {
  acceleration_ = 0;
}
inline double MoveContinuousAbsolute::_internal_acceleration() const {
  return acceleration_;
}
inline double MoveContinuousAbsolute::acceleration() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveContinuousAbsolute.Acceleration)
  return _internal_acceleration();
}
inline void MoveContinuousAbsolute::_internal_set_acceleration(double value) {
  
  acceleration_ = value;
}
inline void MoveContinuousAbsolute::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveContinuousAbsolute.Acceleration)
}

// double Decerelation = 6;
inline void MoveContinuousAbsolute::clear_decerelation() {
  decerelation_ = 0;
}
inline double MoveContinuousAbsolute::_internal_decerelation() const {
  return decerelation_;
}
inline double MoveContinuousAbsolute::decerelation() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveContinuousAbsolute.Decerelation)
  return _internal_decerelation();
}
inline void MoveContinuousAbsolute::_internal_set_decerelation(double value) {
  
  decerelation_ = value;
}
inline void MoveContinuousAbsolute::set_decerelation(double value) {
  _internal_set_decerelation(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveContinuousAbsolute.Decerelation)
}

// double Jerk = 7;
inline void MoveContinuousAbsolute::clear_jerk() {
  jerk_ = 0;
}
inline double MoveContinuousAbsolute::_internal_jerk() const {
  return jerk_;
}
inline double MoveContinuousAbsolute::jerk() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveContinuousAbsolute.Jerk)
  return _internal_jerk();
}
inline void MoveContinuousAbsolute::_internal_set_jerk(double value) {
  
  jerk_ = value;
}
inline void MoveContinuousAbsolute::set_jerk(double value) {
  _internal_set_jerk(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveContinuousAbsolute.Jerk)
}

// -------------------------------------------------------------------

// ReadActualPosition

// repeated int32 Axes = 1 [packed = true];
inline int ReadActualPosition::_internal_axes_size() const {
  return axes_.size();
}
inline int ReadActualPosition::axes_size() const {
  return _internal_axes_size();
}
inline void ReadActualPosition::clear_axes() {
  axes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadActualPosition::_internal_axes(int index) const {
  return axes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadActualPosition::axes(int index) const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.ReadActualPosition.Axes)
  return _internal_axes(index);
}
inline void ReadActualPosition::set_axes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  axes_.Set(index, value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.ReadActualPosition.Axes)
}
inline void ReadActualPosition::_internal_add_axes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  axes_.Add(value);
}
inline void ReadActualPosition::add_axes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_axes(value);
  // @@protoc_insertion_point(field_add:SoftKernelHmiTest.ReadActualPosition.Axes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ReadActualPosition::_internal_axes() const {
  return axes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ReadActualPosition::axes() const {
  // @@protoc_insertion_point(field_list:SoftKernelHmiTest.ReadActualPosition.Axes)
  return _internal_axes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ReadActualPosition::_internal_mutable_axes() {
  return &axes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ReadActualPosition::mutable_axes() {
  // @@protoc_insertion_point(field_mutable_list:SoftKernelHmiTest.ReadActualPosition.Axes)
  return _internal_mutable_axes();
}

// -------------------------------------------------------------------

// AxesPosition

// repeated int32 Positions = 1 [packed = true];
inline int AxesPosition::_internal_positions_size() const {
  return positions_.size();
}
inline int AxesPosition::positions_size() const {
  return _internal_positions_size();
}
inline void AxesPosition::clear_positions() {
  positions_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AxesPosition::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AxesPosition::positions(int index) const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.AxesPosition.Positions)
  return _internal_positions(index);
}
inline void AxesPosition::set_positions(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  positions_.Set(index, value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.AxesPosition.Positions)
}
inline void AxesPosition::_internal_add_positions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  positions_.Add(value);
}
inline void AxesPosition::add_positions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_positions(value);
  // @@protoc_insertion_point(field_add:SoftKernelHmiTest.AxesPosition.Positions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AxesPosition::_internal_positions() const {
  return positions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AxesPosition::positions() const {
  // @@protoc_insertion_point(field_list:SoftKernelHmiTest.AxesPosition.Positions)
  return _internal_positions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AxesPosition::_internal_mutable_positions() {
  return &positions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AxesPosition::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:SoftKernelHmiTest.AxesPosition.Positions)
  return _internal_mutable_positions();
}

// -------------------------------------------------------------------

// MoveLinearRelative

// int32 AxesGroup = 1;
inline void MoveLinearRelative::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveLinearRelative::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MoveLinearRelative::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveLinearRelative.AxesGroup)
  return _internal_axesgroup();
}
inline void MoveLinearRelative::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void MoveLinearRelative::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveLinearRelative.AxesGroup)
}

// bool Execute = 2;
inline void MoveLinearRelative::clear_execute() {
  execute_ = false;
}
inline bool MoveLinearRelative::_internal_execute() const {
  return execute_;
}
inline bool MoveLinearRelative::execute() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveLinearRelative.Execute)
  return _internal_execute();
}
inline void MoveLinearRelative::_internal_set_execute(bool value) {
  
  execute_ = value;
}
inline void MoveLinearRelative::set_execute(bool value) {
  _internal_set_execute(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveLinearRelative.Execute)
}

// repeated double Distance = 3 [packed = true];
inline int MoveLinearRelative::_internal_distance_size() const {
  return distance_.size();
}
inline int MoveLinearRelative::distance_size() const {
  return _internal_distance_size();
}
inline void MoveLinearRelative::clear_distance() {
  distance_.Clear();
}
inline double MoveLinearRelative::_internal_distance(int index) const {
  return distance_.Get(index);
}
inline double MoveLinearRelative::distance(int index) const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveLinearRelative.Distance)
  return _internal_distance(index);
}
inline void MoveLinearRelative::set_distance(int index, double value) {
  distance_.Set(index, value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveLinearRelative.Distance)
}
inline void MoveLinearRelative::_internal_add_distance(double value) {
  distance_.Add(value);
}
inline void MoveLinearRelative::add_distance(double value) {
  _internal_add_distance(value);
  // @@protoc_insertion_point(field_add:SoftKernelHmiTest.MoveLinearRelative.Distance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MoveLinearRelative::_internal_distance() const {
  return distance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MoveLinearRelative::distance() const {
  // @@protoc_insertion_point(field_list:SoftKernelHmiTest.MoveLinearRelative.Distance)
  return _internal_distance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MoveLinearRelative::_internal_mutable_distance() {
  return &distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MoveLinearRelative::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_list:SoftKernelHmiTest.MoveLinearRelative.Distance)
  return _internal_mutable_distance();
}

// double Velocity = 4;
inline void MoveLinearRelative::clear_velocity() {
  velocity_ = 0;
}
inline double MoveLinearRelative::_internal_velocity() const {
  return velocity_;
}
inline double MoveLinearRelative::velocity() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveLinearRelative.Velocity)
  return _internal_velocity();
}
inline void MoveLinearRelative::_internal_set_velocity(double value) {
  
  velocity_ = value;
}
inline void MoveLinearRelative::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveLinearRelative.Velocity)
}

// double Acceleration = 5;
inline void MoveLinearRelative::clear_acceleration() {
  acceleration_ = 0;
}
inline double MoveLinearRelative::_internal_acceleration() const {
  return acceleration_;
}
inline double MoveLinearRelative::acceleration() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveLinearRelative.Acceleration)
  return _internal_acceleration();
}
inline void MoveLinearRelative::_internal_set_acceleration(double value) {
  
  acceleration_ = value;
}
inline void MoveLinearRelative::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveLinearRelative.Acceleration)
}

// double Deceleration = 6;
inline void MoveLinearRelative::clear_deceleration() {
  deceleration_ = 0;
}
inline double MoveLinearRelative::_internal_deceleration() const {
  return deceleration_;
}
inline double MoveLinearRelative::deceleration() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveLinearRelative.Deceleration)
  return _internal_deceleration();
}
inline void MoveLinearRelative::_internal_set_deceleration(double value) {
  
  deceleration_ = value;
}
inline void MoveLinearRelative::set_deceleration(double value) {
  _internal_set_deceleration(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveLinearRelative.Deceleration)
}

// double Jerk = 7;
inline void MoveLinearRelative::clear_jerk() {
  jerk_ = 0;
}
inline double MoveLinearRelative::_internal_jerk() const {
  return jerk_;
}
inline double MoveLinearRelative::jerk() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.MoveLinearRelative.Jerk)
  return _internal_jerk();
}
inline void MoveLinearRelative::_internal_set_jerk(double value) {
  
  jerk_ = value;
}
inline void MoveLinearRelative::set_jerk(double value) {
  _internal_set_jerk(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.MoveLinearRelative.Jerk)
}

// -------------------------------------------------------------------

// AddAxisToGroup

// int32 AxesGroup = 1;
inline void AddAxisToGroup::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddAxisToGroup::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddAxisToGroup::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.AddAxisToGroup.AxesGroup)
  return _internal_axesgroup();
}
inline void AddAxisToGroup::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void AddAxisToGroup::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.AddAxisToGroup.AxesGroup)
}

// int32 Axis = 2;
inline void AddAxisToGroup::clear_axis() {
  axis_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddAxisToGroup::_internal_axis() const {
  return axis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddAxisToGroup::axis() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.AddAxisToGroup.Axis)
  return _internal_axis();
}
inline void AddAxisToGroup::_internal_set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axis_ = value;
}
inline void AddAxisToGroup::set_axis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axis(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.AddAxisToGroup.Axis)
}

// bool Execute = 3;
inline void AddAxisToGroup::clear_execute() {
  execute_ = false;
}
inline bool AddAxisToGroup::_internal_execute() const {
  return execute_;
}
inline bool AddAxisToGroup::execute() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.AddAxisToGroup.Execute)
  return _internal_execute();
}
inline void AddAxisToGroup::_internal_set_execute(bool value) {
  
  execute_ = value;
}
inline void AddAxisToGroup::set_execute(bool value) {
  _internal_set_execute(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.AddAxisToGroup.Execute)
}

// int32 IdentInGroup = 4;
inline void AddAxisToGroup::clear_identingroup() {
  identingroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddAxisToGroup::_internal_identingroup() const {
  return identingroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddAxisToGroup::identingroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.AddAxisToGroup.IdentInGroup)
  return _internal_identingroup();
}
inline void AddAxisToGroup::_internal_set_identingroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  identingroup_ = value;
}
inline void AddAxisToGroup::set_identingroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_identingroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.AddAxisToGroup.IdentInGroup)
}

// -------------------------------------------------------------------

// RemoveAxisFromGroup

// int32 AxesGroup = 1;
inline void RemoveAxisFromGroup::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoveAxisFromGroup::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoveAxisFromGroup::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.RemoveAxisFromGroup.AxesGroup)
  return _internal_axesgroup();
}
inline void RemoveAxisFromGroup::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void RemoveAxisFromGroup::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.RemoveAxisFromGroup.AxesGroup)
}

// bool Execute = 2;
inline void RemoveAxisFromGroup::clear_execute() {
  execute_ = false;
}
inline bool RemoveAxisFromGroup::_internal_execute() const {
  return execute_;
}
inline bool RemoveAxisFromGroup::execute() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.RemoveAxisFromGroup.Execute)
  return _internal_execute();
}
inline void RemoveAxisFromGroup::_internal_set_execute(bool value) {
  
  execute_ = value;
}
inline void RemoveAxisFromGroup::set_execute(bool value) {
  _internal_set_execute(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.RemoveAxisFromGroup.Execute)
}

// int32 IdentInGroup = 3;
inline void RemoveAxisFromGroup::clear_identingroup() {
  identingroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoveAxisFromGroup::_internal_identingroup() const {
  return identingroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoveAxisFromGroup::identingroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.RemoveAxisFromGroup.IdentInGroup)
  return _internal_identingroup();
}
inline void RemoveAxisFromGroup::_internal_set_identingroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  identingroup_ = value;
}
inline void RemoveAxisFromGroup::set_identingroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_identingroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.RemoveAxisFromGroup.IdentInGroup)
}

// -------------------------------------------------------------------

// GroupEnable

// int32 AxesGroup = 1;
inline void GroupEnable::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupEnable::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupEnable::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupEnable.AxesGroup)
  return _internal_axesgroup();
}
inline void GroupEnable::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void GroupEnable::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupEnable.AxesGroup)
}

// bool Execute = 2;
inline void GroupEnable::clear_execute() {
  execute_ = false;
}
inline bool GroupEnable::_internal_execute() const {
  return execute_;
}
inline bool GroupEnable::execute() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupEnable.Execute)
  return _internal_execute();
}
inline void GroupEnable::_internal_set_execute(bool value) {
  
  execute_ = value;
}
inline void GroupEnable::set_execute(bool value) {
  _internal_set_execute(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupEnable.Execute)
}

// int32 DeviceNum = 3;
inline void GroupEnable::clear_devicenum() {
  devicenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupEnable::_internal_devicenum() const {
  return devicenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupEnable::devicenum() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupEnable.DeviceNum)
  return _internal_devicenum();
}
inline void GroupEnable::_internal_set_devicenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  devicenum_ = value;
}
inline void GroupEnable::set_devicenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_devicenum(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupEnable.DeviceNum)
}

// -------------------------------------------------------------------

// GroupDisable

// int32 AxesGroup = 1;
inline void GroupDisable::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupDisable::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupDisable::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupDisable.AxesGroup)
  return _internal_axesgroup();
}
inline void GroupDisable::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void GroupDisable::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupDisable.AxesGroup)
}

// bool Execute = 2;
inline void GroupDisable::clear_execute() {
  execute_ = false;
}
inline bool GroupDisable::_internal_execute() const {
  return execute_;
}
inline bool GroupDisable::execute() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupDisable.Execute)
  return _internal_execute();
}
inline void GroupDisable::_internal_set_execute(bool value) {
  
  execute_ = value;
}
inline void GroupDisable::set_execute(bool value) {
  _internal_set_execute(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupDisable.Execute)
}

// -------------------------------------------------------------------

// UngroupAllAxes

// int32 AxesGroup = 1;
inline void UngroupAllAxes::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UngroupAllAxes::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UngroupAllAxes::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.UngroupAllAxes.AxesGroup)
  return _internal_axesgroup();
}
inline void UngroupAllAxes::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void UngroupAllAxes::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.UngroupAllAxes.AxesGroup)
}

// bool Execute = 2;
inline void UngroupAllAxes::clear_execute() {
  execute_ = false;
}
inline bool UngroupAllAxes::_internal_execute() const {
  return execute_;
}
inline bool UngroupAllAxes::execute() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.UngroupAllAxes.Execute)
  return _internal_execute();
}
inline void UngroupAllAxes::_internal_set_execute(bool value) {
  
  execute_ = value;
}
inline void UngroupAllAxes::set_execute(bool value) {
  _internal_set_execute(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.UngroupAllAxes.Execute)
}

// -------------------------------------------------------------------

// SetKinTransform

// int32 AxesGroup = 1;
inline void SetKinTransform::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetKinTransform::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetKinTransform::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.SetKinTransform.AxesGroup)
  return _internal_axesgroup();
}
inline void SetKinTransform::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void SetKinTransform::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.SetKinTransform.AxesGroup)
}

// -------------------------------------------------------------------

// SetCoordinateTransform

// int32 AxesGroup = 1;
inline void SetCoordinateTransform::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetCoordinateTransform::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetCoordinateTransform::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.SetCoordinateTransform.AxesGroup)
  return _internal_axesgroup();
}
inline void SetCoordinateTransform::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void SetCoordinateTransform::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.SetCoordinateTransform.AxesGroup)
}

// -------------------------------------------------------------------

// SetCartesianTransform

// int32 AxesGroup = 1;
inline void SetCartesianTransform::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetCartesianTransform::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetCartesianTransform::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.SetCartesianTransform.AxesGroup)
  return _internal_axesgroup();
}
inline void SetCartesianTransform::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void SetCartesianTransform::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.SetCartesianTransform.AxesGroup)
}

// -------------------------------------------------------------------

// GroupInterrupt

// int32 AxesGroup = 1;
inline void GroupInterrupt::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupInterrupt::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupInterrupt::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupInterrupt.AxesGroup)
  return _internal_axesgroup();
}
inline void GroupInterrupt::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void GroupInterrupt::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupInterrupt.AxesGroup)
}

// bool Execute = 2;
inline void GroupInterrupt::clear_execute() {
  execute_ = false;
}
inline bool GroupInterrupt::_internal_execute() const {
  return execute_;
}
inline bool GroupInterrupt::execute() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupInterrupt.Execute)
  return _internal_execute();
}
inline void GroupInterrupt::_internal_set_execute(bool value) {
  
  execute_ = value;
}
inline void GroupInterrupt::set_execute(bool value) {
  _internal_set_execute(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupInterrupt.Execute)
}

// double Deceleration = 3;
inline void GroupInterrupt::clear_deceleration() {
  deceleration_ = 0;
}
inline double GroupInterrupt::_internal_deceleration() const {
  return deceleration_;
}
inline double GroupInterrupt::deceleration() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupInterrupt.Deceleration)
  return _internal_deceleration();
}
inline void GroupInterrupt::_internal_set_deceleration(double value) {
  
  deceleration_ = value;
}
inline void GroupInterrupt::set_deceleration(double value) {
  _internal_set_deceleration(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupInterrupt.Deceleration)
}

// double jerk = 4;
inline void GroupInterrupt::clear_jerk() {
  jerk_ = 0;
}
inline double GroupInterrupt::_internal_jerk() const {
  return jerk_;
}
inline double GroupInterrupt::jerk() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupInterrupt.jerk)
  return _internal_jerk();
}
inline void GroupInterrupt::_internal_set_jerk(double value) {
  
  jerk_ = value;
}
inline void GroupInterrupt::set_jerk(double value) {
  _internal_set_jerk(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupInterrupt.jerk)
}

// -------------------------------------------------------------------

// GroupContinue

// int32 AxesGroup = 1;
inline void GroupContinue::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupContinue::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupContinue::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupContinue.AxesGroup)
  return _internal_axesgroup();
}
inline void GroupContinue::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void GroupContinue::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupContinue.AxesGroup)
}

// bool Execute = 2;
inline void GroupContinue::clear_execute() {
  execute_ = false;
}
inline bool GroupContinue::_internal_execute() const {
  return execute_;
}
inline bool GroupContinue::execute() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupContinue.Execute)
  return _internal_execute();
}
inline void GroupContinue::_internal_set_execute(bool value) {
  
  execute_ = value;
}
inline void GroupContinue::set_execute(bool value) {
  _internal_set_execute(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupContinue.Execute)
}

// -------------------------------------------------------------------

// GroupStop

// int32 AxesGroup = 1;
inline void GroupStop::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupStop::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupStop::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupStop.AxesGroup)
  return _internal_axesgroup();
}
inline void GroupStop::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void GroupStop::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupStop.AxesGroup)
}

// bool Execute = 2;
inline void GroupStop::clear_execute() {
  execute_ = false;
}
inline bool GroupStop::_internal_execute() const {
  return execute_;
}
inline bool GroupStop::execute() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupStop.Execute)
  return _internal_execute();
}
inline void GroupStop::_internal_set_execute(bool value) {
  
  execute_ = value;
}
inline void GroupStop::set_execute(bool value) {
  _internal_set_execute(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupStop.Execute)
}

// double Deceleration = 3;
inline void GroupStop::clear_deceleration() {
  deceleration_ = 0;
}
inline double GroupStop::_internal_deceleration() const {
  return deceleration_;
}
inline double GroupStop::deceleration() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupStop.Deceleration)
  return _internal_deceleration();
}
inline void GroupStop::_internal_set_deceleration(double value) {
  
  deceleration_ = value;
}
inline void GroupStop::set_deceleration(double value) {
  _internal_set_deceleration(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupStop.Deceleration)
}

// double jerk = 4;
inline void GroupStop::clear_jerk() {
  jerk_ = 0;
}
inline double GroupStop::_internal_jerk() const {
  return jerk_;
}
inline double GroupStop::jerk() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupStop.jerk)
  return _internal_jerk();
}
inline void GroupStop::_internal_set_jerk(double value) {
  
  jerk_ = value;
}
inline void GroupStop::set_jerk(double value) {
  _internal_set_jerk(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupStop.jerk)
}

// -------------------------------------------------------------------

// GroupSetPosition

// int32 AxesGroup = 1;
inline void GroupSetPosition::clear_axesgroup() {
  axesgroup_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupSetPosition::_internal_axesgroup() const {
  return axesgroup_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupSetPosition::axesgroup() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupSetPosition.AxesGroup)
  return _internal_axesgroup();
}
inline void GroupSetPosition::_internal_set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  axesgroup_ = value;
}
inline void GroupSetPosition::set_axesgroup(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_axesgroup(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupSetPosition.AxesGroup)
}

// repeated double Distance = 2 [packed = true];
inline int GroupSetPosition::_internal_distance_size() const {
  return distance_.size();
}
inline int GroupSetPosition::distance_size() const {
  return _internal_distance_size();
}
inline void GroupSetPosition::clear_distance() {
  distance_.Clear();
}
inline double GroupSetPosition::_internal_distance(int index) const {
  return distance_.Get(index);
}
inline double GroupSetPosition::distance(int index) const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupSetPosition.Distance)
  return _internal_distance(index);
}
inline void GroupSetPosition::set_distance(int index, double value) {
  distance_.Set(index, value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupSetPosition.Distance)
}
inline void GroupSetPosition::_internal_add_distance(double value) {
  distance_.Add(value);
}
inline void GroupSetPosition::add_distance(double value) {
  _internal_add_distance(value);
  // @@protoc_insertion_point(field_add:SoftKernelHmiTest.GroupSetPosition.Distance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GroupSetPosition::_internal_distance() const {
  return distance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GroupSetPosition::distance() const {
  // @@protoc_insertion_point(field_list:SoftKernelHmiTest.GroupSetPosition.Distance)
  return _internal_distance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GroupSetPosition::_internal_mutable_distance() {
  return &distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GroupSetPosition::mutable_distance() {
  // @@protoc_insertion_point(field_mutable_list:SoftKernelHmiTest.GroupSetPosition.Distance)
  return _internal_mutable_distance();
}

// bool Relative = 3;
inline void GroupSetPosition::clear_relative() {
  relative_ = false;
}
inline bool GroupSetPosition::_internal_relative() const {
  return relative_;
}
inline bool GroupSetPosition::relative() const {
  // @@protoc_insertion_point(field_get:SoftKernelHmiTest.GroupSetPosition.Relative)
  return _internal_relative();
}
inline void GroupSetPosition::_internal_set_relative(bool value) {
  
  relative_ = value;
}
inline void GroupSetPosition::set_relative(bool value) {
  _internal_set_relative(value);
  // @@protoc_insertion_point(field_set:SoftKernelHmiTest.GroupSetPosition.Relative)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SoftKernelHmiTest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_McLib_2eproto
