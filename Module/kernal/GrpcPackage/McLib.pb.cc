// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: McLib.proto

#include "McLib.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace SoftKernelHmiTest {
class McResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<McResult> _instance;
} _McResult_default_instance_;
class PowerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Power> _instance;
} _Power_default_instance_;
class StopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stop> _instance;
} _Stop_default_instance_;
class MoveAbsoluteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveAbsolute> _instance;
} _MoveAbsolute_default_instance_;
class SetPostionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPostion> _instance;
} _SetPostion_default_instance_;
class MoveContinuousAbsoluteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveContinuousAbsolute> _instance;
} _MoveContinuousAbsolute_default_instance_;
class ReadActualPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadActualPosition> _instance;
} _ReadActualPosition_default_instance_;
class AxesPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AxesPosition> _instance;
} _AxesPosition_default_instance_;
class MoveLinearRelativeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveLinearRelative> _instance;
} _MoveLinearRelative_default_instance_;
class AddAxisToGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddAxisToGroup> _instance;
} _AddAxisToGroup_default_instance_;
class RemoveAxisFromGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveAxisFromGroup> _instance;
} _RemoveAxisFromGroup_default_instance_;
class GroupEnableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupEnable> _instance;
} _GroupEnable_default_instance_;
class GroupDisableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupDisable> _instance;
} _GroupDisable_default_instance_;
class UngroupAllAxesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UngroupAllAxes> _instance;
} _UngroupAllAxes_default_instance_;
class SetKinTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetKinTransform> _instance;
} _SetKinTransform_default_instance_;
class SetCoordinateTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCoordinateTransform> _instance;
} _SetCoordinateTransform_default_instance_;
class SetCartesianTransformDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCartesianTransform> _instance;
} _SetCartesianTransform_default_instance_;
class GroupInterruptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupInterrupt> _instance;
} _GroupInterrupt_default_instance_;
class GroupContinueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupContinue> _instance;
} _GroupContinue_default_instance_;
class GroupStopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupStop> _instance;
} _GroupStop_default_instance_;
class GroupSetPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupSetPosition> _instance;
} _GroupSetPosition_default_instance_;
}  // namespace SoftKernelHmiTest
static void InitDefaultsscc_info_AddAxisToGroup_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_AddAxisToGroup_default_instance_;
    new (ptr) ::SoftKernelHmiTest::AddAxisToGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::AddAxisToGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddAxisToGroup_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddAxisToGroup_McLib_2eproto}, {}};

static void InitDefaultsscc_info_AxesPosition_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_AxesPosition_default_instance_;
    new (ptr) ::SoftKernelHmiTest::AxesPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::AxesPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AxesPosition_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AxesPosition_McLib_2eproto}, {}};

static void InitDefaultsscc_info_GroupContinue_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_GroupContinue_default_instance_;
    new (ptr) ::SoftKernelHmiTest::GroupContinue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::GroupContinue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupContinue_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupContinue_McLib_2eproto}, {}};

static void InitDefaultsscc_info_GroupDisable_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_GroupDisable_default_instance_;
    new (ptr) ::SoftKernelHmiTest::GroupDisable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::GroupDisable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupDisable_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupDisable_McLib_2eproto}, {}};

static void InitDefaultsscc_info_GroupEnable_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_GroupEnable_default_instance_;
    new (ptr) ::SoftKernelHmiTest::GroupEnable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::GroupEnable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupEnable_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupEnable_McLib_2eproto}, {}};

static void InitDefaultsscc_info_GroupInterrupt_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_GroupInterrupt_default_instance_;
    new (ptr) ::SoftKernelHmiTest::GroupInterrupt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::GroupInterrupt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupInterrupt_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupInterrupt_McLib_2eproto}, {}};

static void InitDefaultsscc_info_GroupSetPosition_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_GroupSetPosition_default_instance_;
    new (ptr) ::SoftKernelHmiTest::GroupSetPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::GroupSetPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupSetPosition_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupSetPosition_McLib_2eproto}, {}};

static void InitDefaultsscc_info_GroupStop_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_GroupStop_default_instance_;
    new (ptr) ::SoftKernelHmiTest::GroupStop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::GroupStop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GroupStop_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GroupStop_McLib_2eproto}, {}};

static void InitDefaultsscc_info_McResult_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_McResult_default_instance_;
    new (ptr) ::SoftKernelHmiTest::McResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::McResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_McResult_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_McResult_McLib_2eproto}, {}};

static void InitDefaultsscc_info_MoveAbsolute_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_MoveAbsolute_default_instance_;
    new (ptr) ::SoftKernelHmiTest::MoveAbsolute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::MoveAbsolute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveAbsolute_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveAbsolute_McLib_2eproto}, {}};

static void InitDefaultsscc_info_MoveContinuousAbsolute_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_MoveContinuousAbsolute_default_instance_;
    new (ptr) ::SoftKernelHmiTest::MoveContinuousAbsolute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::MoveContinuousAbsolute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveContinuousAbsolute_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveContinuousAbsolute_McLib_2eproto}, {}};

static void InitDefaultsscc_info_MoveLinearRelative_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_MoveLinearRelative_default_instance_;
    new (ptr) ::SoftKernelHmiTest::MoveLinearRelative();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::MoveLinearRelative::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MoveLinearRelative_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MoveLinearRelative_McLib_2eproto}, {}};

static void InitDefaultsscc_info_Power_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_Power_default_instance_;
    new (ptr) ::SoftKernelHmiTest::Power();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::Power::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Power_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Power_McLib_2eproto}, {}};

static void InitDefaultsscc_info_ReadActualPosition_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_ReadActualPosition_default_instance_;
    new (ptr) ::SoftKernelHmiTest::ReadActualPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::ReadActualPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadActualPosition_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadActualPosition_McLib_2eproto}, {}};

static void InitDefaultsscc_info_RemoveAxisFromGroup_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_RemoveAxisFromGroup_default_instance_;
    new (ptr) ::SoftKernelHmiTest::RemoveAxisFromGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::RemoveAxisFromGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveAxisFromGroup_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveAxisFromGroup_McLib_2eproto}, {}};

static void InitDefaultsscc_info_SetCartesianTransform_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_SetCartesianTransform_default_instance_;
    new (ptr) ::SoftKernelHmiTest::SetCartesianTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::SetCartesianTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCartesianTransform_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetCartesianTransform_McLib_2eproto}, {}};

static void InitDefaultsscc_info_SetCoordinateTransform_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_SetCoordinateTransform_default_instance_;
    new (ptr) ::SoftKernelHmiTest::SetCoordinateTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::SetCoordinateTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCoordinateTransform_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetCoordinateTransform_McLib_2eproto}, {}};

static void InitDefaultsscc_info_SetKinTransform_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_SetKinTransform_default_instance_;
    new (ptr) ::SoftKernelHmiTest::SetKinTransform();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::SetKinTransform::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetKinTransform_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetKinTransform_McLib_2eproto}, {}};

static void InitDefaultsscc_info_SetPostion_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_SetPostion_default_instance_;
    new (ptr) ::SoftKernelHmiTest::SetPostion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::SetPostion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetPostion_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetPostion_McLib_2eproto}, {}};

static void InitDefaultsscc_info_Stop_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_Stop_default_instance_;
    new (ptr) ::SoftKernelHmiTest::Stop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::Stop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stop_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Stop_McLib_2eproto}, {}};

static void InitDefaultsscc_info_UngroupAllAxes_McLib_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SoftKernelHmiTest::_UngroupAllAxes_default_instance_;
    new (ptr) ::SoftKernelHmiTest::UngroupAllAxes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SoftKernelHmiTest::UngroupAllAxes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UngroupAllAxes_McLib_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UngroupAllAxes_McLib_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_McLib_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_McLib_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_McLib_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_McLib_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::McResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::McResult, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::Power, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::Power, axis_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::Power, enable_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::Power, enablepositive_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::Power, enablenegative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::Stop, axis_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::Stop, enable_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::Stop, deceleration_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::Stop, jerk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveAbsolute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveAbsolute, axis_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveAbsolute, enable_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveAbsolute, continuousupdate_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveAbsolute, position_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveAbsolute, velocity_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveAbsolute, acceleration_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveAbsolute, decerelation_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveAbsolute, jerk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::SetPostion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::SetPostion, axis_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::SetPostion, execute_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::SetPostion, position_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::SetPostion, relative_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveContinuousAbsolute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveContinuousAbsolute, axis_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveContinuousAbsolute, enable_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveContinuousAbsolute, continuousupdate_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveContinuousAbsolute, position_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveContinuousAbsolute, velocity_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveContinuousAbsolute, endvelocity_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveContinuousAbsolute, acceleration_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveContinuousAbsolute, decerelation_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveContinuousAbsolute, jerk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::ReadActualPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::ReadActualPosition, axes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::AxesPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::AxesPosition, positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveLinearRelative, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveLinearRelative, axesgroup_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveLinearRelative, execute_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveLinearRelative, distance_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveLinearRelative, velocity_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveLinearRelative, acceleration_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveLinearRelative, deceleration_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::MoveLinearRelative, jerk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::AddAxisToGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::AddAxisToGroup, axesgroup_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::AddAxisToGroup, axis_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::AddAxisToGroup, execute_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::AddAxisToGroup, identingroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::RemoveAxisFromGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::RemoveAxisFromGroup, axesgroup_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::RemoveAxisFromGroup, execute_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::RemoveAxisFromGroup, identingroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupEnable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupEnable, axesgroup_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupEnable, execute_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupEnable, devicenum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupDisable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupDisable, axesgroup_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupDisable, execute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::UngroupAllAxes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::UngroupAllAxes, axesgroup_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::UngroupAllAxes, execute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::SetKinTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::SetKinTransform, axesgroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::SetCoordinateTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::SetCoordinateTransform, axesgroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::SetCartesianTransform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::SetCartesianTransform, axesgroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupInterrupt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupInterrupt, axesgroup_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupInterrupt, execute_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupInterrupt, deceleration_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupInterrupt, jerk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupContinue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupContinue, axesgroup_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupContinue, execute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupStop, axesgroup_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupStop, execute_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupStop, deceleration_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupStop, jerk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupSetPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupSetPosition, axesgroup_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupSetPosition, distance_),
  PROTOBUF_FIELD_OFFSET(::SoftKernelHmiTest::GroupSetPosition, relative_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SoftKernelHmiTest::McResult)},
  { 6, -1, sizeof(::SoftKernelHmiTest::Power)},
  { 15, -1, sizeof(::SoftKernelHmiTest::Stop)},
  { 24, -1, sizeof(::SoftKernelHmiTest::MoveAbsolute)},
  { 37, -1, sizeof(::SoftKernelHmiTest::SetPostion)},
  { 46, -1, sizeof(::SoftKernelHmiTest::MoveContinuousAbsolute)},
  { 60, -1, sizeof(::SoftKernelHmiTest::ReadActualPosition)},
  { 66, -1, sizeof(::SoftKernelHmiTest::AxesPosition)},
  { 72, -1, sizeof(::SoftKernelHmiTest::MoveLinearRelative)},
  { 84, -1, sizeof(::SoftKernelHmiTest::AddAxisToGroup)},
  { 93, -1, sizeof(::SoftKernelHmiTest::RemoveAxisFromGroup)},
  { 101, -1, sizeof(::SoftKernelHmiTest::GroupEnable)},
  { 109, -1, sizeof(::SoftKernelHmiTest::GroupDisable)},
  { 116, -1, sizeof(::SoftKernelHmiTest::UngroupAllAxes)},
  { 123, -1, sizeof(::SoftKernelHmiTest::SetKinTransform)},
  { 129, -1, sizeof(::SoftKernelHmiTest::SetCoordinateTransform)},
  { 135, -1, sizeof(::SoftKernelHmiTest::SetCartesianTransform)},
  { 141, -1, sizeof(::SoftKernelHmiTest::GroupInterrupt)},
  { 150, -1, sizeof(::SoftKernelHmiTest::GroupContinue)},
  { 157, -1, sizeof(::SoftKernelHmiTest::GroupStop)},
  { 166, -1, sizeof(::SoftKernelHmiTest::GroupSetPosition)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_McResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_Power_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_Stop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_MoveAbsolute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_SetPostion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_MoveContinuousAbsolute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_ReadActualPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_AxesPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_MoveLinearRelative_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_AddAxisToGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_RemoveAxisFromGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_GroupEnable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_GroupDisable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_UngroupAllAxes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_SetKinTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_SetCoordinateTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_SetCartesianTransform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_GroupInterrupt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_GroupContinue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_GroupStop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SoftKernelHmiTest::_GroupSetPosition_default_instance_),
};

const char descriptor_table_protodef_McLib_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013McLib.proto\022\021SoftKernelHmiTest\"\032\n\010McRe"
  "sult\022\016\n\006result\030\001 \001(\005\"U\n\005Power\022\014\n\004Axis\030\001 "
  "\001(\005\022\016\n\006Enable\030\002 \001(\010\022\026\n\016EnablePositive\030\003 "
  "\001(\010\022\026\n\016EnableNegative\030\004 \001(\010\"H\n\004Stop\022\014\n\004A"
  "xis\030\001 \001(\005\022\016\n\006Enable\030\002 \001(\010\022\024\n\014Deceleratio"
  "n\030\003 \001(\001\022\014\n\004Jerk\030\004 \001(\001\"\244\001\n\014MoveAbsolute\022\014"
  "\n\004Axis\030\001 \001(\005\022\016\n\006Enable\030\002 \001(\010\022\030\n\020Continuo"
  "usUpdate\030\010 \001(\010\022\020\n\010Position\030\003 \001(\001\022\020\n\010Velo"
  "city\030\004 \001(\001\022\024\n\014Acceleration\030\005 \001(\001\022\024\n\014Dece"
  "relation\030\006 \001(\001\022\014\n\004Jerk\030\007 \001(\001\"O\n\nSetPosti"
  "on\022\014\n\004Axis\030\001 \001(\005\022\017\n\007Execute\030\002 \001(\010\022\020\n\010Pos"
  "ition\030\003 \001(\001\022\020\n\010Relative\030\004 \001(\001\"\303\001\n\026MoveCo"
  "ntinuousAbsolute\022\014\n\004Axis\030\001 \001(\005\022\016\n\006Enable"
  "\030\002 \001(\010\022\030\n\020ContinuousUpdate\030\010 \001(\010\022\020\n\010Posi"
  "tion\030\003 \001(\001\022\020\n\010Velocity\030\004 \001(\001\022\023\n\013EndVeloc"
  "ity\030\t \001(\001\022\024\n\014Acceleration\030\005 \001(\001\022\024\n\014Decer"
  "elation\030\006 \001(\001\022\014\n\004Jerk\030\007 \001(\001\"&\n\022ReadActua"
  "lPosition\022\020\n\004Axes\030\001 \003(\005B\002\020\001\"%\n\014AxesPosit"
  "ion\022\025\n\tPositions\030\001 \003(\005B\002\020\001\"\232\001\n\022MoveLinea"
  "rRelative\022\021\n\tAxesGroup\030\001 \001(\005\022\017\n\007Execute\030"
  "\002 \001(\010\022\024\n\010Distance\030\003 \003(\001B\002\020\001\022\020\n\010Velocity\030"
  "\004 \001(\001\022\024\n\014Acceleration\030\005 \001(\001\022\024\n\014Decelerat"
  "ion\030\006 \001(\001\022\014\n\004Jerk\030\007 \001(\001\"X\n\016AddAxisToGrou"
  "p\022\021\n\tAxesGroup\030\001 \001(\005\022\014\n\004Axis\030\002 \001(\005\022\017\n\007Ex"
  "ecute\030\003 \001(\010\022\024\n\014IdentInGroup\030\004 \001(\005\"O\n\023Rem"
  "oveAxisFromGroup\022\021\n\tAxesGroup\030\001 \001(\005\022\017\n\007E"
  "xecute\030\002 \001(\010\022\024\n\014IdentInGroup\030\003 \001(\005\"D\n\013Gr"
  "oupEnable\022\021\n\tAxesGroup\030\001 \001(\005\022\017\n\007Execute\030"
  "\002 \001(\010\022\021\n\tDeviceNum\030\003 \001(\005\"2\n\014GroupDisable"
  "\022\021\n\tAxesGroup\030\001 \001(\005\022\017\n\007Execute\030\002 \001(\010\"4\n\016"
  "UngroupAllAxes\022\021\n\tAxesGroup\030\001 \001(\005\022\017\n\007Exe"
  "cute\030\002 \001(\010\"$\n\017SetKinTransform\022\021\n\tAxesGro"
  "up\030\001 \001(\005\"+\n\026SetCoordinateTransform\022\021\n\tAx"
  "esGroup\030\001 \001(\005\"*\n\025SetCartesianTransform\022\021"
  "\n\tAxesGroup\030\001 \001(\005\"X\n\016GroupInterrupt\022\021\n\tA"
  "xesGroup\030\001 \001(\005\022\017\n\007Execute\030\002 \001(\010\022\024\n\014Decel"
  "eration\030\003 \001(\001\022\014\n\004jerk\030\004 \001(\001\"3\n\rGroupCont"
  "inue\022\021\n\tAxesGroup\030\001 \001(\005\022\017\n\007Execute\030\002 \001(\010"
  "\"S\n\tGroupStop\022\021\n\tAxesGroup\030\001 \001(\005\022\017\n\007Exec"
  "ute\030\002 \001(\010\022\024\n\014Deceleration\030\003 \001(\001\022\014\n\004jerk\030"
  "\004 \001(\001\"M\n\020GroupSetPosition\022\021\n\tAxesGroup\030\001"
  " \001(\005\022\024\n\010Distance\030\002 \003(\001B\002\020\001\022\020\n\010Relative\030\003"
  " \001(\0102\200\r\n\013McLibServer\022C\n\010MC_Power\022\030.SoftK"
  "ernelHmiTest.Power\032\033.SoftKernelHmiTest.M"
  "cResult\"\000\022A\n\007MC_Stop\022\027.SoftKernelHmiTest"
  ".Stop\032\033.SoftKernelHmiTest.McResult\"\000\022Q\n\017"
  "MC_MoveAbsolute\022\037.SoftKernelHmiTest.Move"
  "Absolute\032\033.SoftKernelHmiTest.McResult\"\000\022"
  "Q\n\017MC_MoveRelative\022\037.SoftKernelHmiTest.M"
  "oveAbsolute\032\033.SoftKernelHmiTest.McResult"
  "\"\000\022M\n\rMC_SetPostion\022\035.SoftKernelHmiTest."
  "SetPostion\032\033.SoftKernelHmiTest.McResult\""
  "\000\022e\n\031MC_MoveContinuousAbsolute\022).SoftKer"
  "nelHmiTest.MoveContinuousAbsolute\032\033.Soft"
  "KernelHmiTest.McResult\"\000\022e\n\031MC_MoveConti"
  "nuousRelative\022).SoftKernelHmiTest.MoveCo"
  "ntinuousAbsolute\032\033.SoftKernelHmiTest.McR"
  "esult\"\000\022a\n\025MC_ReadActualPosition\022%.SoftK"
  "ernelHmiTest.ReadActualPosition\032\037.SoftKe"
  "rnelHmiTest.AxesPosition\"\000\022]\n\025MC_MoveLin"
  "earRelative\022%.SoftKernelHmiTest.MoveLine"
  "arRelative\032\033.SoftKernelHmiTest.McResult\""
  "\000\022]\n\025MC_MoveLinearAbsolute\022%.SoftKernelH"
  "miTest.MoveLinearRelative\032\033.SoftKernelHm"
  "iTest.McResult\"\000\022U\n\021Mc_AddAxisToGroup\022!."
  "SoftKernelHmiTest.AddAxisToGroup\032\033.SoftK"
  "ernelHmiTest.McResult\"\000\022_\n\026MC_RemoveAxis"
  "FromGroup\022&.SoftKernelHmiTest.RemoveAxis"
  "FromGroup\032\033.SoftKernelHmiTest.McResult\"\000"
  "\022O\n\016MC_GroupEnable\022\036.SoftKernelHmiTest.G"
  "roupEnable\032\033.SoftKernelHmiTest.McResult\""
  "\000\022Q\n\017MC_GroupDisable\022\037.SoftKernelHmiTest"
  ".GroupDisable\032\033.SoftKernelHmiTest.McResu"
  "lt\"\000\022U\n\021MC_UngroupAllAxes\022!.SoftKernelHm"
  "iTest.UngroupAllAxes\032\033.SoftKernelHmiTest"
  ".McResult\"\000\022U\n\021MC_GroupInterrupt\022!.SoftK"
  "ernelHmiTest.GroupInterrupt\032\033.SoftKernel"
  "HmiTest.McResult\"\000\022S\n\020MC_GroupContinue\022 "
  ".SoftKernelHmiTest.GroupContinue\032\033.SoftK"
  "ernelHmiTest.McResult\"\000\022K\n\014MC_GroupStop\022"
  "\034.SoftKernelHmiTest.GroupStop\032\033.SoftKern"
  "elHmiTest.McResult\"\000\022Y\n\023MC_GroupSetPosit"
  "ion\022#.SoftKernelHmiTest.GroupSetPosition"
  "\032\033.SoftKernelHmiTest.McResult\"\000B7\n\032io.gr"
  "pc.SoftKernel.hmitestB\021SoftKernelHmiTest"
  "P\001\242\002\003HLWb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_McLib_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_McLib_2eproto_sccs[21] = {
  &scc_info_AddAxisToGroup_McLib_2eproto.base,
  &scc_info_AxesPosition_McLib_2eproto.base,
  &scc_info_GroupContinue_McLib_2eproto.base,
  &scc_info_GroupDisable_McLib_2eproto.base,
  &scc_info_GroupEnable_McLib_2eproto.base,
  &scc_info_GroupInterrupt_McLib_2eproto.base,
  &scc_info_GroupSetPosition_McLib_2eproto.base,
  &scc_info_GroupStop_McLib_2eproto.base,
  &scc_info_McResult_McLib_2eproto.base,
  &scc_info_MoveAbsolute_McLib_2eproto.base,
  &scc_info_MoveContinuousAbsolute_McLib_2eproto.base,
  &scc_info_MoveLinearRelative_McLib_2eproto.base,
  &scc_info_Power_McLib_2eproto.base,
  &scc_info_ReadActualPosition_McLib_2eproto.base,
  &scc_info_RemoveAxisFromGroup_McLib_2eproto.base,
  &scc_info_SetCartesianTransform_McLib_2eproto.base,
  &scc_info_SetCoordinateTransform_McLib_2eproto.base,
  &scc_info_SetKinTransform_McLib_2eproto.base,
  &scc_info_SetPostion_McLib_2eproto.base,
  &scc_info_Stop_McLib_2eproto.base,
  &scc_info_UngroupAllAxes_McLib_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_McLib_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_McLib_2eproto = {
  false, false, descriptor_table_protodef_McLib_2eproto, "McLib.proto", 3416,
  &descriptor_table_McLib_2eproto_once, descriptor_table_McLib_2eproto_sccs, descriptor_table_McLib_2eproto_deps, 21, 0,
  schemas, file_default_instances, TableStruct_McLib_2eproto::offsets,
  file_level_metadata_McLib_2eproto, 21, file_level_enum_descriptors_McLib_2eproto, file_level_service_descriptors_McLib_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_McLib_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_McLib_2eproto)), true);
namespace SoftKernelHmiTest {

// ===================================================================

void McResult::InitAsDefaultInstance() {
}
class McResult::_Internal {
 public:
};

McResult::McResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.McResult)
}
McResult::McResult(const McResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.McResult)
}

void McResult::SharedCtor() {
  result_ = 0;
}

McResult::~McResult() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.McResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void McResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void McResult::ArenaDtor(void* object) {
  McResult* _this = reinterpret_cast< McResult* >(object);
  (void)_this;
}
void McResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void McResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const McResult& McResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_McResult_McLib_2eproto.base);
  return *internal_default_instance();
}


void McResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.McResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* McResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* McResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.McResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.McResult)
  return target;
}

size_t McResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.McResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void McResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.McResult)
  GOOGLE_DCHECK_NE(&from, this);
  const McResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<McResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.McResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.McResult)
    MergeFrom(*source);
  }
}

void McResult::MergeFrom(const McResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.McResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void McResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.McResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void McResult::CopyFrom(const McResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.McResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool McResult::IsInitialized() const {
  return true;
}

void McResult::InternalSwap(McResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata McResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Power::InitAsDefaultInstance() {
}
class Power::_Internal {
 public:
};

Power::Power(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.Power)
}
Power::Power(const Power& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axis_, &from.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&enablenegative_) -
    reinterpret_cast<char*>(&axis_)) + sizeof(enablenegative_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.Power)
}

void Power::SharedCtor() {
  ::memset(&axis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enablenegative_) -
      reinterpret_cast<char*>(&axis_)) + sizeof(enablenegative_));
}

Power::~Power() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.Power)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Power::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Power::ArenaDtor(void* object) {
  Power* _this = reinterpret_cast< Power* >(object);
  (void)_this;
}
void Power::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Power::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Power& Power::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Power_McLib_2eproto.base);
  return *internal_default_instance();
}


void Power::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.Power)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&axis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enablenegative_) -
      reinterpret_cast<char*>(&axis_)) + sizeof(enablenegative_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Power::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Axis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool EnablePositive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enablepositive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool EnableNegative = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enablenegative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Power::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.Power)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Axis = 1;
  if (this->axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // bool Enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // bool EnablePositive = 3;
  if (this->enablepositive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enablepositive(), target);
  }

  // bool EnableNegative = 4;
  if (this->enablenegative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enablenegative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.Power)
  return target;
}

size_t Power::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.Power)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Axis = 1;
  if (this->axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis());
  }

  // bool Enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool EnablePositive = 3;
  if (this->enablepositive() != 0) {
    total_size += 1 + 1;
  }

  // bool EnableNegative = 4;
  if (this->enablenegative() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Power::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.Power)
  GOOGLE_DCHECK_NE(&from, this);
  const Power* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Power>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.Power)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.Power)
    MergeFrom(*source);
  }
}

void Power::MergeFrom(const Power& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.Power)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axis() != 0) {
    _internal_set_axis(from._internal_axis());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.enablepositive() != 0) {
    _internal_set_enablepositive(from._internal_enablepositive());
  }
  if (from.enablenegative() != 0) {
    _internal_set_enablenegative(from._internal_enablenegative());
  }
}

void Power::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.Power)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Power::CopyFrom(const Power& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.Power)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Power::IsInitialized() const {
  return true;
}

void Power::InternalSwap(Power* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Power, enablenegative_)
      + sizeof(Power::enablenegative_)
      - PROTOBUF_FIELD_OFFSET(Power, axis_)>(
          reinterpret_cast<char*>(&axis_),
          reinterpret_cast<char*>(&other->axis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Power::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stop::InitAsDefaultInstance() {
}
class Stop::_Internal {
 public:
};

Stop::Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.Stop)
}
Stop::Stop(const Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axis_, &from.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&jerk_) -
    reinterpret_cast<char*>(&axis_)) + sizeof(jerk_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.Stop)
}

void Stop::SharedCtor() {
  ::memset(&axis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerk_) -
      reinterpret_cast<char*>(&axis_)) + sizeof(jerk_));
}

Stop::~Stop() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.Stop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Stop::ArenaDtor(void* object) {
  Stop* _this = reinterpret_cast< Stop* >(object);
  (void)_this;
}
void Stop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stop& Stop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stop_McLib_2eproto.base);
  return *internal_default_instance();
}


void Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&axis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerk_) -
      reinterpret_cast<char*>(&axis_)) + sizeof(jerk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Axis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Deceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Jerk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Axis = 1;
  if (this->axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // bool Enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // double Deceleration = 3;
  if (!(this->deceleration() <= 0 && this->deceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_deceleration(), target);
  }

  // double Jerk = 4;
  if (!(this->jerk() <= 0 && this->jerk() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_jerk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.Stop)
  return target;
}

size_t Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.Stop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Axis = 1;
  if (this->axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis());
  }

  // bool Enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // double Deceleration = 3;
  if (!(this->deceleration() <= 0 && this->deceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double Jerk = 4;
  if (!(this->jerk() <= 0 && this->jerk() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  const Stop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.Stop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.Stop)
    MergeFrom(*source);
  }
}

void Stop::MergeFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axis() != 0) {
    _internal_set_axis(from._internal_axis());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (!(from.deceleration() <= 0 && from.deceleration() >= 0)) {
    _internal_set_deceleration(from._internal_deceleration());
  }
  if (!(from.jerk() <= 0 && from.jerk() >= 0)) {
    _internal_set_jerk(from._internal_jerk());
  }
}

void Stop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stop::CopyFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stop::IsInitialized() const {
  return true;
}

void Stop::InternalSwap(Stop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stop, jerk_)
      + sizeof(Stop::jerk_)
      - PROTOBUF_FIELD_OFFSET(Stop, axis_)>(
          reinterpret_cast<char*>(&axis_),
          reinterpret_cast<char*>(&other->axis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveAbsolute::InitAsDefaultInstance() {
}
class MoveAbsolute::_Internal {
 public:
};

MoveAbsolute::MoveAbsolute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.MoveAbsolute)
}
MoveAbsolute::MoveAbsolute(const MoveAbsolute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&jerk_) -
    reinterpret_cast<char*>(&position_)) + sizeof(jerk_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.MoveAbsolute)
}

void MoveAbsolute::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerk_) -
      reinterpret_cast<char*>(&position_)) + sizeof(jerk_));
}

MoveAbsolute::~MoveAbsolute() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.MoveAbsolute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveAbsolute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveAbsolute::ArenaDtor(void* object) {
  MoveAbsolute* _this = reinterpret_cast< MoveAbsolute* >(object);
  (void)_this;
}
void MoveAbsolute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveAbsolute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveAbsolute& MoveAbsolute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveAbsolute_McLib_2eproto.base);
  return *internal_default_instance();
}


void MoveAbsolute::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.MoveAbsolute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerk_) -
      reinterpret_cast<char*>(&position_)) + sizeof(jerk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveAbsolute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Axis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Acceleration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Decerelation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          decerelation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Jerk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool ContinuousUpdate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          continuousupdate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveAbsolute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.MoveAbsolute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Axis = 1;
  if (this->axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // bool Enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // double Position = 3;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_position(), target);
  }

  // double Velocity = 4;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_velocity(), target);
  }

  // double Acceleration = 5;
  if (!(this->acceleration() <= 0 && this->acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_acceleration(), target);
  }

  // double Decerelation = 6;
  if (!(this->decerelation() <= 0 && this->decerelation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_decerelation(), target);
  }

  // double Jerk = 7;
  if (!(this->jerk() <= 0 && this->jerk() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_jerk(), target);
  }

  // bool ContinuousUpdate = 8;
  if (this->continuousupdate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_continuousupdate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.MoveAbsolute)
  return target;
}

size_t MoveAbsolute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.MoveAbsolute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Position = 3;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 Axis = 1;
  if (this->axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis());
  }

  // bool Enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool ContinuousUpdate = 8;
  if (this->continuousupdate() != 0) {
    total_size += 1 + 1;
  }

  // double Velocity = 4;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double Acceleration = 5;
  if (!(this->acceleration() <= 0 && this->acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double Decerelation = 6;
  if (!(this->decerelation() <= 0 && this->decerelation() >= 0)) {
    total_size += 1 + 8;
  }

  // double Jerk = 7;
  if (!(this->jerk() <= 0 && this->jerk() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveAbsolute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.MoveAbsolute)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveAbsolute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveAbsolute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.MoveAbsolute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.MoveAbsolute)
    MergeFrom(*source);
  }
}

void MoveAbsolute::MergeFrom(const MoveAbsolute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.MoveAbsolute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.position() <= 0 && from.position() >= 0)) {
    _internal_set_position(from._internal_position());
  }
  if (from.axis() != 0) {
    _internal_set_axis(from._internal_axis());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.continuousupdate() != 0) {
    _internal_set_continuousupdate(from._internal_continuousupdate());
  }
  if (!(from.velocity() <= 0 && from.velocity() >= 0)) {
    _internal_set_velocity(from._internal_velocity());
  }
  if (!(from.acceleration() <= 0 && from.acceleration() >= 0)) {
    _internal_set_acceleration(from._internal_acceleration());
  }
  if (!(from.decerelation() <= 0 && from.decerelation() >= 0)) {
    _internal_set_decerelation(from._internal_decerelation());
  }
  if (!(from.jerk() <= 0 && from.jerk() >= 0)) {
    _internal_set_jerk(from._internal_jerk());
  }
}

void MoveAbsolute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.MoveAbsolute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveAbsolute::CopyFrom(const MoveAbsolute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.MoveAbsolute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveAbsolute::IsInitialized() const {
  return true;
}

void MoveAbsolute::InternalSwap(MoveAbsolute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveAbsolute, jerk_)
      + sizeof(MoveAbsolute::jerk_)
      - PROTOBUF_FIELD_OFFSET(MoveAbsolute, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveAbsolute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPostion::InitAsDefaultInstance() {
}
class SetPostion::_Internal {
 public:
};

SetPostion::SetPostion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.SetPostion)
}
SetPostion::SetPostion(const SetPostion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axis_, &from.axis_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_) -
    reinterpret_cast<char*>(&axis_)) + sizeof(relative_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.SetPostion)
}

void SetPostion::SharedCtor() {
  ::memset(&axis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_) -
      reinterpret_cast<char*>(&axis_)) + sizeof(relative_));
}

SetPostion::~SetPostion() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.SetPostion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPostion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetPostion::ArenaDtor(void* object) {
  SetPostion* _this = reinterpret_cast< SetPostion* >(object);
  (void)_this;
}
void SetPostion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPostion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPostion& SetPostion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPostion_McLib_2eproto.base);
  return *internal_default_instance();
}


void SetPostion::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.SetPostion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&axis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_) -
      reinterpret_cast<char*>(&axis_)) + sizeof(relative_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPostion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Axis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Execute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          execute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Relative = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          relative_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPostion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.SetPostion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Axis = 1;
  if (this->axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_execute(), target);
  }

  // double Position = 3;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_position(), target);
  }

  // double Relative = 4;
  if (!(this->relative() <= 0 && this->relative() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_relative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.SetPostion)
  return target;
}

size_t SetPostion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.SetPostion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Axis = 1;
  if (this->axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis());
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    total_size += 1 + 1;
  }

  // double Position = 3;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    total_size += 1 + 8;
  }

  // double Relative = 4;
  if (!(this->relative() <= 0 && this->relative() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPostion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.SetPostion)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPostion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPostion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.SetPostion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.SetPostion)
    MergeFrom(*source);
  }
}

void SetPostion::MergeFrom(const SetPostion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.SetPostion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axis() != 0) {
    _internal_set_axis(from._internal_axis());
  }
  if (from.execute() != 0) {
    _internal_set_execute(from._internal_execute());
  }
  if (!(from.position() <= 0 && from.position() >= 0)) {
    _internal_set_position(from._internal_position());
  }
  if (!(from.relative() <= 0 && from.relative() >= 0)) {
    _internal_set_relative(from._internal_relative());
  }
}

void SetPostion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.SetPostion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPostion::CopyFrom(const SetPostion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.SetPostion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPostion::IsInitialized() const {
  return true;
}

void SetPostion::InternalSwap(SetPostion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPostion, relative_)
      + sizeof(SetPostion::relative_)
      - PROTOBUF_FIELD_OFFSET(SetPostion, axis_)>(
          reinterpret_cast<char*>(&axis_),
          reinterpret_cast<char*>(&other->axis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPostion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveContinuousAbsolute::InitAsDefaultInstance() {
}
class MoveContinuousAbsolute::_Internal {
 public:
};

MoveContinuousAbsolute::MoveContinuousAbsolute(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.MoveContinuousAbsolute)
}
MoveContinuousAbsolute::MoveContinuousAbsolute(const MoveContinuousAbsolute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&endvelocity_) -
    reinterpret_cast<char*>(&position_)) + sizeof(endvelocity_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.MoveContinuousAbsolute)
}

void MoveContinuousAbsolute::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endvelocity_) -
      reinterpret_cast<char*>(&position_)) + sizeof(endvelocity_));
}

MoveContinuousAbsolute::~MoveContinuousAbsolute() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.MoveContinuousAbsolute)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveContinuousAbsolute::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveContinuousAbsolute::ArenaDtor(void* object) {
  MoveContinuousAbsolute* _this = reinterpret_cast< MoveContinuousAbsolute* >(object);
  (void)_this;
}
void MoveContinuousAbsolute::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveContinuousAbsolute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveContinuousAbsolute& MoveContinuousAbsolute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveContinuousAbsolute_McLib_2eproto.base);
  return *internal_default_instance();
}


void MoveContinuousAbsolute::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.MoveContinuousAbsolute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endvelocity_) -
      reinterpret_cast<char*>(&position_)) + sizeof(endvelocity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveContinuousAbsolute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Axis = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Acceleration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Decerelation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          decerelation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Jerk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool ContinuousUpdate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          continuousupdate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double EndVelocity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          endvelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveContinuousAbsolute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.MoveContinuousAbsolute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Axis = 1;
  if (this->axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axis(), target);
  }

  // bool Enable = 2;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable(), target);
  }

  // double Position = 3;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_position(), target);
  }

  // double Velocity = 4;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_velocity(), target);
  }

  // double Acceleration = 5;
  if (!(this->acceleration() <= 0 && this->acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_acceleration(), target);
  }

  // double Decerelation = 6;
  if (!(this->decerelation() <= 0 && this->decerelation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_decerelation(), target);
  }

  // double Jerk = 7;
  if (!(this->jerk() <= 0 && this->jerk() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_jerk(), target);
  }

  // bool ContinuousUpdate = 8;
  if (this->continuousupdate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_continuousupdate(), target);
  }

  // double EndVelocity = 9;
  if (!(this->endvelocity() <= 0 && this->endvelocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_endvelocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.MoveContinuousAbsolute)
  return target;
}

size_t MoveContinuousAbsolute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.MoveContinuousAbsolute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double Position = 3;
  if (!(this->position() <= 0 && this->position() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 Axis = 1;
  if (this->axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis());
  }

  // bool Enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // bool ContinuousUpdate = 8;
  if (this->continuousupdate() != 0) {
    total_size += 1 + 1;
  }

  // double Velocity = 4;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double Acceleration = 5;
  if (!(this->acceleration() <= 0 && this->acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double Decerelation = 6;
  if (!(this->decerelation() <= 0 && this->decerelation() >= 0)) {
    total_size += 1 + 8;
  }

  // double Jerk = 7;
  if (!(this->jerk() <= 0 && this->jerk() >= 0)) {
    total_size += 1 + 8;
  }

  // double EndVelocity = 9;
  if (!(this->endvelocity() <= 0 && this->endvelocity() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveContinuousAbsolute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.MoveContinuousAbsolute)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveContinuousAbsolute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveContinuousAbsolute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.MoveContinuousAbsolute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.MoveContinuousAbsolute)
    MergeFrom(*source);
  }
}

void MoveContinuousAbsolute::MergeFrom(const MoveContinuousAbsolute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.MoveContinuousAbsolute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.position() <= 0 && from.position() >= 0)) {
    _internal_set_position(from._internal_position());
  }
  if (from.axis() != 0) {
    _internal_set_axis(from._internal_axis());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.continuousupdate() != 0) {
    _internal_set_continuousupdate(from._internal_continuousupdate());
  }
  if (!(from.velocity() <= 0 && from.velocity() >= 0)) {
    _internal_set_velocity(from._internal_velocity());
  }
  if (!(from.acceleration() <= 0 && from.acceleration() >= 0)) {
    _internal_set_acceleration(from._internal_acceleration());
  }
  if (!(from.decerelation() <= 0 && from.decerelation() >= 0)) {
    _internal_set_decerelation(from._internal_decerelation());
  }
  if (!(from.jerk() <= 0 && from.jerk() >= 0)) {
    _internal_set_jerk(from._internal_jerk());
  }
  if (!(from.endvelocity() <= 0 && from.endvelocity() >= 0)) {
    _internal_set_endvelocity(from._internal_endvelocity());
  }
}

void MoveContinuousAbsolute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.MoveContinuousAbsolute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveContinuousAbsolute::CopyFrom(const MoveContinuousAbsolute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.MoveContinuousAbsolute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveContinuousAbsolute::IsInitialized() const {
  return true;
}

void MoveContinuousAbsolute::InternalSwap(MoveContinuousAbsolute* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveContinuousAbsolute, endvelocity_)
      + sizeof(MoveContinuousAbsolute::endvelocity_)
      - PROTOBUF_FIELD_OFFSET(MoveContinuousAbsolute, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveContinuousAbsolute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadActualPosition::InitAsDefaultInstance() {
}
class ReadActualPosition::_Internal {
 public:
};

ReadActualPosition::ReadActualPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  axes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.ReadActualPosition)
}
ReadActualPosition::ReadActualPosition(const ReadActualPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      axes_(from.axes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.ReadActualPosition)
}

void ReadActualPosition::SharedCtor() {
}

ReadActualPosition::~ReadActualPosition() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.ReadActualPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadActualPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReadActualPosition::ArenaDtor(void* object) {
  ReadActualPosition* _this = reinterpret_cast< ReadActualPosition* >(object);
  (void)_this;
}
void ReadActualPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadActualPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadActualPosition& ReadActualPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadActualPosition_McLib_2eproto.base);
  return *internal_default_instance();
}


void ReadActualPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.ReadActualPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadActualPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 Axes = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_axes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_axes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadActualPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.ReadActualPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 Axes = 1 [packed = true];
  {
    int byte_size = _axes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_axes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.ReadActualPosition)
  return target;
}

size_t ReadActualPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.ReadActualPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Axes = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->axes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _axes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadActualPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.ReadActualPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadActualPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadActualPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.ReadActualPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.ReadActualPosition)
    MergeFrom(*source);
  }
}

void ReadActualPosition::MergeFrom(const ReadActualPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.ReadActualPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  axes_.MergeFrom(from.axes_);
}

void ReadActualPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.ReadActualPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadActualPosition::CopyFrom(const ReadActualPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.ReadActualPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadActualPosition::IsInitialized() const {
  return true;
}

void ReadActualPosition::InternalSwap(ReadActualPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  axes_.InternalSwap(&other->axes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadActualPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AxesPosition::InitAsDefaultInstance() {
}
class AxesPosition::_Internal {
 public:
};

AxesPosition::AxesPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  positions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.AxesPosition)
}
AxesPosition::AxesPosition(const AxesPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.AxesPosition)
}

void AxesPosition::SharedCtor() {
}

AxesPosition::~AxesPosition() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.AxesPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AxesPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AxesPosition::ArenaDtor(void* object) {
  AxesPosition* _this = reinterpret_cast< AxesPosition* >(object);
  (void)_this;
}
void AxesPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AxesPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AxesPosition& AxesPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AxesPosition_McLib_2eproto.base);
  return *internal_default_instance();
}


void AxesPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.AxesPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AxesPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 Positions = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_positions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_positions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AxesPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.AxesPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 Positions = 1 [packed = true];
  {
    int byte_size = _positions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_positions(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.AxesPosition)
  return target;
}

size_t AxesPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.AxesPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Positions = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->positions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _positions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AxesPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.AxesPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const AxesPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AxesPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.AxesPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.AxesPosition)
    MergeFrom(*source);
  }
}

void AxesPosition::MergeFrom(const AxesPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.AxesPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
}

void AxesPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.AxesPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AxesPosition::CopyFrom(const AxesPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.AxesPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AxesPosition::IsInitialized() const {
  return true;
}

void AxesPosition::InternalSwap(AxesPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AxesPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveLinearRelative::InitAsDefaultInstance() {
}
class MoveLinearRelative::_Internal {
 public:
};

MoveLinearRelative::MoveLinearRelative(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  distance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.MoveLinearRelative)
}
MoveLinearRelative::MoveLinearRelative(const MoveLinearRelative& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      distance_(from.distance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axesgroup_, &from.axesgroup_,
    static_cast<size_t>(reinterpret_cast<char*>(&jerk_) -
    reinterpret_cast<char*>(&axesgroup_)) + sizeof(jerk_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.MoveLinearRelative)
}

void MoveLinearRelative::SharedCtor() {
  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerk_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(jerk_));
}

MoveLinearRelative::~MoveLinearRelative() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.MoveLinearRelative)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MoveLinearRelative::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MoveLinearRelative::ArenaDtor(void* object) {
  MoveLinearRelative* _this = reinterpret_cast< MoveLinearRelative* >(object);
  (void)_this;
}
void MoveLinearRelative::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MoveLinearRelative::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveLinearRelative& MoveLinearRelative::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveLinearRelative_McLib_2eproto.base);
  return *internal_default_instance();
}


void MoveLinearRelative::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.MoveLinearRelative)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_.Clear();
  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerk_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(jerk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveLinearRelative::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Execute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          execute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double Distance = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_distance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_distance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Acceleration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Deceleration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double Jerk = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveLinearRelative::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.MoveLinearRelative)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_execute(), target);
  }

  // repeated double Distance = 3 [packed = true];
  if (this->_internal_distance_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_distance(), target);
  }

  // double Velocity = 4;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_velocity(), target);
  }

  // double Acceleration = 5;
  if (!(this->acceleration() <= 0 && this->acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_acceleration(), target);
  }

  // double Deceleration = 6;
  if (!(this->deceleration() <= 0 && this->deceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_deceleration(), target);
  }

  // double Jerk = 7;
  if (!(this->jerk() <= 0 && this->jerk() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_jerk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.MoveLinearRelative)
  return target;
}

size_t MoveLinearRelative::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.MoveLinearRelative)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double Distance = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_distance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _distance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    total_size += 1 + 1;
  }

  // double Velocity = 4;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double Acceleration = 5;
  if (!(this->acceleration() <= 0 && this->acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double Deceleration = 6;
  if (!(this->deceleration() <= 0 && this->deceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double Jerk = 7;
  if (!(this->jerk() <= 0 && this->jerk() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveLinearRelative::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.MoveLinearRelative)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveLinearRelative* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveLinearRelative>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.MoveLinearRelative)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.MoveLinearRelative)
    MergeFrom(*source);
  }
}

void MoveLinearRelative::MergeFrom(const MoveLinearRelative& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.MoveLinearRelative)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  distance_.MergeFrom(from.distance_);
  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
  if (from.execute() != 0) {
    _internal_set_execute(from._internal_execute());
  }
  if (!(from.velocity() <= 0 && from.velocity() >= 0)) {
    _internal_set_velocity(from._internal_velocity());
  }
  if (!(from.acceleration() <= 0 && from.acceleration() >= 0)) {
    _internal_set_acceleration(from._internal_acceleration());
  }
  if (!(from.deceleration() <= 0 && from.deceleration() >= 0)) {
    _internal_set_deceleration(from._internal_deceleration());
  }
  if (!(from.jerk() <= 0 && from.jerk() >= 0)) {
    _internal_set_jerk(from._internal_jerk());
  }
}

void MoveLinearRelative::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.MoveLinearRelative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveLinearRelative::CopyFrom(const MoveLinearRelative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.MoveLinearRelative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveLinearRelative::IsInitialized() const {
  return true;
}

void MoveLinearRelative::InternalSwap(MoveLinearRelative* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  distance_.InternalSwap(&other->distance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveLinearRelative, jerk_)
      + sizeof(MoveLinearRelative::jerk_)
      - PROTOBUF_FIELD_OFFSET(MoveLinearRelative, axesgroup_)>(
          reinterpret_cast<char*>(&axesgroup_),
          reinterpret_cast<char*>(&other->axesgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveLinearRelative::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddAxisToGroup::InitAsDefaultInstance() {
}
class AddAxisToGroup::_Internal {
 public:
};

AddAxisToGroup::AddAxisToGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.AddAxisToGroup)
}
AddAxisToGroup::AddAxisToGroup(const AddAxisToGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axesgroup_, &from.axesgroup_,
    static_cast<size_t>(reinterpret_cast<char*>(&identingroup_) -
    reinterpret_cast<char*>(&axesgroup_)) + sizeof(identingroup_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.AddAxisToGroup)
}

void AddAxisToGroup::SharedCtor() {
  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&identingroup_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(identingroup_));
}

AddAxisToGroup::~AddAxisToGroup() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.AddAxisToGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddAxisToGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AddAxisToGroup::ArenaDtor(void* object) {
  AddAxisToGroup* _this = reinterpret_cast< AddAxisToGroup* >(object);
  (void)_this;
}
void AddAxisToGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddAxisToGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddAxisToGroup& AddAxisToGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddAxisToGroup_McLib_2eproto.base);
  return *internal_default_instance();
}


void AddAxisToGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.AddAxisToGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&identingroup_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(identingroup_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddAxisToGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Axis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          axis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Execute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          execute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 IdentInGroup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          identingroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddAxisToGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.AddAxisToGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  // int32 Axis = 2;
  if (this->axis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_axis(), target);
  }

  // bool Execute = 3;
  if (this->execute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_execute(), target);
  }

  // int32 IdentInGroup = 4;
  if (this->identingroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_identingroup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.AddAxisToGroup)
  return target;
}

size_t AddAxisToGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.AddAxisToGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  // int32 Axis = 2;
  if (this->axis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axis());
  }

  // bool Execute = 3;
  if (this->execute() != 0) {
    total_size += 1 + 1;
  }

  // int32 IdentInGroup = 4;
  if (this->identingroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_identingroup());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddAxisToGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.AddAxisToGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const AddAxisToGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddAxisToGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.AddAxisToGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.AddAxisToGroup)
    MergeFrom(*source);
  }
}

void AddAxisToGroup::MergeFrom(const AddAxisToGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.AddAxisToGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
  if (from.axis() != 0) {
    _internal_set_axis(from._internal_axis());
  }
  if (from.execute() != 0) {
    _internal_set_execute(from._internal_execute());
  }
  if (from.identingroup() != 0) {
    _internal_set_identingroup(from._internal_identingroup());
  }
}

void AddAxisToGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.AddAxisToGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddAxisToGroup::CopyFrom(const AddAxisToGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.AddAxisToGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAxisToGroup::IsInitialized() const {
  return true;
}

void AddAxisToGroup::InternalSwap(AddAxisToGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddAxisToGroup, identingroup_)
      + sizeof(AddAxisToGroup::identingroup_)
      - PROTOBUF_FIELD_OFFSET(AddAxisToGroup, axesgroup_)>(
          reinterpret_cast<char*>(&axesgroup_),
          reinterpret_cast<char*>(&other->axesgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddAxisToGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveAxisFromGroup::InitAsDefaultInstance() {
}
class RemoveAxisFromGroup::_Internal {
 public:
};

RemoveAxisFromGroup::RemoveAxisFromGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.RemoveAxisFromGroup)
}
RemoveAxisFromGroup::RemoveAxisFromGroup(const RemoveAxisFromGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axesgroup_, &from.axesgroup_,
    static_cast<size_t>(reinterpret_cast<char*>(&identingroup_) -
    reinterpret_cast<char*>(&axesgroup_)) + sizeof(identingroup_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.RemoveAxisFromGroup)
}

void RemoveAxisFromGroup::SharedCtor() {
  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&identingroup_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(identingroup_));
}

RemoveAxisFromGroup::~RemoveAxisFromGroup() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.RemoveAxisFromGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoveAxisFromGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoveAxisFromGroup::ArenaDtor(void* object) {
  RemoveAxisFromGroup* _this = reinterpret_cast< RemoveAxisFromGroup* >(object);
  (void)_this;
}
void RemoveAxisFromGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoveAxisFromGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveAxisFromGroup& RemoveAxisFromGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveAxisFromGroup_McLib_2eproto.base);
  return *internal_default_instance();
}


void RemoveAxisFromGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.RemoveAxisFromGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&identingroup_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(identingroup_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveAxisFromGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Execute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          execute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 IdentInGroup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          identingroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveAxisFromGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.RemoveAxisFromGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_execute(), target);
  }

  // int32 IdentInGroup = 3;
  if (this->identingroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_identingroup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.RemoveAxisFromGroup)
  return target;
}

size_t RemoveAxisFromGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.RemoveAxisFromGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    total_size += 1 + 1;
  }

  // int32 IdentInGroup = 3;
  if (this->identingroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_identingroup());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveAxisFromGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.RemoveAxisFromGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveAxisFromGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveAxisFromGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.RemoveAxisFromGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.RemoveAxisFromGroup)
    MergeFrom(*source);
  }
}

void RemoveAxisFromGroup::MergeFrom(const RemoveAxisFromGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.RemoveAxisFromGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
  if (from.execute() != 0) {
    _internal_set_execute(from._internal_execute());
  }
  if (from.identingroup() != 0) {
    _internal_set_identingroup(from._internal_identingroup());
  }
}

void RemoveAxisFromGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.RemoveAxisFromGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveAxisFromGroup::CopyFrom(const RemoveAxisFromGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.RemoveAxisFromGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveAxisFromGroup::IsInitialized() const {
  return true;
}

void RemoveAxisFromGroup::InternalSwap(RemoveAxisFromGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveAxisFromGroup, identingroup_)
      + sizeof(RemoveAxisFromGroup::identingroup_)
      - PROTOBUF_FIELD_OFFSET(RemoveAxisFromGroup, axesgroup_)>(
          reinterpret_cast<char*>(&axesgroup_),
          reinterpret_cast<char*>(&other->axesgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveAxisFromGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupEnable::InitAsDefaultInstance() {
}
class GroupEnable::_Internal {
 public:
};

GroupEnable::GroupEnable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.GroupEnable)
}
GroupEnable::GroupEnable(const GroupEnable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axesgroup_, &from.axesgroup_,
    static_cast<size_t>(reinterpret_cast<char*>(&devicenum_) -
    reinterpret_cast<char*>(&axesgroup_)) + sizeof(devicenum_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.GroupEnable)
}

void GroupEnable::SharedCtor() {
  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicenum_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(devicenum_));
}

GroupEnable::~GroupEnable() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.GroupEnable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupEnable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroupEnable::ArenaDtor(void* object) {
  GroupEnable* _this = reinterpret_cast< GroupEnable* >(object);
  (void)_this;
}
void GroupEnable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupEnable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupEnable& GroupEnable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupEnable_McLib_2eproto.base);
  return *internal_default_instance();
}


void GroupEnable::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.GroupEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&devicenum_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(devicenum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupEnable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Execute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          execute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 DeviceNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          devicenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupEnable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.GroupEnable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_execute(), target);
  }

  // int32 DeviceNum = 3;
  if (this->devicenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_devicenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.GroupEnable)
  return target;
}

size_t GroupEnable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.GroupEnable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    total_size += 1 + 1;
  }

  // int32 DeviceNum = 3;
  if (this->devicenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_devicenum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupEnable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.GroupEnable)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupEnable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupEnable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.GroupEnable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.GroupEnable)
    MergeFrom(*source);
  }
}

void GroupEnable::MergeFrom(const GroupEnable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.GroupEnable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
  if (from.execute() != 0) {
    _internal_set_execute(from._internal_execute());
  }
  if (from.devicenum() != 0) {
    _internal_set_devicenum(from._internal_devicenum());
  }
}

void GroupEnable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.GroupEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupEnable::CopyFrom(const GroupEnable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.GroupEnable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupEnable::IsInitialized() const {
  return true;
}

void GroupEnable::InternalSwap(GroupEnable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupEnable, devicenum_)
      + sizeof(GroupEnable::devicenum_)
      - PROTOBUF_FIELD_OFFSET(GroupEnable, axesgroup_)>(
          reinterpret_cast<char*>(&axesgroup_),
          reinterpret_cast<char*>(&other->axesgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupEnable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupDisable::InitAsDefaultInstance() {
}
class GroupDisable::_Internal {
 public:
};

GroupDisable::GroupDisable(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.GroupDisable)
}
GroupDisable::GroupDisable(const GroupDisable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axesgroup_, &from.axesgroup_,
    static_cast<size_t>(reinterpret_cast<char*>(&execute_) -
    reinterpret_cast<char*>(&axesgroup_)) + sizeof(execute_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.GroupDisable)
}

void GroupDisable::SharedCtor() {
  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execute_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(execute_));
}

GroupDisable::~GroupDisable() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.GroupDisable)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupDisable::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroupDisable::ArenaDtor(void* object) {
  GroupDisable* _this = reinterpret_cast< GroupDisable* >(object);
  (void)_this;
}
void GroupDisable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupDisable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupDisable& GroupDisable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupDisable_McLib_2eproto.base);
  return *internal_default_instance();
}


void GroupDisable::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.GroupDisable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execute_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(execute_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupDisable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Execute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          execute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupDisable::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.GroupDisable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_execute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.GroupDisable)
  return target;
}

size_t GroupDisable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.GroupDisable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupDisable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.GroupDisable)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupDisable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupDisable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.GroupDisable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.GroupDisable)
    MergeFrom(*source);
  }
}

void GroupDisable::MergeFrom(const GroupDisable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.GroupDisable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
  if (from.execute() != 0) {
    _internal_set_execute(from._internal_execute());
  }
}

void GroupDisable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.GroupDisable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupDisable::CopyFrom(const GroupDisable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.GroupDisable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupDisable::IsInitialized() const {
  return true;
}

void GroupDisable::InternalSwap(GroupDisable* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupDisable, execute_)
      + sizeof(GroupDisable::execute_)
      - PROTOBUF_FIELD_OFFSET(GroupDisable, axesgroup_)>(
          reinterpret_cast<char*>(&axesgroup_),
          reinterpret_cast<char*>(&other->axesgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupDisable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UngroupAllAxes::InitAsDefaultInstance() {
}
class UngroupAllAxes::_Internal {
 public:
};

UngroupAllAxes::UngroupAllAxes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.UngroupAllAxes)
}
UngroupAllAxes::UngroupAllAxes(const UngroupAllAxes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axesgroup_, &from.axesgroup_,
    static_cast<size_t>(reinterpret_cast<char*>(&execute_) -
    reinterpret_cast<char*>(&axesgroup_)) + sizeof(execute_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.UngroupAllAxes)
}

void UngroupAllAxes::SharedCtor() {
  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execute_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(execute_));
}

UngroupAllAxes::~UngroupAllAxes() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.UngroupAllAxes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UngroupAllAxes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UngroupAllAxes::ArenaDtor(void* object) {
  UngroupAllAxes* _this = reinterpret_cast< UngroupAllAxes* >(object);
  (void)_this;
}
void UngroupAllAxes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UngroupAllAxes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UngroupAllAxes& UngroupAllAxes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UngroupAllAxes_McLib_2eproto.base);
  return *internal_default_instance();
}


void UngroupAllAxes::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.UngroupAllAxes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execute_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(execute_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UngroupAllAxes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Execute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          execute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UngroupAllAxes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.UngroupAllAxes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_execute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.UngroupAllAxes)
  return target;
}

size_t UngroupAllAxes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.UngroupAllAxes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UngroupAllAxes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.UngroupAllAxes)
  GOOGLE_DCHECK_NE(&from, this);
  const UngroupAllAxes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UngroupAllAxes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.UngroupAllAxes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.UngroupAllAxes)
    MergeFrom(*source);
  }
}

void UngroupAllAxes::MergeFrom(const UngroupAllAxes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.UngroupAllAxes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
  if (from.execute() != 0) {
    _internal_set_execute(from._internal_execute());
  }
}

void UngroupAllAxes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.UngroupAllAxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UngroupAllAxes::CopyFrom(const UngroupAllAxes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.UngroupAllAxes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UngroupAllAxes::IsInitialized() const {
  return true;
}

void UngroupAllAxes::InternalSwap(UngroupAllAxes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UngroupAllAxes, execute_)
      + sizeof(UngroupAllAxes::execute_)
      - PROTOBUF_FIELD_OFFSET(UngroupAllAxes, axesgroup_)>(
          reinterpret_cast<char*>(&axesgroup_),
          reinterpret_cast<char*>(&other->axesgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UngroupAllAxes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetKinTransform::InitAsDefaultInstance() {
}
class SetKinTransform::_Internal {
 public:
};

SetKinTransform::SetKinTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.SetKinTransform)
}
SetKinTransform::SetKinTransform(const SetKinTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  axesgroup_ = from.axesgroup_;
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.SetKinTransform)
}

void SetKinTransform::SharedCtor() {
  axesgroup_ = 0;
}

SetKinTransform::~SetKinTransform() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.SetKinTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetKinTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetKinTransform::ArenaDtor(void* object) {
  SetKinTransform* _this = reinterpret_cast< SetKinTransform* >(object);
  (void)_this;
}
void SetKinTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetKinTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetKinTransform& SetKinTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetKinTransform_McLib_2eproto.base);
  return *internal_default_instance();
}


void SetKinTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.SetKinTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axesgroup_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetKinTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetKinTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.SetKinTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.SetKinTransform)
  return target;
}

size_t SetKinTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.SetKinTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetKinTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.SetKinTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const SetKinTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetKinTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.SetKinTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.SetKinTransform)
    MergeFrom(*source);
  }
}

void SetKinTransform::MergeFrom(const SetKinTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.SetKinTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
}

void SetKinTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.SetKinTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetKinTransform::CopyFrom(const SetKinTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.SetKinTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetKinTransform::IsInitialized() const {
  return true;
}

void SetKinTransform::InternalSwap(SetKinTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(axesgroup_, other->axesgroup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetKinTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCoordinateTransform::InitAsDefaultInstance() {
}
class SetCoordinateTransform::_Internal {
 public:
};

SetCoordinateTransform::SetCoordinateTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.SetCoordinateTransform)
}
SetCoordinateTransform::SetCoordinateTransform(const SetCoordinateTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  axesgroup_ = from.axesgroup_;
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.SetCoordinateTransform)
}

void SetCoordinateTransform::SharedCtor() {
  axesgroup_ = 0;
}

SetCoordinateTransform::~SetCoordinateTransform() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.SetCoordinateTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetCoordinateTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetCoordinateTransform::ArenaDtor(void* object) {
  SetCoordinateTransform* _this = reinterpret_cast< SetCoordinateTransform* >(object);
  (void)_this;
}
void SetCoordinateTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetCoordinateTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCoordinateTransform& SetCoordinateTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCoordinateTransform_McLib_2eproto.base);
  return *internal_default_instance();
}


void SetCoordinateTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.SetCoordinateTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axesgroup_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCoordinateTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCoordinateTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.SetCoordinateTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.SetCoordinateTransform)
  return target;
}

size_t SetCoordinateTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.SetCoordinateTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCoordinateTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.SetCoordinateTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCoordinateTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCoordinateTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.SetCoordinateTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.SetCoordinateTransform)
    MergeFrom(*source);
  }
}

void SetCoordinateTransform::MergeFrom(const SetCoordinateTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.SetCoordinateTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
}

void SetCoordinateTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.SetCoordinateTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCoordinateTransform::CopyFrom(const SetCoordinateTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.SetCoordinateTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCoordinateTransform::IsInitialized() const {
  return true;
}

void SetCoordinateTransform::InternalSwap(SetCoordinateTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(axesgroup_, other->axesgroup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCoordinateTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCartesianTransform::InitAsDefaultInstance() {
}
class SetCartesianTransform::_Internal {
 public:
};

SetCartesianTransform::SetCartesianTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.SetCartesianTransform)
}
SetCartesianTransform::SetCartesianTransform(const SetCartesianTransform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  axesgroup_ = from.axesgroup_;
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.SetCartesianTransform)
}

void SetCartesianTransform::SharedCtor() {
  axesgroup_ = 0;
}

SetCartesianTransform::~SetCartesianTransform() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.SetCartesianTransform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetCartesianTransform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetCartesianTransform::ArenaDtor(void* object) {
  SetCartesianTransform* _this = reinterpret_cast< SetCartesianTransform* >(object);
  (void)_this;
}
void SetCartesianTransform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetCartesianTransform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCartesianTransform& SetCartesianTransform::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCartesianTransform_McLib_2eproto.base);
  return *internal_default_instance();
}


void SetCartesianTransform::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.SetCartesianTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axesgroup_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCartesianTransform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCartesianTransform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.SetCartesianTransform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.SetCartesianTransform)
  return target;
}

size_t SetCartesianTransform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.SetCartesianTransform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCartesianTransform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.SetCartesianTransform)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCartesianTransform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCartesianTransform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.SetCartesianTransform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.SetCartesianTransform)
    MergeFrom(*source);
  }
}

void SetCartesianTransform::MergeFrom(const SetCartesianTransform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.SetCartesianTransform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
}

void SetCartesianTransform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.SetCartesianTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCartesianTransform::CopyFrom(const SetCartesianTransform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.SetCartesianTransform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCartesianTransform::IsInitialized() const {
  return true;
}

void SetCartesianTransform::InternalSwap(SetCartesianTransform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(axesgroup_, other->axesgroup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCartesianTransform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupInterrupt::InitAsDefaultInstance() {
}
class GroupInterrupt::_Internal {
 public:
};

GroupInterrupt::GroupInterrupt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.GroupInterrupt)
}
GroupInterrupt::GroupInterrupt(const GroupInterrupt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axesgroup_, &from.axesgroup_,
    static_cast<size_t>(reinterpret_cast<char*>(&jerk_) -
    reinterpret_cast<char*>(&axesgroup_)) + sizeof(jerk_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.GroupInterrupt)
}

void GroupInterrupt::SharedCtor() {
  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerk_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(jerk_));
}

GroupInterrupt::~GroupInterrupt() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.GroupInterrupt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupInterrupt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroupInterrupt::ArenaDtor(void* object) {
  GroupInterrupt* _this = reinterpret_cast< GroupInterrupt* >(object);
  (void)_this;
}
void GroupInterrupt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupInterrupt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupInterrupt& GroupInterrupt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupInterrupt_McLib_2eproto.base);
  return *internal_default_instance();
}


void GroupInterrupt::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.GroupInterrupt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerk_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(jerk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupInterrupt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Execute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          execute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Deceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double jerk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupInterrupt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.GroupInterrupt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_execute(), target);
  }

  // double Deceleration = 3;
  if (!(this->deceleration() <= 0 && this->deceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_deceleration(), target);
  }

  // double jerk = 4;
  if (!(this->jerk() <= 0 && this->jerk() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_jerk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.GroupInterrupt)
  return target;
}

size_t GroupInterrupt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.GroupInterrupt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    total_size += 1 + 1;
  }

  // double Deceleration = 3;
  if (!(this->deceleration() <= 0 && this->deceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double jerk = 4;
  if (!(this->jerk() <= 0 && this->jerk() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupInterrupt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.GroupInterrupt)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupInterrupt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupInterrupt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.GroupInterrupt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.GroupInterrupt)
    MergeFrom(*source);
  }
}

void GroupInterrupt::MergeFrom(const GroupInterrupt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.GroupInterrupt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
  if (from.execute() != 0) {
    _internal_set_execute(from._internal_execute());
  }
  if (!(from.deceleration() <= 0 && from.deceleration() >= 0)) {
    _internal_set_deceleration(from._internal_deceleration());
  }
  if (!(from.jerk() <= 0 && from.jerk() >= 0)) {
    _internal_set_jerk(from._internal_jerk());
  }
}

void GroupInterrupt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.GroupInterrupt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInterrupt::CopyFrom(const GroupInterrupt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.GroupInterrupt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInterrupt::IsInitialized() const {
  return true;
}

void GroupInterrupt::InternalSwap(GroupInterrupt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupInterrupt, jerk_)
      + sizeof(GroupInterrupt::jerk_)
      - PROTOBUF_FIELD_OFFSET(GroupInterrupt, axesgroup_)>(
          reinterpret_cast<char*>(&axesgroup_),
          reinterpret_cast<char*>(&other->axesgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupInterrupt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupContinue::InitAsDefaultInstance() {
}
class GroupContinue::_Internal {
 public:
};

GroupContinue::GroupContinue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.GroupContinue)
}
GroupContinue::GroupContinue(const GroupContinue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axesgroup_, &from.axesgroup_,
    static_cast<size_t>(reinterpret_cast<char*>(&execute_) -
    reinterpret_cast<char*>(&axesgroup_)) + sizeof(execute_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.GroupContinue)
}

void GroupContinue::SharedCtor() {
  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execute_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(execute_));
}

GroupContinue::~GroupContinue() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.GroupContinue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupContinue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroupContinue::ArenaDtor(void* object) {
  GroupContinue* _this = reinterpret_cast< GroupContinue* >(object);
  (void)_this;
}
void GroupContinue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupContinue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupContinue& GroupContinue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupContinue_McLib_2eproto.base);
  return *internal_default_instance();
}


void GroupContinue::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.GroupContinue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execute_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(execute_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupContinue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Execute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          execute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupContinue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.GroupContinue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_execute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.GroupContinue)
  return target;
}

size_t GroupContinue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.GroupContinue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupContinue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.GroupContinue)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupContinue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupContinue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.GroupContinue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.GroupContinue)
    MergeFrom(*source);
  }
}

void GroupContinue::MergeFrom(const GroupContinue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.GroupContinue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
  if (from.execute() != 0) {
    _internal_set_execute(from._internal_execute());
  }
}

void GroupContinue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.GroupContinue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupContinue::CopyFrom(const GroupContinue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.GroupContinue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupContinue::IsInitialized() const {
  return true;
}

void GroupContinue::InternalSwap(GroupContinue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupContinue, execute_)
      + sizeof(GroupContinue::execute_)
      - PROTOBUF_FIELD_OFFSET(GroupContinue, axesgroup_)>(
          reinterpret_cast<char*>(&axesgroup_),
          reinterpret_cast<char*>(&other->axesgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupContinue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupStop::InitAsDefaultInstance() {
}
class GroupStop::_Internal {
 public:
};

GroupStop::GroupStop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.GroupStop)
}
GroupStop::GroupStop(const GroupStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axesgroup_, &from.axesgroup_,
    static_cast<size_t>(reinterpret_cast<char*>(&jerk_) -
    reinterpret_cast<char*>(&axesgroup_)) + sizeof(jerk_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.GroupStop)
}

void GroupStop::SharedCtor() {
  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerk_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(jerk_));
}

GroupStop::~GroupStop() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.GroupStop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupStop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroupStop::ArenaDtor(void* object) {
  GroupStop* _this = reinterpret_cast< GroupStop* >(object);
  (void)_this;
}
void GroupStop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupStop& GroupStop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupStop_McLib_2eproto.base);
  return *internal_default_instance();
}


void GroupStop::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.GroupStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jerk_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(jerk_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupStop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Execute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          execute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Deceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double jerk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupStop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.GroupStop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_execute(), target);
  }

  // double Deceleration = 3;
  if (!(this->deceleration() <= 0 && this->deceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_deceleration(), target);
  }

  // double jerk = 4;
  if (!(this->jerk() <= 0 && this->jerk() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_jerk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.GroupStop)
  return target;
}

size_t GroupStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.GroupStop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  // bool Execute = 2;
  if (this->execute() != 0) {
    total_size += 1 + 1;
  }

  // double Deceleration = 3;
  if (!(this->deceleration() <= 0 && this->deceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double jerk = 4;
  if (!(this->jerk() <= 0 && this->jerk() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupStop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.GroupStop)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupStop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupStop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.GroupStop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.GroupStop)
    MergeFrom(*source);
  }
}

void GroupStop::MergeFrom(const GroupStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.GroupStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
  if (from.execute() != 0) {
    _internal_set_execute(from._internal_execute());
  }
  if (!(from.deceleration() <= 0 && from.deceleration() >= 0)) {
    _internal_set_deceleration(from._internal_deceleration());
  }
  if (!(from.jerk() <= 0 && from.jerk() >= 0)) {
    _internal_set_jerk(from._internal_jerk());
  }
}

void GroupStop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.GroupStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupStop::CopyFrom(const GroupStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.GroupStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupStop::IsInitialized() const {
  return true;
}

void GroupStop::InternalSwap(GroupStop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupStop, jerk_)
      + sizeof(GroupStop::jerk_)
      - PROTOBUF_FIELD_OFFSET(GroupStop, axesgroup_)>(
          reinterpret_cast<char*>(&axesgroup_),
          reinterpret_cast<char*>(&other->axesgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupStop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GroupSetPosition::InitAsDefaultInstance() {
}
class GroupSetPosition::_Internal {
 public:
};

GroupSetPosition::GroupSetPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  distance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SoftKernelHmiTest.GroupSetPosition)
}
GroupSetPosition::GroupSetPosition(const GroupSetPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      distance_(from.distance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&axesgroup_, &from.axesgroup_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_) -
    reinterpret_cast<char*>(&axesgroup_)) + sizeof(relative_));
  // @@protoc_insertion_point(copy_constructor:SoftKernelHmiTest.GroupSetPosition)
}

void GroupSetPosition::SharedCtor() {
  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(relative_));
}

GroupSetPosition::~GroupSetPosition() {
  // @@protoc_insertion_point(destructor:SoftKernelHmiTest.GroupSetPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupSetPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroupSetPosition::ArenaDtor(void* object) {
  GroupSetPosition* _this = reinterpret_cast< GroupSetPosition* >(object);
  (void)_this;
}
void GroupSetPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupSetPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupSetPosition& GroupSetPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupSetPosition_McLib_2eproto.base);
  return *internal_default_instance();
}


void GroupSetPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:SoftKernelHmiTest.GroupSetPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_.Clear();
  ::memset(&axesgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_) -
      reinterpret_cast<char*>(&axesgroup_)) + sizeof(relative_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupSetPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 AxesGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axesgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double Distance = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_distance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_distance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool Relative = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          relative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupSetPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SoftKernelHmiTest.GroupSetPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_axesgroup(), target);
  }

  // repeated double Distance = 2 [packed = true];
  if (this->_internal_distance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_distance(), target);
  }

  // bool Relative = 3;
  if (this->relative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_relative(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SoftKernelHmiTest.GroupSetPosition)
  return target;
}

size_t GroupSetPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SoftKernelHmiTest.GroupSetPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double Distance = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_distance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _distance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 AxesGroup = 1;
  if (this->axesgroup() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_axesgroup());
  }

  // bool Relative = 3;
  if (this->relative() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupSetPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SoftKernelHmiTest.GroupSetPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupSetPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupSetPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SoftKernelHmiTest.GroupSetPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SoftKernelHmiTest.GroupSetPosition)
    MergeFrom(*source);
  }
}

void GroupSetPosition::MergeFrom(const GroupSetPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SoftKernelHmiTest.GroupSetPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  distance_.MergeFrom(from.distance_);
  if (from.axesgroup() != 0) {
    _internal_set_axesgroup(from._internal_axesgroup());
  }
  if (from.relative() != 0) {
    _internal_set_relative(from._internal_relative());
  }
}

void GroupSetPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SoftKernelHmiTest.GroupSetPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupSetPosition::CopyFrom(const GroupSetPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SoftKernelHmiTest.GroupSetPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupSetPosition::IsInitialized() const {
  return true;
}

void GroupSetPosition::InternalSwap(GroupSetPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  distance_.InternalSwap(&other->distance_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupSetPosition, relative_)
      + sizeof(GroupSetPosition::relative_)
      - PROTOBUF_FIELD_OFFSET(GroupSetPosition, axesgroup_)>(
          reinterpret_cast<char*>(&axesgroup_),
          reinterpret_cast<char*>(&other->axesgroup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupSetPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SoftKernelHmiTest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::McResult* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::McResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::McResult >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::Power* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::Power >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::Power >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::Stop* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::Stop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::MoveAbsolute* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::MoveAbsolute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::MoveAbsolute >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::SetPostion* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::SetPostion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::SetPostion >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::MoveContinuousAbsolute* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::MoveContinuousAbsolute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::MoveContinuousAbsolute >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::ReadActualPosition* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::ReadActualPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::ReadActualPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::AxesPosition* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::AxesPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::AxesPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::MoveLinearRelative* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::MoveLinearRelative >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::MoveLinearRelative >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::AddAxisToGroup* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::AddAxisToGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::AddAxisToGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::RemoveAxisFromGroup* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::RemoveAxisFromGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::RemoveAxisFromGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::GroupEnable* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::GroupEnable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::GroupEnable >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::GroupDisable* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::GroupDisable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::GroupDisable >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::UngroupAllAxes* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::UngroupAllAxes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::UngroupAllAxes >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::SetKinTransform* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::SetKinTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::SetKinTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::SetCoordinateTransform* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::SetCoordinateTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::SetCoordinateTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::SetCartesianTransform* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::SetCartesianTransform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::SetCartesianTransform >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::GroupInterrupt* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::GroupInterrupt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::GroupInterrupt >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::GroupContinue* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::GroupContinue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::GroupContinue >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::GroupStop* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::GroupStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::GroupStop >(arena);
}
template<> PROTOBUF_NOINLINE ::SoftKernelHmiTest::GroupSetPosition* Arena::CreateMaybeMessage< ::SoftKernelHmiTest::GroupSetPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SoftKernelHmiTest::GroupSetPosition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
