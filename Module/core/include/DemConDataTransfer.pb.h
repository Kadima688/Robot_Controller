// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DemConDataTransfer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DemConDataTransfer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DemConDataTransfer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DemConDataTransfer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DemConDataTransfer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DemConDataTransfer_2eproto;
namespace ExternalDataTransfer {
class Pt_AXISPOS_SCARA;
class Pt_AXISPOS_SCARADefaultTypeInternal;
extern Pt_AXISPOS_SCARADefaultTypeInternal _Pt_AXISPOS_SCARA_default_instance_;
class Pt_DataResult;
class Pt_DataResultDefaultTypeInternal;
extern Pt_DataResultDefaultTypeInternal _Pt_DataResult_default_instance_;
class Pt_DataVoid;
class Pt_DataVoidDefaultTypeInternal;
extern Pt_DataVoidDefaultTypeInternal _Pt_DataVoid_default_instance_;
class Pt_EnableState;
class Pt_EnableStateDefaultTypeInternal;
extern Pt_EnableStateDefaultTypeInternal _Pt_EnableState_default_instance_;
}  // namespace ExternalDataTransfer
PROTOBUF_NAMESPACE_OPEN
template<> ::ExternalDataTransfer::Pt_AXISPOS_SCARA* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_AXISPOS_SCARA>(Arena*);
template<> ::ExternalDataTransfer::Pt_DataResult* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_DataResult>(Arena*);
template<> ::ExternalDataTransfer::Pt_DataVoid* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_DataVoid>(Arena*);
template<> ::ExternalDataTransfer::Pt_EnableState* Arena::CreateMaybeMessage<::ExternalDataTransfer::Pt_EnableState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ExternalDataTransfer {

// ===================================================================

class Pt_DataVoid PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_DataVoid) */ {
 public:
  inline Pt_DataVoid() : Pt_DataVoid(nullptr) {}
  virtual ~Pt_DataVoid();

  Pt_DataVoid(const Pt_DataVoid& from);
  Pt_DataVoid(Pt_DataVoid&& from) noexcept
    : Pt_DataVoid() {
    *this = ::std::move(from);
  }

  inline Pt_DataVoid& operator=(const Pt_DataVoid& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_DataVoid& operator=(Pt_DataVoid&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_DataVoid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_DataVoid* internal_default_instance() {
    return reinterpret_cast<const Pt_DataVoid*>(
               &_Pt_DataVoid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pt_DataVoid& a, Pt_DataVoid& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_DataVoid* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_DataVoid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_DataVoid* New() const final {
    return CreateMaybeMessage<Pt_DataVoid>(nullptr);
  }

  Pt_DataVoid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_DataVoid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_DataVoid& from);
  void MergeFrom(const Pt_DataVoid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_DataVoid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_DataVoid";
  }
  protected:
  explicit Pt_DataVoid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_DataVoid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_DataResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_DataResult) */ {
 public:
  inline Pt_DataResult() : Pt_DataResult(nullptr) {}
  virtual ~Pt_DataResult();

  Pt_DataResult(const Pt_DataResult& from);
  Pt_DataResult(Pt_DataResult&& from) noexcept
    : Pt_DataResult() {
    *this = ::std::move(from);
  }

  inline Pt_DataResult& operator=(const Pt_DataResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_DataResult& operator=(Pt_DataResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_DataResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_DataResult* internal_default_instance() {
    return reinterpret_cast<const Pt_DataResult*>(
               &_Pt_DataResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pt_DataResult& a, Pt_DataResult& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_DataResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_DataResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_DataResult* New() const final {
    return CreateMaybeMessage<Pt_DataResult>(nullptr);
  }

  Pt_DataResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_DataResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_DataResult& from);
  void MergeFrom(const Pt_DataResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_DataResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_DataResult";
  }
  protected:
  explicit Pt_DataResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // int32 result = 1;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_DataResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_EnableState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_EnableState) */ {
 public:
  inline Pt_EnableState() : Pt_EnableState(nullptr) {}
  virtual ~Pt_EnableState();

  Pt_EnableState(const Pt_EnableState& from);
  Pt_EnableState(Pt_EnableState&& from) noexcept
    : Pt_EnableState() {
    *this = ::std::move(from);
  }

  inline Pt_EnableState& operator=(const Pt_EnableState& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_EnableState& operator=(Pt_EnableState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_EnableState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_EnableState* internal_default_instance() {
    return reinterpret_cast<const Pt_EnableState*>(
               &_Pt_EnableState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pt_EnableState& a, Pt_EnableState& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_EnableState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_EnableState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_EnableState* New() const final {
    return CreateMaybeMessage<Pt_EnableState>(nullptr);
  }

  Pt_EnableState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_EnableState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_EnableState& from);
  void MergeFrom(const Pt_EnableState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_EnableState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_EnableState";
  }
  protected:
  explicit Pt_EnableState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnablestateFieldNumber = 1,
  };
  // int32 enablestate = 1;
  void clear_enablestate();
  ::PROTOBUF_NAMESPACE_ID::int32 enablestate() const;
  void set_enablestate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enablestate() const;
  void _internal_set_enablestate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_EnableState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 enablestate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// -------------------------------------------------------------------

class Pt_AXISPOS_SCARA PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ExternalDataTransfer.Pt_AXISPOS_SCARA) */ {
 public:
  inline Pt_AXISPOS_SCARA() : Pt_AXISPOS_SCARA(nullptr) {}
  virtual ~Pt_AXISPOS_SCARA();

  Pt_AXISPOS_SCARA(const Pt_AXISPOS_SCARA& from);
  Pt_AXISPOS_SCARA(Pt_AXISPOS_SCARA&& from) noexcept
    : Pt_AXISPOS_SCARA() {
    *this = ::std::move(from);
  }

  inline Pt_AXISPOS_SCARA& operator=(const Pt_AXISPOS_SCARA& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pt_AXISPOS_SCARA& operator=(Pt_AXISPOS_SCARA&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pt_AXISPOS_SCARA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pt_AXISPOS_SCARA* internal_default_instance() {
    return reinterpret_cast<const Pt_AXISPOS_SCARA*>(
               &_Pt_AXISPOS_SCARA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Pt_AXISPOS_SCARA& a, Pt_AXISPOS_SCARA& b) {
    a.Swap(&b);
  }
  inline void Swap(Pt_AXISPOS_SCARA* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pt_AXISPOS_SCARA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pt_AXISPOS_SCARA* New() const final {
    return CreateMaybeMessage<Pt_AXISPOS_SCARA>(nullptr);
  }

  Pt_AXISPOS_SCARA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pt_AXISPOS_SCARA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pt_AXISPOS_SCARA& from);
  void MergeFrom(const Pt_AXISPOS_SCARA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pt_AXISPOS_SCARA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ExternalDataTransfer.Pt_AXISPOS_SCARA";
  }
  protected:
  explicit Pt_AXISPOS_SCARA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DemConDataTransfer_2eproto);
    return ::descriptor_table_DemConDataTransfer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kA1FieldNumber = 1,
    kA2FieldNumber = 2,
    kA3FieldNumber = 3,
    kA4FieldNumber = 4,
  };
  // double a1 = 1;
  void clear_a1();
  double a1() const;
  void set_a1(double value);
  private:
  double _internal_a1() const;
  void _internal_set_a1(double value);
  public:

  // double a2 = 2;
  void clear_a2();
  double a2() const;
  void set_a2(double value);
  private:
  double _internal_a2() const;
  void _internal_set_a2(double value);
  public:

  // double a3 = 3;
  void clear_a3();
  double a3() const;
  void set_a3(double value);
  private:
  double _internal_a3() const;
  void _internal_set_a3(double value);
  public:

  // double a4 = 4;
  void clear_a4();
  double a4() const;
  void set_a4(double value);
  private:
  double _internal_a4() const;
  void _internal_set_a4(double value);
  public:

  // @@protoc_insertion_point(class_scope:ExternalDataTransfer.Pt_AXISPOS_SCARA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double a1_;
  double a2_;
  double a3_;
  double a4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DemConDataTransfer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pt_DataVoid

// -------------------------------------------------------------------

// Pt_DataResult

// int32 result = 1;
inline void Pt_DataResult::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_DataResult::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_DataResult::result() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_DataResult.result)
  return _internal_result();
}
inline void Pt_DataResult::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void Pt_DataResult::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_DataResult.result)
}

// -------------------------------------------------------------------

// Pt_EnableState

// int32 enablestate = 1;
inline void Pt_EnableState::clear_enablestate() {
  enablestate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_EnableState::_internal_enablestate() const {
  return enablestate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pt_EnableState::enablestate() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_EnableState.enablestate)
  return _internal_enablestate();
}
inline void Pt_EnableState::_internal_set_enablestate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enablestate_ = value;
}
inline void Pt_EnableState::set_enablestate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enablestate(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_EnableState.enablestate)
}

// -------------------------------------------------------------------

// Pt_AXISPOS_SCARA

// double a1 = 1;
inline void Pt_AXISPOS_SCARA::clear_a1() {
  a1_ = 0;
}
inline double Pt_AXISPOS_SCARA::_internal_a1() const {
  return a1_;
}
inline double Pt_AXISPOS_SCARA::a1() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_AXISPOS_SCARA.a1)
  return _internal_a1();
}
inline void Pt_AXISPOS_SCARA::_internal_set_a1(double value) {
  
  a1_ = value;
}
inline void Pt_AXISPOS_SCARA::set_a1(double value) {
  _internal_set_a1(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_AXISPOS_SCARA.a1)
}

// double a2 = 2;
inline void Pt_AXISPOS_SCARA::clear_a2() {
  a2_ = 0;
}
inline double Pt_AXISPOS_SCARA::_internal_a2() const {
  return a2_;
}
inline double Pt_AXISPOS_SCARA::a2() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_AXISPOS_SCARA.a2)
  return _internal_a2();
}
inline void Pt_AXISPOS_SCARA::_internal_set_a2(double value) {
  
  a2_ = value;
}
inline void Pt_AXISPOS_SCARA::set_a2(double value) {
  _internal_set_a2(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_AXISPOS_SCARA.a2)
}

// double a3 = 3;
inline void Pt_AXISPOS_SCARA::clear_a3() {
  a3_ = 0;
}
inline double Pt_AXISPOS_SCARA::_internal_a3() const {
  return a3_;
}
inline double Pt_AXISPOS_SCARA::a3() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_AXISPOS_SCARA.a3)
  return _internal_a3();
}
inline void Pt_AXISPOS_SCARA::_internal_set_a3(double value) {
  
  a3_ = value;
}
inline void Pt_AXISPOS_SCARA::set_a3(double value) {
  _internal_set_a3(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_AXISPOS_SCARA.a3)
}

// double a4 = 4;
inline void Pt_AXISPOS_SCARA::clear_a4() {
  a4_ = 0;
}
inline double Pt_AXISPOS_SCARA::_internal_a4() const {
  return a4_;
}
inline double Pt_AXISPOS_SCARA::a4() const {
  // @@protoc_insertion_point(field_get:ExternalDataTransfer.Pt_AXISPOS_SCARA.a4)
  return _internal_a4();
}
inline void Pt_AXISPOS_SCARA::_internal_set_a4(double value) {
  
  a4_ = value;
}
inline void Pt_AXISPOS_SCARA::set_a4(double value) {
  _internal_set_a4(value);
  // @@protoc_insertion_point(field_set:ExternalDataTransfer.Pt_AXISPOS_SCARA.a4)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ExternalDataTransfer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DemConDataTransfer_2eproto
